{"version":3,"file":"js/chunks/app/meeting/payment~app/meeting/payment/receipt~app/meeting/recordings~app/meeting/snapshots~app/mem~272c3e43.js?id=ae7d76ce9c6a0fd31bbe","sources":["webpack:///./resources/js/helpers/transformers.js","webpack:///./resources/js/mixins/view.js"],"sourcesContent":["import store from '@js/store'\nimport { formatCurrency } from '@core/utils'\nconst vars = store.getters['config/vars']\n\n\nexport function arrayOfObjects(value, opts) {\n    let toReturn = ''\n\n    if(value && value.length && opts) {\n        value.forEach(detail => {\n            if(toReturn) {\n                toReturn += ', '\n            }\n            toReturn += `${detail[opts.firstAttr][opts.firstAttr2]} (${formatCurrency.to(detail[opts.secondAttr], vars.defaultCurrency, true, false, true, false)})`\n        })\n    }\n\n    return toReturn\n}\n\nexport function uppercase(val) {\n    return val.toUpperCase()\n}\n\nexport function capitalize(val) {\n    return val.capitalize()\n}\n\nexport function lowercase(val) {\n    return val.toLowerCase()\n}\n\nexport function objectWithName({name}) {\n    return name\n}\n\nexport function contact({name}) {\n    return name\n}\n\nexport function contactWithAlias({name, alias}) {\n    return `${name} (${alias})`\n}\n\nexport function contactWithAssociation({name, designation}) {\n    return `${name} (${designation})`\n}\n\nexport function user(user) {\n    return user.profile ? user.profile.name || user.username : user.username\n}\n\nexport function employee({name}) {\n    return name\n}\n\nexport function employeeWithAlias({name, alias}) {\n    return `${name} (${alias})`\n}\n\nexport function getRegion(value, item = {}) {\n    let region = item ? item.city : ''\n    region = region ? (item.zipcode ? `${region} - ${item.zipcode}` : region) : ''\n    region = item.state ? (region ? `${region}, ${item.state}` : item.state) : region\n    region = item.country ? (region ? `${region}, ${item.country.name}` : item.country.name) : region\n    return region\n}\n\nexport function percent(content) {\n    return `${content} %`\n}\n\nexport function date(content) {\n    return moment(content, vars.serverDateFormat).format(vars.defaultDateFormat)\n}\n\nexport function datetime(content) {\n    return moment(content, vars.serverDateTimeFormat).format(vars.defaultDateTimeFormat)\n}\n\nexport function truncateString(content, opts) {\n    const max = opts.max || 30\n    const suffix = content.length > max ? (opts.suffix || '...') : ''\n    return content.slice(0, max) + suffix\n}\n\nexport function limitWords(content, opts) {\n    const contentArr = content.split(' ')\n    const max = opts.max || 3\n    const suffix = contentArr.length > max ? (opts.suffix || '...') : ''\n    return contentArr.slice(0, max).join(' ') + suffix\n}\n\nexport function badgeStatus(status) {\n    return status ? 'true' : 'false'\n}\n\nexport function badgeStatusYesNo(status) {\n    return status ? $t('general.yes') : $t('general.no')\n}\n\nexport function badgeStatusLabel(status, opts) {\n    return status ? $t('general.yes') : $t('general.no')\n}\n\nexport function badgeStatusCompleted(status) {\n    return status ? $t('utility.todo.completed') : $t('utility.todo.incomplete')\n}\n\nexport function currency(value, opts) {\n    const currency = opts && opts.currency ? opts.currency : vars.defaultCurrency\n    return formatCurrency.to(value, currency, true)\n}\n\nexport function getCurrencyDescription(value, item = {}) {\n    return `${item.currency.name} - ${item.currency.description} (${item.currency.symbol})`\n}\n","import * as headerMixins from './header'\nimport * as transformers from '@js/helpers/transformers'\nimport { mapGetters, mapActions } from 'vuex'\nimport EventBus from '@js/event-bus'\nimport _ from 'lodash'\n\nexport default {\n    components: {\n    },\n    data() {\n        return {\n            uuid: null,\n            subUuid: null,\n            entity: null,\n            preRequisite: {},\n            formData: {},\n            formErrors: {},\n            editing : false,\n            isLoading : false,\n            initialFormData: null,\n            getInitialDataCalled: false,\n            autoExport: null,\n            initUrl: '',\n            fallBackRoute: 'appDashboard',\n            headerButtons: null,\n            headerLinks: null,\n            uploaderConfig: {\n                module: '',\n                token: '',\n                allowedExtensions: '',\n                allowedMaxFileSize: null,\n                maxNoOfFiles: 5,\n                uuid: uuid(),\n            },\n        }\n    },\n    watch: {\n        $route(val, oldVal) {\n            if(oldVal.params.uuid !== val.params.uuid) {\n                this.isLoading = true\n                this.uuid = val.params.uuid\n                if(this.getInitialDataCalled) {\n                    this.getInitialData()\n                }\n            }\n        },\n    },\n    computed: {\n        ...mapGetters('config', [\n            'vars',\n            'configs',\n            'allowExtraInput',\n        ]),\n        ...mapGetters('user', [\n            'hasPermission',\n        ]),\n    },\n    methods: {\n        ...mapActions('common', [\n            'Init',\n            'InitSub',\n            'Get',\n            'GetList',\n            'Destroy',\n            'SetMeta',\n            'SetFilters',\n            'Custom',\n            'GetPreRequisite',\n            'ResetFilters',\n            'Update',\n            'SetPageHeader',\n        ]),\n        ...mapActions('config', [\n            'SetUiConfig',\n            'SetConfig',\n        ]),\n        fillPreRequisite(response) {\n            this.preRequisite.objForEach((value, key) => {\n                this.preRequisite[key] = response.hasOwnProperty(key) ? response[key] : value\n            })\n        },\n        setEntityData(response) {\n            if(this.entityKey && response.hasOwnProperty(this.entityKey)) {\n                this.entity = response[this.entityKey]\n            } else {\n                this.entity = response\n            }\n        },\n        setUploaderConfig(uploadConfig) {\n            this.uploaderConfig.objForEach((value, key) => {\n                this.uploaderConfig[key] = uploadConfig.hasOwnProperty(key) ? uploadConfig[key] : value\n            })\n        },\n        async getPreRequisite(callbackFn) {\n            this.isLoading = true\n            try {\n                let response = await this.GetPreRequisite()\n                this.fillPreRequisite(response)\n\n                if(_.isObject(response) && response.hasOwnProperty('uploadConfig')) {\n                    this.setUploaderConfig(response.uploadConfig)\n                }\n\n                if (typeof this.afterGetPreRequisite === \"function\") {\n                    this.afterGetPreRequisite()\n                }\n\n                if(callbackFn) {\n                    this.$nextTick(() => {\n                        callbackFn()\n                    })\n                }\n\n                this.isLoading = false\n                return response\n            } catch (error) {\n                this.isLoading = false\n                formUtil.handleErrors(error)\n            }\n        },\n        async getInitialData(callbackFn) {\n            this.isLoading = true\n            this.getInitialDataCalled = true\n            try {\n                let response = await this.Get({ uuid: this.uuid })\n                this.setEntityData(response)\n\n                if (this.pageTitleProperty) {\n                    this.pageTitle = this.entity[this.pageTitleProperty] + ' - ' + this.$t(this.$route.meta.title)\n                }\n                if (this.subTitleProperty) {\n                    this.subTitle = this.entity[this.subTitleProperty]\n                }\n\n                if (this.afterGetInitialData && typeof this.afterGetInitialData === \"function\") {\n                    this.afterGetInitialData(response)\n                }\n\n                if(callbackFn) {\n                    this.$nextTick(() => {\n                        callbackFn(response)\n                    })\n                }\n\n                if(this.autoExport) {\n                    setTimeout(() => {\n                        this.$nextTick(() => {\n                            if(!this.formData || !this.formData.hasOwnProperty('loaded') || this.formData.loaded) {\n                                this.export()\n                            }\n                        })\n                    }, 2000)\n                }\n\n                this.isLoading = false\n                return response\n            } catch (error) {\n                this.isLoading = false\n                formUtil.handleErrors(error)\n                this.$router.push({ name: this.fallBackRoute })\n            }\n        },\n        getHeaderOptions() {\n            let buttons = []\n            if (this.routesRequired && this.routesRequired.add) {\n                if (typeof this.permissionsRequired === 'object' && this.permissionsRequired !== null && this.permissionsRequired.add) {\n                    buttons.push(headerMixins.addButton(this.routesRequired.add, this.permissionsRequired.add))\n                } else if (this.permissionsRequired) {\n                    buttons.push(headerMixins.addButton(this.routesRequired.add, this.permissionsRequired))\n                } else {\n                    buttons.push(headerMixins.addButton(this.routesRequired.add))\n                }\n            }\n            if (this.routesRequired && this.routesRequired.edit) {\n                if (typeof this.permissionsRequired === 'object' && this.permissionsRequired !== null && this.permissionsRequired.edit) {\n                    buttons.push(headerMixins.editButton(this.routesRequired.edit, this.permissionsRequired.edit))\n                } else if (this.permissionsRequired) {\n                    buttons.push(headerMixins.editButton(this.routesRequired.edit, this.permissionsRequired))\n                } else {\n                    buttons.push(headerMixins.editButton(this.routesRequired.edit))\n                }\n            }\n\n            if (this.routesRequired && this.routesRequired.config) {\n                if (typeof this.permissionsRequired === 'object' && this.permissionsRequired !== null && this.permissionsRequired.config) {\n                    buttons.push(headerMixins.configButton(this.routesRequired.config, this.permissionsRequired.config))\n                } else if (this.permissionsRequired) {\n                    buttons.push(headerMixins.configButton(this.routesRequired.config, this.permissionsRequired))\n                } else {\n                    buttons.push(headerMixins.configButton(this.routesRequired.config))\n                }\n            }\n\n            if (this.headerButtons) {\n                buttons = buttons.concat(this.headerButtons)\n            }\n\n            let links = []\n            links.push(headerMixins.printOption())\n            links.push(headerMixins.exportPdfOption())\n\n            if (this.headerLinks) {\n                links = links.concat(this.headerLinks)\n            }\n\n            return {\n                hideLinks: this.hideHeaderLinks || false,\n                buttons,\n                links,\n                title: this.pageTitle || '',\n                subTitle: this.pageTitle ? this.subTitle || '' : '',\n            }\n        },\n        getKeyBindingOptions() {\n            let opts = {\n                ...headerMixins.commonKeyBindings\n            }\n            if (this.routesRequired && this.routesRequired.add) {\n                opts['key_a'] = this.routesRequired.add\n            }\n            if (this.routesRequired && this.routesRequired.edit) {\n                opts['key_e'] = this.routesRequired.edit\n            }\n            return opts\n        },\n        applyPageHeader() {\n            let pageHeaderOptions = Object.assign({}, this.getHeaderOptions(), this.header || {})\n            let keyBindings = Object.assign({}, this.getKeyBindingOptions(), this.keyBindings || {})\n\n            this.SetPageHeader(pageHeaderOptions)\n            this.SetConfig({\n                keyBindings: keyBindings,\n            })\n\n            this.updatePageTitle()\n        },\n        updatePageTitle() {\n            if (!this.pageTitle || this.pageTitle.length < 1) {\n                return\n            }\n            let appName = window.kmenv.name\n            appName = this.configs && this.configs.basic && this.configs.basic.appName ? this.configs.basic.appName : appName\n\n            document.title = this.pageTitle + ' - ' + appName\n        },\n        async export (options) {\n            this.isLoading = true\n            try {\n                let printTitle = `Printing ${this.dataTitle || ''}`\n                if(this.printTitle) {\n                    printTitle = this.printTitle\n                }\n                const printPreview = this.configs.system.printPreview\n                this.$printComponent('printable', { title: printTitle, autoPrint: !printPreview, autoCloseAfterPrint: !printPreview })\n            } catch (e) { }\n            this.isLoading = false\n        },\n        doInit() {\n            this.Init({ url: this.initUrl })\n\n            if(this.initSubUrl) {\n                this.InitSub({ url: (this.subUuid ? this.subUuid + '/' : '') + this.initSubUrl })\n            }\n\n            this.getInitialData(this.applyPageHeader)\n        },\n        getBalanceClass(balance) {\n            let classText = balance > 0 ? 'text-success' : 'text-danger'\n            classText = balance && Number(balance) != 0  ? classText : ''\n            classText = classText + ' font-weight-600'\n            return classText\n        },\n        momentFn(date, inFormat, outFormat) {\n            return moment(date, inFormat || this.vars.serverDateFormat).format(outFormat || this.vars.defaultDateFormat)\n        },\n    },\n    mounted() {\n        EventBus.$off('EXPORT', this.export)\n        EventBus.$on('EXPORT', this.export)\n\n        if (this.$route.params.uuid) {\n            this.uuid = this.$route.params.uuid\n        }\n        if (this.$route.params.subUuid) {\n            this.subUuid = this.$route.params.subUuid\n        }\n\n        if(this.configs.system && this.configs.system.allowedFileExtensions) {\n            this.uploaderConfig.allowedExtensions = this.configs.system.allowedFileExtensions\n        }\n        if(this.configs.system && this.configs.system.postMaxSize) {\n            this.uploaderConfig.allowedMaxFileSize = this.configs.system.postMaxSize\n        }\n\n        if(this.$route.query && this.$route.query.hasOwnProperty('print')) {\n            this.autoExport = true\n        }\n\n        this.doInit()\n    },\n    destroyed() {\n        EventBus.$off('EXPORT', this.export)\n    },\n    beforeRouteEnter(to, from, next) {\n        if (!to.params.uuid) {\n            next({ name: from })\n        } else {\n            next()\n        }\n    },\n}\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpHA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAhBA;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AATA;AAWA;AAUA;AAmBA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBA;AACA;AADA;AAAA;AAAA;AAuBA;AACA;AACA;AAzBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0BA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAIA;AAAA;AACA;AALA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlCA;AACA;AADA;AAAA;AAAA;AAqCA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAxCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyCA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AA3LA;AA4LA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzNA;AA2NA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AA/SA;;;;A","sourceRoot":""}