{"version":3,"file":"js/chunks/app/meeting/live-as-guest.js?id=4cb92ffe48a02ce7b97e","sources":["webpack:///live-as-guest.vue","webpack:///./resources/js/views/app/meeting/live-as-guest.vue?e08f","webpack:///./resources/js/mixins/live-for-guest.js","webpack:///./resources/js/mixins/meeting-for-guest.js","webpack:///./resources/js/views/app/meeting/live-as-guest.vue","webpack:///./resources/js/views/app/meeting/live-as-guest.vue?e0de","webpack:///./resources/js/views/app/meeting/live-as-guest.vue?8051"],"sourcesContent":["<template>\n    <base-container with-loader :is-loading=\"isLoading\" :loader-color=\"vars.loaderColor\" :overlay-color=\"uiConfigs.pageColorSchemeType\" loader-size=\"screen\" :class=\"['meeting-page', {'auto-hide-footer': pageConfigs.footerAutoHide && hasVideos}, {'pulse': recording}, {'mirrored-video': configs.meeting && configs.meeting.mirroredVideo}]\" :data-page-background-color=\"uiConfigs.pageBackgroundColor\" :data-card-background-color=\"uiConfigs.pageContainerBackgroundColor\">\n\n        <template v-if=\"!duplicateTab\">\n            <div :class=\"['meeting-footer', {'has-videos': hasVideos}]\" :data-footer-background-color=\"uiConfigs.leftSidebarColor\">\n\n                <div class=\"logo-wrapper\">\n                    <app-logo place=\"sidebar\" size=\"sm\" tag=\"span\" />\n                </div>\n\n                <div class=\"meeting-actions meeting-actions-center\" v-if=\"entity && entity.status\">\n\n                    <template v-if=\"pageConfigs.showEnableAudioBtn\">\n                        <button v-if=\"pageConfigs.enableAudio\" type=\"button\" class=\"btn action\" @click=\"toggleAudio\" v-b-tooltip.hover.d500 :title=\"$t('meeting.mute_audio')\"><i class=\"fas fa-microphone\"></i></button>\n\n                        <button v-else type=\"button\" class=\"btn action disabled-text\" @click=\"toggleAudio\" v-b-tooltip.hover.d500 :title=\"$t('meeting.unmute_audio')\"><i class=\"fas fa-microphone-slash\"></i></button>\n                    </template>\n\n                    <template v-if=\"pageConfigs.showEnableVideoBtn\">\n                        <button v-if=\"pageConfigs.enableVideo\" type=\"button\" class=\"btn action\" @click=\"toggleVideo\" v-b-tooltip.hover.d500 :title=\"$t('meeting.mute_video')\"><i class=\"fas fa-video\"></i></button>\n\n                        <button v-else type=\"button\" class=\"btn action disabled-text\" @click=\"toggleVideo\" v-b-tooltip.hover.d500 :title=\"$t('meeting.unmute_video')\"><i class=\"fas fa-video-slash\"></i></button>\n                    </template>\n\n                    <button v-if=\"pageConfigs.showDeviceConfig\" type=\"button\" class=\"btn action d-sm-none d-md-inline-block\" @click=\"toggleDevicesModal\" v-b-tooltip.hover.d500 :title=\"$t('meeting.media_devices.setup')\"><i class=\"fas fa-cogs\"></i></button>\n\n                    <template v-if=\"videoList.length\">\n\n                        <button type=\"button\" class=\"btn action danger-text\" @click=\"getOffline\" v-b-tooltip.hover.d500 :title=\"$t('meeting.leave_meeting')\"><i class=\"fas fa-phone-slash\"></i></button>\n\n                        <template v-if=\"pageConfigs.enableScreenSharing && pageConfigs.pamEnableScreenSharingForGuest\">\n                            <button v-if=\"localScreenStreamid\" type=\"button\" class=\"btn action disabled-text d-none d-lg-inline-block\" @click=\"stopSharingScreen\" v-b-tooltip.hover.d500 :title=\"$t('meeting.stop_sharing_screen')\"><i class=\"fas fa-minus-square\"></i></button>\n\n                            <button v-else type=\"button\" class=\"btn action d-none d-lg-inline-block\" @click=\"shareScreen\" v-b-tooltip.hover.d500 :title=\"$t('meeting.share_screen')\"><i class=\"fas fa-desktop\"></i></button>\n                        </template>\n\n                        <template v-if=\"pageConfigs.enableWhiteboard && pageConfigs.pamEnableWhiteboardForGuest\">\n                            <button v-if=\"showWhiteboard\" type=\"button\" class=\"btn action danger-text d-none d-md-inline-block\" @click=\"toggleWhiteboard\" v-b-tooltip.hover.d500 :title=\"$t('meeting.hide_whiteboard')\"><i class=\"fas fa-chalkboard-teacher\"></i></button>\n                            <button v-if=\"showWhiteboard\" type=\"button\" class=\"btn action danger-text d-none d-md-inline-block\" @click=\"hideAndDestroyWhiteboard\" v-b-tooltip.hover.d500 :title=\"$t('meeting.clear_hide_whiteboard')\"><i class=\"fas fa-chalkboard-teacher mr-0\"></i><i class=\"fas fa-times font-size-xs ml-1 font-size-xs text-danger\"></i></button>\n\n                            <button v-else type=\"button\" class=\"btn action d-none d-md-inline-block\" @click=\"toggleWhiteboard\" v-b-tooltip.hover.d500 :title=\"$t('meeting.show_whiteboard')\"><i class=\"fas fa-chalkboard-teacher\"></i></button>\n                        </template>\n\n                        <template v-if=\"pageConfigs.enableHandGesture\">\n                            <button v-if=\"isHandUp\" type=\"button\" class=\"btn action success-text\" @click=\"toggleHandUp\" v-b-tooltip.hover.d500 :title=\"$t('meeting.lower_hand')\"><i class=\"far fa-hand-paper\"></i></button>\n\n                            <button v-else type=\"button\" class=\"btn action\" @click=\"toggleHandUp\" v-b-tooltip.hover.d500 :title=\"$t('meeting.raise_hand')\"><i class=\"fas fa-hand-paper\"></i></button>\n                        </template>\n                    </template>\n                </div>\n\n                <div class=\"meeting-actions meeting-actions-right\">\n                    <template v-if=\"entity\">\n\n                        <base-dropdown v-if=\"entity.status && videoList.length && !(pageConfigs.enableWhiteboard && showWhiteboard)\" tag=\"div\" class=\"more-actions d-none d-md-inline-block\" direction=\"up\" menu-classes=\"show-dropdown-up\" position=\"right\">\n                            <button slot=\"title\" type=\"button\" class=\"btn action grid-toggle-btn d-none d-md-inline-block\" v-b-tooltip.hover.d500 :title=\"$t('meeting.change_layout')\"><i class=\"fas fa-th-large\"></i></button>\n\n                            <button type=\"button\" class=\"dropdown-item d-flex justify-content-between align-items-center\" @click=\"toggleLayout('grid')\">{{ $t('meeting.grid_layout') }} <i class=\"fas fa-check min-width-auto text-light\" :class=\"{'text-dark': pageConfigs.layout === 'grid'}\"></i></button>\n\n                            <button type=\"button\" class=\"dropdown-item d-flex justify-content-between align-items-center\" @click=\"toggleLayout('gallery')\">{{ $t('meeting.gallery_layout') }} <i class=\"fas fa-check min-width-auto text-light\" :class=\"{'text-dark': pageConfigs.layout === 'gallery'}\"></i></button>\n\n                            <button v-if=\"pageConfigs.hasAgenda || (pageConfigs.enableWhiteboard && showWhiteboard)\" type=\"button\" class=\"dropdown-item d-flex justify-content-between align-items-center\" @click=\"toggleLayout('presentation')\">{{ $t('meeting.presentation_layout') }} <i class=\"fas fa-check min-width-auto text-light\" :class=\"{'text-dark': pageConfigs.layout === 'presentation'}\"></i></button>\n\n                            <button type=\"button\" class=\"dropdown-item d-flex justify-content-between align-items-center\" @click=\"toggleLayout('fullpage')\">{{ $t('meeting.fullpage_layout') }} <i v-if=\"pageConfigs.layout === 'fullpage'\" class=\"fas fa-check min-width-auto text-light\" :class=\"{'text-dark': pageConfigs.layout === 'fullpage'}\"></i></button>\n                        </base-dropdown>\n\n                        <button v-if=\"pageConfigs.enableChat && configs.chat && configs.chat.enabled && subscriptions && subscriptions.userPrivate && !entity.isBlocked\" type=\"button\" :class=\"['btn action chats-toggle-btn', {'pulse': totalUnreadMessages && totalUnreadMessages > 0 && !isChatBoxShown}]\" @click=\"toggleChatBox\" v-b-tooltip.hover.d500 :title=\"$t((isChatBoxShown ? 'global.hide' : 'global.show'), { attribute: $t('chat.chats')})\">\n                            <i :class=\"[isChatBoxShown ? 'fas fa-comment-slash' : 'far fa-comment']\"></i>\n\n                            <span v-if=\"totalUnreadMessages && totalUnreadMessages > 0\" class=\"text-success unread-count\">{{ totalUnreadMessages }}</span>\n\n                        </button>\n                    </template>\n\n                    <base-dropdown tag=\"div\" class=\"more-actions\" direction=\"up\" menu-classes=\"show-dropdown-up\" position=\"right\">\n                        <button slot=\"title\" type=\"button\" class=\"btn action more-actions-btn\"><i class=\"fas fa-ellipsis-v\"></i></button>\n\n                        <button v-if=\"!(entity && entity.status && videoList.length)\" type=\"button\" class=\"dropdown-item\" @click=\"$router.back()\"><i class=\"fas fa-chevron-left\"></i> {{ $t('general.back') }}</button>\n                        <button v-else type=\"button\" class=\"dropdown-item\" @click=\"getOffline\"><i class=\"fas fa-phone-slash\"></i> {{ $t('meeting.leave_meeting') }}</button>\n\n                        <button v-if=\"entity && entity.status && entity.canModerate && entity.status==='live'\" type=\"button\" class=\"dropdown-item\" @click=\"endMeeting\"><i class=\"fas fa-calendar-times\"></i> {{ $t('meeting.end_meeting') }}</button>\n\n                        <button type=\"button\" class=\"dropdown-item\" @click=\"updateUsername\"><i class=\"fas fa-user\"></i> {{ $t('meeting.update_username') }}</button>\n\n                        <div role=\"separator\" class=\"dropdown-divider my-1\"></div>\n\n                        <button v-if=\"pageConfigs.hasAgenda\" type=\"button\" class=\"dropdown-item agenda-toggle-btn\" @click=\"toggleAgenda\"><i class=\"fas fa-quote-left\"></i> {{ $t((showAgenda ? 'global.hide' : 'global.show'), { attribute: $t('general.agenda')}) }}</button>\n\n                        <button type=\"button\" class=\"dropdown-item d-none d-md-block\" @click=\"toggleFooterAutoHide\"><i class=\"fas fa-hourglass-start\"></i> {{ $t((pageConfigs.footerAutoHide ? 'meeting.toggle_autohide_off' : 'meeting.toggle_autohide_on')) }}</button>\n\n                        <button v-if=\"uiConfigs.fullScreen\" type=\"button\" class=\"dropdown-item d-none d-md-block\" @click=\"toggleFullScreen(false)\"><i class=\"fas fa-compress\"></i> {{ $t('config.ui.toggle_fullscreen') }}</button>\n                        <button v-else type=\"button\" class=\"dropdown-item d-none d-md-block\" @click=\"toggleFullScreen(true)\"><i class=\"fas fa-expand\"></i> {{ $t('config.ui.toggle_fullscreen') }}</button>\n\n                        <div role=\"separator\" class=\"dropdown-divider d-md-none my-1\"></div>\n\n                        <button type=\"button\" class=\"dropdown-item d-md-none\" @click=\"toggleLayout('grid')\"><i class=\"fas fa-check text-light\" :class=\"{'text-dark': pageConfigs.layout === 'grid'}\"></i> {{ $t('meeting.grid_layout') }}</button>\n\n                        <button type=\"button\" class=\"dropdown-item d-md-none\" @click=\"toggleLayout('fullpage')\"><i class=\"fas fa-check text-light\" :class=\"{'text-dark': pageConfigs.layout === 'fullpage'}\"></i> {{ $t('meeting.fullpage_layout') }}</button>\n\n                        <div role=\"separator\" class=\"dropdown-divider my-1\"></div>\n\n                        <button v-if=\"pageConfigs.showDeviceConfig\" type=\"button\" class=\"dropdown-item show-devices-btn\" @click=\"toggleDevicesModal\"><i class=\"fas fa-cogs\"></i> {{ $t('meeting.media_devices.setup') }}</button>\n\n                        <button v-if=\"pageConfigs.enableLinkSharing && pageConfigs.pamEnableLinkSharingForGuest\" type=\"button\" class=\"dropdown-item\" @click=\"shareURL\"><i class=\"fas fa-share-alt\"></i> {{ $t('general.share_url') }}</button>\n\n                    </base-dropdown>\n                </div>\n            </div>\n\n\n            <div :class=\"['agenda-streams-container', {'has-agenda': pageConfigs.hasAgenda || (hasVideos && pageConfigs.enableWhiteboard)}, {'agenda-visible': showAgenda || (hasVideos && showWhiteboard)}, {'has-cover-image': entity && entity.cover && hasVideos} ]\" :style=\"coverPageStyles\">\n\n                <template v-if=\"entity && !entity.isBlocked\">\n                    <template v-if=\"pageConfigs.hasAgenda\">\n                        <card shadow class=\"agenda-container\" body-classes=\"agenda-wrapper\">\n\n                            <div class=\"meeting-agenda-container\">\n                                <vue-scroll ref=\"vue-scroll-agenda\" id=\"vue-scroll-agenda\">\n                                    <template v-if=\"entity\">\n                                        <h4 class=\"meeting-title\" v-once>{{ entity.title }}</h4>\n\n                                        <div class=\"text-muted mt-3\">\n                                            <span v-once>{{ $t('meeting.props.type') }}: {{ entity.type.name }},</span>\n                                            <span v-once>{{ $t('meeting.meeting_category.category') }}: {{ entity.category.name }}</span>\n                                        </div>\n\n                                        <view-paragraph class=\"mt-3\" :label=\"$t('meeting.props.agenda')\" :value=\"entity.agenda\" />\n\n                                        <view-paragraph v-if=\"entity.description\" class=\"mt-3\" :label=\"$t('meeting.props.description')\" :value=\"entity.description\" html />\n\n                                        <view-uploads v-if=\"entity.attachments\" :class=\"['mt-3', uiConfigs.colorSchemeType]\" :label=\"$t('upload.attachments')\" :name-label=\"$t('upload.attachment')\" :value=\"entity.attachments\" download-button-classes=\"text-gray\" :url-prefix=\"`/meetings/${uuid}/downloads`\" />\n                                    </template>\n                                </vue-scroll>\n                            </div>\n\n                        </card>\n                    </template>\n\n                    <template v-if=\"hasVideos && pageConfigs.enableWhiteboard\">\n                        <card shadow class=\"whiteboard-container\" body-classes=\"whiteboard-wrapper\">\n\n                            <div class=\"meeting-whiteboard-container\">\n                                <vue-scroll ref=\"vue-scroll-whiteboard\" id=\"vue-scroll-whiteboard\">\n                                    <div id=\"whiteboard\" class=\"whiteboard\" ref=\"whiteboard\"></div>\n                                </vue-scroll>\n                            </div>\n\n                        </card>\n                    </template>\n                </template>\n\n\n                <div :class=\"['streams-container', hasVideos ? `stream-${pageConfigs.layout}-layout` : '']\">\n\n                    <div :class=\"['video-list', hasVideosClasses]\" ref=\"videoListEle\">\n\n                        <template v-if=\"hasVideos\">\n                            <template v-for=\"(item, itemIndex) in videoList\">\n                                <div :key=\"`${item.uuid}${item.id}`\" :class=\"['video-item video-card', {'maximized': item.maximized}, {'local': item.local}, {'screen': item.screen}, {'whiteboard': item.whiteboard}, {'fullscreen-item': item.id === fullScreenItemId}, {'hand-up': item.isHandUp}, {'user-speaking': item.speaking}, {'audio-muted': item.audioMuted}, {'video-muted': item.videoMuted || !item.hasVideo }, {'no-stream': !item.status}, {'disable-mirror': item.disableMirror}, {'has-full-user-avatar': pageConfigs.enableUserAvatar && pageConfigs.enableFullUserAvatar && item.extra && (item.extra.cover || item.extra.avatar) && (item.videoMuted || !item.hasVideo)}]\" @dblclick=\"changeFocus(item)\">\n                                    <div class=\"video-wrapper\">\n\n                                        <video autoplay playsinline ref=\"videos\" :muted=\"item.muted\" :id=\"item.id\" :poster=\"item.status  ? null : '/images/video/no-stream.jpg'\" :class=\"[{'no-poster': item.status && !item.videoMuted}]\"></video>\n\n                                        <div v-if=\"pageConfigs.enableUserAvatar && pageConfigs.enableFullUserAvatar && item.extra && (item.extra.cover || item.extra.avatar) && (item.videoMuted || !item.hasVideo)\" class=\"full-user-avatar\" :style=\"`background-image: url(${ item.extra.cover || item.extra.avatar })`\"></div>\n\n                                        <div class=\"caption\">\n                                            <template v-if=\"pageConfigs.enableUserAvatar && !item.local\">\n                                                <user-avatar :user=\"item.extra ? item.extra : {name: item.name}\" :size=\"40\" class=\"mr-1\" has-shadow />\n                                            </template>\n\n                                            <h6>\n                                                <span :class=\"['text-xs mr-1', {'text-success': item.status}, {'text-danger': !item.status}]\"><i class=\"fas fa-circle\"></i></span>\n\n                                                <template v-if=\"item.local\">\n                                                    {{ item.screen ? $t('meeting.your_screen') : (item.whiteboard ? $t('meeting.your_whiteboard') : $t('meeting.you')) }}\n                                                </template>\n\n                                                <template v-else>\n                                                    {{ item.screen ? `${item.name}${$t('meeting.screen')}` : (item.whiteboard ? `${item.name}${$t('meeting.whiteboard')}` : item.name) }}\n                                                </template>\n\n                                                <span v-if=\"!item.status\" class=\"bracketed text-danger\">{{ $t('meeting.left') }}</span>\n                                            </h6>\n                                        </div>\n\n                                        <div class=\"highlight-border\"></div>\n                                    </div>\n\n\n                                    <div v-if=\"!item.local\" class=\"custom-controls-wrapper\">\n                                        <div class=\"custom-controls\">\n                                            <div v-if=\"item.extra.isHost\" class=\"status-icon\" v-b-tooltip.hover.d500 :title=\"$t('meeting.host')\">\n                                                <i class=\"fas fa-user-tie text-info\"></i>\n                                            </div>\n                                            <div v-else-if=\"item.extra.canModerate\" class=\"status-icon\" v-b-tooltip.hover.d500 :title=\"$t('meeting.moderator')\">\n                                                <i class=\"fas fa-user-cog text-info\"></i>\n                                            </div>\n\n                                            <div class=\"status-icon\" v-if=\"!item.whiteboard && !item.screen && item.isHandUp\">\n                                                <i class=\"fas fa-hand-paper enabled-text\"></i>\n                                            </div>\n\n                                            <div class=\"status-icon\" v-if=\"item.audioMuted\">\n                                                <i class=\"fas fa-microphone-slash disabled-text\"></i>\n                                            </div>\n\n                                            <template v-if=\"pageConfigs.layout === 'fullpage' && !item.maximized\">\n                                                <button @click=\"toggleRemoteAudio(item, itemIndex)\" v-b-tooltip.hover.d500 :title=\"$t('meeting.mute_for_me')\" class=\"controls-btn\">\n                                                    <i :class=\"['fas', {'fa-volume-up enabled-text': item.muted}, {'fa-volume-off disabled-text': !item.muted}]\"></i>\n                                                </button>\n\n                                                <button @click=\"changeFocus(item)\" v-b-tooltip.hover.d500 :title=\"$t('meeting.maximize')\" class=\"controls-btn\">\n                                                    <i class=\"fas fa-expand enabled-text\"></i>\n                                                </button>\n\n                                                <button v-if=\"pageConfigs.enableSnapshot && (pageConfigs.anyoneCanTakeSnapshot || entity.canModerate)\" @click=\"takeSnapshotOfStream(item, itemIndex)\" v-b-tooltip.hover.d500 :title=\"$t('meeting.take_snapshot')\" class=\"controls-btn\">\n                                                    <i class=\"fas fa-image enabled-text\"></i>\n                                                </button>\n\n                                                <template v-if=\"entity.canModerate\">\n                                                    <button @click=\"kickRemoteUser(item, itemIndex)\" v-b-tooltip.hover.d500 :title=\"$t('meeting.kick_ban_participant')\" class=\"controls-btn\">\n                                                        <i class=\"fas fa-ban enabled-text\"></i>\n                                                    </button>\n\n                                                    <button @click=\"toggleRemoteAudioSource(item, itemIndex)\" v-b-tooltip.hover.d500 :title=\"$t('meeting.mute_for_everyone')\" class=\"controls-btn\">\n                                                        <i :class=\"['fas', {'fa-microphone enabled-text': item.audioMuted}, {'fa-microphone-slash disabled-text': !item.audioMuted}]\"></i>\n                                                    </button>\n                                                </template>\n                                            </template>\n\n                                            <base-dropdown v-else tag=\"div\" class=\"custom-control-dropdown\" position=\"right\">\n                                                <button slot=\"title\" type=\"button\" class=\"btn action custom-control-dropdown-btn btn-sm\"><i class=\"fas fa-ellipsis-v\"></i></button>\n\n\n                                                <button type=\"button\" class=\"dropdown-item btn-sm\" @click=\"disableMirror(item, itemIndex)\">\n                                                    <i class=\"fas fa-exchange-alt enabled-text\"></i> {{ $t('meeting.mirror_flip') }}\n                                                </button>\n\n                                                <button v-if=\"pageConfigs.layout === 'fullpage' && !item.maximized\" type=\"button\" class=\"dropdown-item btn-sm\" @click=\"changeFocus(item)\">\n                                                    <i class=\"fas fa-expand enabled-text\"></i> {{ $t('meeting.maximize') }}\n                                                </button>\n\n                                                <button type=\"button\" class=\"dropdown-item btn-sm\" @click=\"toggleRemoteAudio(item, itemIndex)\">\n                                                    <template v-if=\"item.muted\">\n                                                        <i class=\"fas fa-volume-up enabled-text\"></i> {{ $t('meeting.unmute_for_me') }}\n                                                    </template>\n                                                    <template v-else>\n                                                        <i class=\"fas fa-volume-off disabled-text\"></i> {{ $t('meeting.mute_for_me') }}\n                                                    </template>\n                                                </button>\n\n                                                <button v-if=\"pageConfigs.enableSnapshot && (pageConfigs.anyoneCanTakeSnapshot || entity.canModerate)\" type=\"button\" class=\"dropdown-item btn-sm\" @click=\"takeSnapshotOfStream(item, itemIndex)\">\n                                                    <i class=\"fas fa-image enabled-text\"></i> {{ $t('meeting.take_snapshot') }}\n                                                </button>\n                                            </base-dropdown>\n                                        </div>\n                                    </div>\n\n                                    <div v-else-if=\"item.local && !item.whiteboard && !item.screen && item.isHandUp\" class=\"custom-controls-wrapper\">\n                                        <div class=\"custom-controls\">\n                                            <div class=\"status-icon\">\n                                                <i class=\"fas fa-hand-paper enabled-text\"></i>\n                                            </div>\n                                        </div>\n                                    </div>\n\n                                </div>\n                            </template>\n                        </template>\n\n\n                        <card v-else shadow class=\"video-item wait-box maximized\">\n                            <template v-if=\"entity && !entity.isBlocked\">\n\n                                <template v-if=\"entity.status === 'scheduled' || entity.status === 'live'\">\n                                    <div class=\"green-room text-center mt-3\">\n                                        <video autoplay playsinline ref=\"greenRoomVideo\" muted id=\"greenRoomVideo\"></video>\n                                        <br>\n                                        <canvas id=\"greenRoomAudio\" ref=\"greenRoomAudio\" width=\"250\" height=\"15\" :data-val=\"micVolumeActivity\" style=\"margin: 0 auto;\">No canvas</canvas>\n                                    </div>\n                                </template>\n\n                                <template v-if=\"entity.status === 'scheduled'\">\n\n                                    <flip-countdown class=\"my-3\" v-if=\"startDateTimeIsFuture\" :deadline=\"entity.startDateTime\" />\n\n                                    <template v-else>\n                                        <h5 class=\"text-muted text-center my-3\">\n                                            {{ $t('meeting.starting_any_time_now') }}\n                                        </h5>\n                                    </template>\n\n                                    <div class=\"text-center my-3\">\n                                        <span class=\"text-muted\">{{ $t('meeting.scheduled_for') }}</span><span class=\"text-muted-lg m-l-5\" v-b-tooltip.hover.d500 :title=\"entity.startDateTime | momentDateTime\">{{ entity.startDateTime | momentCalendar({ sameElse: vars.defaultDateTimeFormat }) }}</span>\n                                    </div>\n\n                                    <div v-if=\"liveMembersCount > 0\" class=\"text-muted text-center my-3\">\n                                        <span class=\"text-xs text-success mr-1\"><i class=\"fas fa-circle\"></i></span>\n                                        <animated-number :number=\"liveMembersCount\" :delay=\"100\" />\n                                        <span v-if=\"liveMembersCount>1\">{{ $t('meeting.members_online') }}</span>\n                                        <span v-else>{{ $t('meeting.member_online') }}</span>\n                                    </div>\n                                </template>\n\n\n                                <template v-else-if=\"entity.status === 'live'\">\n                                    <template v-if=\"roomIdAlive\">\n                                        <h5 class=\"text-muted text-center my-3\">\n                                            {{ $t('meeting.is_live_now') }}\n                                        </h5>\n\n                                        <div class=\"d-flex justify-content-center my-3\">\n                                            <base-button type=\"button\" design=\"primary\" size=\"lg\" @click=\"getOnline\">{{ $t('global.click_to', { attribute: $t('meeting.get_live') }) }}</base-button>\n                                        </div>\n                                    </template>\n\n                                    <template v-else>\n                                        <h5 class=\"text-muted text-center my-3\">\n                                            {{ $t('meeting.starting_any_time_now') }}\n                                        </h5>\n                                    </template>\n\n                                    <div v-if=\"liveMembersCount > 0\" class=\"text-muted text-center my-3\">\n                                        <span class=\"text-xs text-success mr-1\"><i class=\"fas fa-circle\"></i></span>\n                                        <animated-number :number=\"liveMembersCount\" :delay=\"100\" />\n                                        <span v-if=\"liveMembersCount>1\">{{ $t('meeting.members_online') }}</span>\n                                        <span v-else>{{ $t('meeting.member_online') }}</span>\n                                    </div>\n                                </template>\n\n\n                                <template v-else-if=\"entity.status === 'cancelled'\">\n                                    <h4 class=\"text-muted text-center my-3\">\n                                        {{ $t('meeting.meeting_cancelled') }}\n                                    </h4>\n\n                                    <div class=\"d-flex justify-content-center\">\n                                        <base-button type=\"button\" design=\"light\" size=\"lg\" @click=\"$router.back()\">{{ $t('global.click_to', { attribute: $t('general.go_back') }) }}</base-button>\n                                    </div>\n                                </template>\n\n                                <template v-else-if=\"entity.status === 'ended'\">\n                                    <h4 class=\"text-muted text-center my-3\">\n                                        {{ $t('meeting.meeting_ended') }}\n                                    </h4>\n\n                                    <div class=\"d-flex justify-content-center\">\n                                        <base-button type=\"button\" design=\"light\" size=\"lg\" @click=\"$router.back()\">{{ $t('global.click_to', { attribute: $t('general.go_back') }) }}</base-button>\n                                    </div>\n                                </template>\n\n                            </template>\n\n                            <template v-else>\n                                <h3 v-if=\"entity\" class=\"text-center text-danger my-3\">\n                                    {{ $t('meeting.not_allowed') }}\n                                </h3>\n                            </template>\n                        </card>\n\n\n                    </div>\n\n                </div>\n            </div>\n\n\n            <b-modal size=\"md\" centered lazy :busy=\"isLoading\" id=\"devicesModal\" v-model=\"showDevicesModal\" no-close-on-backdrop no-close-on-esc @ok=\"onDevicesModalOK\" @cancel=\"onDevicesModalCancel\">\n                <template slot=\"modal-header\">\n                    <h5 class=\"modal-title\">{{ $t('meeting.media_devices.video_and_audio_devices') }}</h5>\n                </template>\n                <div>\n                    <base-select :options=\"mediaDevices.audioInput\" v-model=\"mediaConfigFormData.selectedAudioInput\" :label=\"$t('meeting.media_devices.audio_input')\" :allow-empty=\"false\" preselect-first />\n\n                    <base-select :options=\"mediaDevices.videoInput\" v-model=\"mediaConfigFormData.selectedVideoInput\" :label=\"$t('meeting.media_devices.video_input')\" :allow-empty=\"false\" preselect-first />\n\n                    <div class=\"row\">\n                        <div class=\"col-12 col-md-4\">\n                            <base-select :options=\"mediaDevices.resolutions\" v-model=\"mediaConfigFormData.selectedResolution\" :label=\"$t('meeting.media_devices.video_resolution')\" :allow-empty=\"false\" preselect-first simple track-by=\"label\" show-by=\"label\" />\n                        </div>\n                        <div class=\"col-12 col-md-4\">\n                            <base-select :options=\"mediaDevices.frameRates\" v-model=\"mediaConfigFormData.frameRate\" :label=\"$t('meeting.media_devices.frame_rate')\" :allow-empty=\"false\" preselect-first simple track-by=\"uuid\" show-by=\"label\" />\n                        </div>\n                        <div class=\"col-12 col-md-4\">\n                            <base-select :options=\"mediaDevices.facingModes\" v-model=\"mediaConfigFormData.facingMode\" :label=\"$t('meeting.media_devices.facing_mode')\" :allow-empty=\"false\" preselect-first simple track-by=\"uuid\" show-by=\"label\" />\n                        </div>\n\n                        <div class=\"col-12\"><h6 class=\"mt-2 pb-1\">{{ $t('meeting.media_devices.bandwidth') }}</h6></div>\n\n                        <div class=\"col-12 col-sm-4\">\n                            <base-select :options=\"audioBandwidthOpts\" v-model=\"mediaConfigFormData.bandwidth.audio\" :label=\"$t('meeting.media_devices.audio')\" :allow-empty=\"false\" preselect-first simple track-by=\"uuid\" show-by=\"label\" />\n                        </div>\n\n                        <div class=\"col-12 col-sm-4\">\n                            <base-select :options=\"videoBandwidthOpts\" v-model=\"mediaConfigFormData.bandwidth.video\" :label=\"$t('meeting.media_devices.video')\" :allow-empty=\"false\" preselect-first simple track-by=\"uuid\" show-by=\"label\" />\n                        </div>\n\n                        <div class=\"col-12 col-sm-4\">\n                            <base-select :options=\"screenBandwidthOpts\" v-model=\"mediaConfigFormData.bandwidth.screen\" :label=\"$t('meeting.media_devices.screen')\" :allow-empty=\"false\" preselect-first simple track-by=\"uuid\" show-by=\"label\" />\n                        </div>\n                    </div>\n                </div>\n            </b-modal>\n\n        </template>\n\n        <card v-else shadow class=\"duplicate-tab d-flex justify-content-center align-items-center min-height-90vh\">\n            <h2>{{ $t('meeting.duplicate_tab') }}</h2>\n        </card>\n    </base-container>\n</template>\n\n<script>\n    import meeting from '@mixins/meeting-for-guest'\n    import live from '@mixins/live-for-guest'\n\n    import AppLogo from '@components/AppLogo'\n    import AnimatedNumber from '@core/components/AnimatedNumber'\n    import FlipCountdown from 'vue2-flip-countdown'\n\n    export default {\n        mixins: [live, meeting],\n        components: {\n            AppLogo,\n            AnimatedNumber,\n            FlipCountdown,\n        },\n        watch: {\n            locked(newVal, oldVal) {\n                if(newVal) {\n                    const toPath = this.$route.fullPath\n                    this.$router.push({ name: 'authLock', query: { ref: toPath } })\n                }\n            },\n        },\n        methods: {\n        },\n        mounted() {\n        },\n    }\n</script>\n","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"base-container\",\n    {\n      class: [\n        \"meeting-page\",\n        { \"auto-hide-footer\": _vm.pageConfigs.footerAutoHide && _vm.hasVideos },\n        { pulse: _vm.recording },\n        {\n          \"mirrored-video\":\n            _vm.configs.meeting && _vm.configs.meeting.mirroredVideo\n        }\n      ],\n      attrs: {\n        \"with-loader\": \"\",\n        \"is-loading\": _vm.isLoading,\n        \"loader-color\": _vm.vars.loaderColor,\n        \"overlay-color\": _vm.uiConfigs.pageColorSchemeType,\n        \"loader-size\": \"screen\",\n        \"data-page-background-color\": _vm.uiConfigs.pageBackgroundColor,\n        \"data-card-background-color\": _vm.uiConfigs.pageContainerBackgroundColor\n      }\n    },\n    [\n      !_vm.duplicateTab\n        ? [\n            _c(\n              \"div\",\n              {\n                class: [\"meeting-footer\", { \"has-videos\": _vm.hasVideos }],\n                attrs: {\n                  \"data-footer-background-color\": _vm.uiConfigs.leftSidebarColor\n                }\n              },\n              [\n                _c(\n                  \"div\",\n                  { staticClass: \"logo-wrapper\" },\n                  [\n                    _c(\"app-logo\", {\n                      attrs: { place: \"sidebar\", size: \"sm\", tag: \"span\" }\n                    })\n                  ],\n                  1\n                ),\n                _vm._v(\" \"),\n                _vm.entity && _vm.entity.status\n                  ? _c(\n                      \"div\",\n                      { staticClass: \"meeting-actions meeting-actions-center\" },\n                      [\n                        _vm.pageConfigs.showEnableAudioBtn\n                          ? [\n                              _vm.pageConfigs.enableAudio\n                                ? _c(\n                                    \"button\",\n                                    {\n                                      directives: [\n                                        {\n                                          name: \"b-tooltip\",\n                                          rawName: \"v-b-tooltip.hover.d500\",\n                                          modifiers: { hover: true, d500: true }\n                                        }\n                                      ],\n                                      staticClass: \"btn action\",\n                                      attrs: {\n                                        type: \"button\",\n                                        title: _vm.$t(\"meeting.mute_audio\")\n                                      },\n                                      on: { click: _vm.toggleAudio }\n                                    },\n                                    [\n                                      _c(\"i\", {\n                                        staticClass: \"fas fa-microphone\"\n                                      })\n                                    ]\n                                  )\n                                : _c(\n                                    \"button\",\n                                    {\n                                      directives: [\n                                        {\n                                          name: \"b-tooltip\",\n                                          rawName: \"v-b-tooltip.hover.d500\",\n                                          modifiers: { hover: true, d500: true }\n                                        }\n                                      ],\n                                      staticClass: \"btn action disabled-text\",\n                                      attrs: {\n                                        type: \"button\",\n                                        title: _vm.$t(\"meeting.unmute_audio\")\n                                      },\n                                      on: { click: _vm.toggleAudio }\n                                    },\n                                    [\n                                      _c(\"i\", {\n                                        staticClass: \"fas fa-microphone-slash\"\n                                      })\n                                    ]\n                                  )\n                            ]\n                          : _vm._e(),\n                        _vm._v(\" \"),\n                        _vm.pageConfigs.showEnableVideoBtn\n                          ? [\n                              _vm.pageConfigs.enableVideo\n                                ? _c(\n                                    \"button\",\n                                    {\n                                      directives: [\n                                        {\n                                          name: \"b-tooltip\",\n                                          rawName: \"v-b-tooltip.hover.d500\",\n                                          modifiers: { hover: true, d500: true }\n                                        }\n                                      ],\n                                      staticClass: \"btn action\",\n                                      attrs: {\n                                        type: \"button\",\n                                        title: _vm.$t(\"meeting.mute_video\")\n                                      },\n                                      on: { click: _vm.toggleVideo }\n                                    },\n                                    [_c(\"i\", { staticClass: \"fas fa-video\" })]\n                                  )\n                                : _c(\n                                    \"button\",\n                                    {\n                                      directives: [\n                                        {\n                                          name: \"b-tooltip\",\n                                          rawName: \"v-b-tooltip.hover.d500\",\n                                          modifiers: { hover: true, d500: true }\n                                        }\n                                      ],\n                                      staticClass: \"btn action disabled-text\",\n                                      attrs: {\n                                        type: \"button\",\n                                        title: _vm.$t(\"meeting.unmute_video\")\n                                      },\n                                      on: { click: _vm.toggleVideo }\n                                    },\n                                    [\n                                      _c(\"i\", {\n                                        staticClass: \"fas fa-video-slash\"\n                                      })\n                                    ]\n                                  )\n                            ]\n                          : _vm._e(),\n                        _vm._v(\" \"),\n                        _vm.pageConfigs.showDeviceConfig\n                          ? _c(\n                              \"button\",\n                              {\n                                directives: [\n                                  {\n                                    name: \"b-tooltip\",\n                                    rawName: \"v-b-tooltip.hover.d500\",\n                                    modifiers: { hover: true, d500: true }\n                                  }\n                                ],\n                                staticClass:\n                                  \"btn action d-sm-none d-md-inline-block\",\n                                attrs: {\n                                  type: \"button\",\n                                  title: _vm.$t(\"meeting.media_devices.setup\")\n                                },\n                                on: { click: _vm.toggleDevicesModal }\n                              },\n                              [_c(\"i\", { staticClass: \"fas fa-cogs\" })]\n                            )\n                          : _vm._e(),\n                        _vm._v(\" \"),\n                        _vm.videoList.length\n                          ? [\n                              _c(\n                                \"button\",\n                                {\n                                  directives: [\n                                    {\n                                      name: \"b-tooltip\",\n                                      rawName: \"v-b-tooltip.hover.d500\",\n                                      modifiers: { hover: true, d500: true }\n                                    }\n                                  ],\n                                  staticClass: \"btn action danger-text\",\n                                  attrs: {\n                                    type: \"button\",\n                                    title: _vm.$t(\"meeting.leave_meeting\")\n                                  },\n                                  on: { click: _vm.getOffline }\n                                },\n                                [_c(\"i\", { staticClass: \"fas fa-phone-slash\" })]\n                              ),\n                              _vm._v(\" \"),\n                              _vm.pageConfigs.enableScreenSharing &&\n                              _vm.pageConfigs.pamEnableScreenSharingForGuest\n                                ? [\n                                    _vm.localScreenStreamid\n                                      ? _c(\n                                          \"button\",\n                                          {\n                                            directives: [\n                                              {\n                                                name: \"b-tooltip\",\n                                                rawName:\n                                                  \"v-b-tooltip.hover.d500\",\n                                                modifiers: {\n                                                  hover: true,\n                                                  d500: true\n                                                }\n                                              }\n                                            ],\n                                            staticClass:\n                                              \"btn action disabled-text d-none d-lg-inline-block\",\n                                            attrs: {\n                                              type: \"button\",\n                                              title: _vm.$t(\n                                                \"meeting.stop_sharing_screen\"\n                                              )\n                                            },\n                                            on: { click: _vm.stopSharingScreen }\n                                          },\n                                          [\n                                            _c(\"i\", {\n                                              staticClass: \"fas fa-minus-square\"\n                                            })\n                                          ]\n                                        )\n                                      : _c(\n                                          \"button\",\n                                          {\n                                            directives: [\n                                              {\n                                                name: \"b-tooltip\",\n                                                rawName:\n                                                  \"v-b-tooltip.hover.d500\",\n                                                modifiers: {\n                                                  hover: true,\n                                                  d500: true\n                                                }\n                                              }\n                                            ],\n                                            staticClass:\n                                              \"btn action d-none d-lg-inline-block\",\n                                            attrs: {\n                                              type: \"button\",\n                                              title: _vm.$t(\n                                                \"meeting.share_screen\"\n                                              )\n                                            },\n                                            on: { click: _vm.shareScreen }\n                                          },\n                                          [\n                                            _c(\"i\", {\n                                              staticClass: \"fas fa-desktop\"\n                                            })\n                                          ]\n                                        )\n                                  ]\n                                : _vm._e(),\n                              _vm._v(\" \"),\n                              _vm.pageConfigs.enableWhiteboard &&\n                              _vm.pageConfigs.pamEnableWhiteboardForGuest\n                                ? [\n                                    _vm.showWhiteboard\n                                      ? _c(\n                                          \"button\",\n                                          {\n                                            directives: [\n                                              {\n                                                name: \"b-tooltip\",\n                                                rawName:\n                                                  \"v-b-tooltip.hover.d500\",\n                                                modifiers: {\n                                                  hover: true,\n                                                  d500: true\n                                                }\n                                              }\n                                            ],\n                                            staticClass:\n                                              \"btn action danger-text d-none d-md-inline-block\",\n                                            attrs: {\n                                              type: \"button\",\n                                              title: _vm.$t(\n                                                \"meeting.hide_whiteboard\"\n                                              )\n                                            },\n                                            on: { click: _vm.toggleWhiteboard }\n                                          },\n                                          [\n                                            _c(\"i\", {\n                                              staticClass:\n                                                \"fas fa-chalkboard-teacher\"\n                                            })\n                                          ]\n                                        )\n                                      : _vm._e(),\n                                    _vm._v(\" \"),\n                                    _vm.showWhiteboard\n                                      ? _c(\n                                          \"button\",\n                                          {\n                                            directives: [\n                                              {\n                                                name: \"b-tooltip\",\n                                                rawName:\n                                                  \"v-b-tooltip.hover.d500\",\n                                                modifiers: {\n                                                  hover: true,\n                                                  d500: true\n                                                }\n                                              }\n                                            ],\n                                            staticClass:\n                                              \"btn action danger-text d-none d-md-inline-block\",\n                                            attrs: {\n                                              type: \"button\",\n                                              title: _vm.$t(\n                                                \"meeting.clear_hide_whiteboard\"\n                                              )\n                                            },\n                                            on: {\n                                              click:\n                                                _vm.hideAndDestroyWhiteboard\n                                            }\n                                          },\n                                          [\n                                            _c(\"i\", {\n                                              staticClass:\n                                                \"fas fa-chalkboard-teacher mr-0\"\n                                            }),\n                                            _c(\"i\", {\n                                              staticClass:\n                                                \"fas fa-times font-size-xs ml-1 font-size-xs text-danger\"\n                                            })\n                                          ]\n                                        )\n                                      : _c(\n                                          \"button\",\n                                          {\n                                            directives: [\n                                              {\n                                                name: \"b-tooltip\",\n                                                rawName:\n                                                  \"v-b-tooltip.hover.d500\",\n                                                modifiers: {\n                                                  hover: true,\n                                                  d500: true\n                                                }\n                                              }\n                                            ],\n                                            staticClass:\n                                              \"btn action d-none d-md-inline-block\",\n                                            attrs: {\n                                              type: \"button\",\n                                              title: _vm.$t(\n                                                \"meeting.show_whiteboard\"\n                                              )\n                                            },\n                                            on: { click: _vm.toggleWhiteboard }\n                                          },\n                                          [\n                                            _c(\"i\", {\n                                              staticClass:\n                                                \"fas fa-chalkboard-teacher\"\n                                            })\n                                          ]\n                                        )\n                                  ]\n                                : _vm._e(),\n                              _vm._v(\" \"),\n                              _vm.pageConfigs.enableHandGesture\n                                ? [\n                                    _vm.isHandUp\n                                      ? _c(\n                                          \"button\",\n                                          {\n                                            directives: [\n                                              {\n                                                name: \"b-tooltip\",\n                                                rawName:\n                                                  \"v-b-tooltip.hover.d500\",\n                                                modifiers: {\n                                                  hover: true,\n                                                  d500: true\n                                                }\n                                              }\n                                            ],\n                                            staticClass:\n                                              \"btn action success-text\",\n                                            attrs: {\n                                              type: \"button\",\n                                              title: _vm.$t(\n                                                \"meeting.lower_hand\"\n                                              )\n                                            },\n                                            on: { click: _vm.toggleHandUp }\n                                          },\n                                          [\n                                            _c(\"i\", {\n                                              staticClass: \"far fa-hand-paper\"\n                                            })\n                                          ]\n                                        )\n                                      : _c(\n                                          \"button\",\n                                          {\n                                            directives: [\n                                              {\n                                                name: \"b-tooltip\",\n                                                rawName:\n                                                  \"v-b-tooltip.hover.d500\",\n                                                modifiers: {\n                                                  hover: true,\n                                                  d500: true\n                                                }\n                                              }\n                                            ],\n                                            staticClass: \"btn action\",\n                                            attrs: {\n                                              type: \"button\",\n                                              title: _vm.$t(\n                                                \"meeting.raise_hand\"\n                                              )\n                                            },\n                                            on: { click: _vm.toggleHandUp }\n                                          },\n                                          [\n                                            _c(\"i\", {\n                                              staticClass: \"fas fa-hand-paper\"\n                                            })\n                                          ]\n                                        )\n                                  ]\n                                : _vm._e()\n                            ]\n                          : _vm._e()\n                      ],\n                      2\n                    )\n                  : _vm._e(),\n                _vm._v(\" \"),\n                _c(\n                  \"div\",\n                  { staticClass: \"meeting-actions meeting-actions-right\" },\n                  [\n                    _vm.entity\n                      ? [\n                          _vm.entity.status &&\n                          _vm.videoList.length &&\n                          !(\n                            _vm.pageConfigs.enableWhiteboard &&\n                            _vm.showWhiteboard\n                          )\n                            ? _c(\n                                \"base-dropdown\",\n                                {\n                                  staticClass:\n                                    \"more-actions d-none d-md-inline-block\",\n                                  attrs: {\n                                    tag: \"div\",\n                                    direction: \"up\",\n                                    \"menu-classes\": \"show-dropdown-up\",\n                                    position: \"right\"\n                                  }\n                                },\n                                [\n                                  _c(\n                                    \"button\",\n                                    {\n                                      directives: [\n                                        {\n                                          name: \"b-tooltip\",\n                                          rawName: \"v-b-tooltip.hover.d500\",\n                                          modifiers: { hover: true, d500: true }\n                                        }\n                                      ],\n                                      staticClass:\n                                        \"btn action grid-toggle-btn d-none d-md-inline-block\",\n                                      attrs: {\n                                        slot: \"title\",\n                                        type: \"button\",\n                                        title: _vm.$t(\"meeting.change_layout\")\n                                      },\n                                      slot: \"title\"\n                                    },\n                                    [\n                                      _c(\"i\", {\n                                        staticClass: \"fas fa-th-large\"\n                                      })\n                                    ]\n                                  ),\n                                  _vm._v(\" \"),\n                                  _c(\n                                    \"button\",\n                                    {\n                                      staticClass:\n                                        \"dropdown-item d-flex justify-content-between align-items-center\",\n                                      attrs: { type: \"button\" },\n                                      on: {\n                                        click: function($event) {\n                                          return _vm.toggleLayout(\"grid\")\n                                        }\n                                      }\n                                    },\n                                    [\n                                      _vm._v(\n                                        _vm._s(_vm.$t(\"meeting.grid_layout\")) +\n                                          \" \"\n                                      ),\n                                      _c(\"i\", {\n                                        staticClass:\n                                          \"fas fa-check min-width-auto text-light\",\n                                        class: {\n                                          \"text-dark\":\n                                            _vm.pageConfigs.layout === \"grid\"\n                                        }\n                                      })\n                                    ]\n                                  ),\n                                  _vm._v(\" \"),\n                                  _c(\n                                    \"button\",\n                                    {\n                                      staticClass:\n                                        \"dropdown-item d-flex justify-content-between align-items-center\",\n                                      attrs: { type: \"button\" },\n                                      on: {\n                                        click: function($event) {\n                                          return _vm.toggleLayout(\"gallery\")\n                                        }\n                                      }\n                                    },\n                                    [\n                                      _vm._v(\n                                        _vm._s(\n                                          _vm.$t(\"meeting.gallery_layout\")\n                                        ) + \" \"\n                                      ),\n                                      _c(\"i\", {\n                                        staticClass:\n                                          \"fas fa-check min-width-auto text-light\",\n                                        class: {\n                                          \"text-dark\":\n                                            _vm.pageConfigs.layout === \"gallery\"\n                                        }\n                                      })\n                                    ]\n                                  ),\n                                  _vm._v(\" \"),\n                                  _vm.pageConfigs.hasAgenda ||\n                                  (_vm.pageConfigs.enableWhiteboard &&\n                                    _vm.showWhiteboard)\n                                    ? _c(\n                                        \"button\",\n                                        {\n                                          staticClass:\n                                            \"dropdown-item d-flex justify-content-between align-items-center\",\n                                          attrs: { type: \"button\" },\n                                          on: {\n                                            click: function($event) {\n                                              return _vm.toggleLayout(\n                                                \"presentation\"\n                                              )\n                                            }\n                                          }\n                                        },\n                                        [\n                                          _vm._v(\n                                            _vm._s(\n                                              _vm.$t(\n                                                \"meeting.presentation_layout\"\n                                              )\n                                            ) + \" \"\n                                          ),\n                                          _c(\"i\", {\n                                            staticClass:\n                                              \"fas fa-check min-width-auto text-light\",\n                                            class: {\n                                              \"text-dark\":\n                                                _vm.pageConfigs.layout ===\n                                                \"presentation\"\n                                            }\n                                          })\n                                        ]\n                                      )\n                                    : _vm._e(),\n                                  _vm._v(\" \"),\n                                  _c(\n                                    \"button\",\n                                    {\n                                      staticClass:\n                                        \"dropdown-item d-flex justify-content-between align-items-center\",\n                                      attrs: { type: \"button\" },\n                                      on: {\n                                        click: function($event) {\n                                          return _vm.toggleLayout(\"fullpage\")\n                                        }\n                                      }\n                                    },\n                                    [\n                                      _vm._v(\n                                        _vm._s(\n                                          _vm.$t(\"meeting.fullpage_layout\")\n                                        ) + \" \"\n                                      ),\n                                      _vm.pageConfigs.layout === \"fullpage\"\n                                        ? _c(\"i\", {\n                                            staticClass:\n                                              \"fas fa-check min-width-auto text-light\",\n                                            class: {\n                                              \"text-dark\":\n                                                _vm.pageConfigs.layout ===\n                                                \"fullpage\"\n                                            }\n                                          })\n                                        : _vm._e()\n                                    ]\n                                  )\n                                ]\n                              )\n                            : _vm._e(),\n                          _vm._v(\" \"),\n                          _vm.pageConfigs.enableChat &&\n                          _vm.configs.chat &&\n                          _vm.configs.chat.enabled &&\n                          _vm.subscriptions &&\n                          _vm.subscriptions.userPrivate &&\n                          !_vm.entity.isBlocked\n                            ? _c(\n                                \"button\",\n                                {\n                                  directives: [\n                                    {\n                                      name: \"b-tooltip\",\n                                      rawName: \"v-b-tooltip.hover.d500\",\n                                      modifiers: { hover: true, d500: true }\n                                    }\n                                  ],\n                                  class: [\n                                    \"btn action chats-toggle-btn\",\n                                    {\n                                      pulse:\n                                        _vm.totalUnreadMessages &&\n                                        _vm.totalUnreadMessages > 0 &&\n                                        !_vm.isChatBoxShown\n                                    }\n                                  ],\n                                  attrs: {\n                                    type: \"button\",\n                                    title: _vm.$t(\n                                      _vm.isChatBoxShown\n                                        ? \"global.hide\"\n                                        : \"global.show\",\n                                      { attribute: _vm.$t(\"chat.chats\") }\n                                    )\n                                  },\n                                  on: { click: _vm.toggleChatBox }\n                                },\n                                [\n                                  _c(\"i\", {\n                                    class: [\n                                      _vm.isChatBoxShown\n                                        ? \"fas fa-comment-slash\"\n                                        : \"far fa-comment\"\n                                    ]\n                                  }),\n                                  _vm._v(\" \"),\n                                  _vm.totalUnreadMessages &&\n                                  _vm.totalUnreadMessages > 0\n                                    ? _c(\n                                        \"span\",\n                                        {\n                                          staticClass:\n                                            \"text-success unread-count\"\n                                        },\n                                        [\n                                          _vm._v(\n                                            _vm._s(_vm.totalUnreadMessages)\n                                          )\n                                        ]\n                                      )\n                                    : _vm._e()\n                                ]\n                              )\n                            : _vm._e()\n                        ]\n                      : _vm._e(),\n                    _vm._v(\" \"),\n                    _c(\n                      \"base-dropdown\",\n                      {\n                        staticClass: \"more-actions\",\n                        attrs: {\n                          tag: \"div\",\n                          direction: \"up\",\n                          \"menu-classes\": \"show-dropdown-up\",\n                          position: \"right\"\n                        }\n                      },\n                      [\n                        _c(\n                          \"button\",\n                          {\n                            staticClass: \"btn action more-actions-btn\",\n                            attrs: { slot: \"title\", type: \"button\" },\n                            slot: \"title\"\n                          },\n                          [_c(\"i\", { staticClass: \"fas fa-ellipsis-v\" })]\n                        ),\n                        _vm._v(\" \"),\n                        !(\n                          _vm.entity &&\n                          _vm.entity.status &&\n                          _vm.videoList.length\n                        )\n                          ? _c(\n                              \"button\",\n                              {\n                                staticClass: \"dropdown-item\",\n                                attrs: { type: \"button\" },\n                                on: {\n                                  click: function($event) {\n                                    return _vm.$router.back()\n                                  }\n                                }\n                              },\n                              [\n                                _c(\"i\", { staticClass: \"fas fa-chevron-left\" }),\n                                _vm._v(\" \" + _vm._s(_vm.$t(\"general.back\")))\n                              ]\n                            )\n                          : _c(\n                              \"button\",\n                              {\n                                staticClass: \"dropdown-item\",\n                                attrs: { type: \"button\" },\n                                on: { click: _vm.getOffline }\n                              },\n                              [\n                                _c(\"i\", { staticClass: \"fas fa-phone-slash\" }),\n                                _vm._v(\n                                  \" \" + _vm._s(_vm.$t(\"meeting.leave_meeting\"))\n                                )\n                              ]\n                            ),\n                        _vm._v(\" \"),\n                        _vm.entity &&\n                        _vm.entity.status &&\n                        _vm.entity.canModerate &&\n                        _vm.entity.status === \"live\"\n                          ? _c(\n                              \"button\",\n                              {\n                                staticClass: \"dropdown-item\",\n                                attrs: { type: \"button\" },\n                                on: { click: _vm.endMeeting }\n                              },\n                              [\n                                _c(\"i\", {\n                                  staticClass: \"fas fa-calendar-times\"\n                                }),\n                                _vm._v(\n                                  \" \" + _vm._s(_vm.$t(\"meeting.end_meeting\"))\n                                )\n                              ]\n                            )\n                          : _vm._e(),\n                        _vm._v(\" \"),\n                        _c(\n                          \"button\",\n                          {\n                            staticClass: \"dropdown-item\",\n                            attrs: { type: \"button\" },\n                            on: { click: _vm.updateUsername }\n                          },\n                          [\n                            _c(\"i\", { staticClass: \"fas fa-user\" }),\n                            _vm._v(\n                              \" \" + _vm._s(_vm.$t(\"meeting.update_username\"))\n                            )\n                          ]\n                        ),\n                        _vm._v(\" \"),\n                        _c(\"div\", {\n                          staticClass: \"dropdown-divider my-1\",\n                          attrs: { role: \"separator\" }\n                        }),\n                        _vm._v(\" \"),\n                        _vm.pageConfigs.hasAgenda\n                          ? _c(\n                              \"button\",\n                              {\n                                staticClass: \"dropdown-item agenda-toggle-btn\",\n                                attrs: { type: \"button\" },\n                                on: { click: _vm.toggleAgenda }\n                              },\n                              [\n                                _c(\"i\", { staticClass: \"fas fa-quote-left\" }),\n                                _vm._v(\n                                  \" \" +\n                                    _vm._s(\n                                      _vm.$t(\n                                        _vm.showAgenda\n                                          ? \"global.hide\"\n                                          : \"global.show\",\n                                        { attribute: _vm.$t(\"general.agenda\") }\n                                      )\n                                    )\n                                )\n                              ]\n                            )\n                          : _vm._e(),\n                        _vm._v(\" \"),\n                        _c(\n                          \"button\",\n                          {\n                            staticClass: \"dropdown-item d-none d-md-block\",\n                            attrs: { type: \"button\" },\n                            on: { click: _vm.toggleFooterAutoHide }\n                          },\n                          [\n                            _c(\"i\", { staticClass: \"fas fa-hourglass-start\" }),\n                            _vm._v(\n                              \" \" +\n                                _vm._s(\n                                  _vm.$t(\n                                    _vm.pageConfigs.footerAutoHide\n                                      ? \"meeting.toggle_autohide_off\"\n                                      : \"meeting.toggle_autohide_on\"\n                                  )\n                                )\n                            )\n                          ]\n                        ),\n                        _vm._v(\" \"),\n                        _vm.uiConfigs.fullScreen\n                          ? _c(\n                              \"button\",\n                              {\n                                staticClass: \"dropdown-item d-none d-md-block\",\n                                attrs: { type: \"button\" },\n                                on: {\n                                  click: function($event) {\n                                    return _vm.toggleFullScreen(false)\n                                  }\n                                }\n                              },\n                              [\n                                _c(\"i\", { staticClass: \"fas fa-compress\" }),\n                                _vm._v(\n                                  \" \" +\n                                    _vm._s(\n                                      _vm.$t(\"config.ui.toggle_fullscreen\")\n                                    )\n                                )\n                              ]\n                            )\n                          : _c(\n                              \"button\",\n                              {\n                                staticClass: \"dropdown-item d-none d-md-block\",\n                                attrs: { type: \"button\" },\n                                on: {\n                                  click: function($event) {\n                                    return _vm.toggleFullScreen(true)\n                                  }\n                                }\n                              },\n                              [\n                                _c(\"i\", { staticClass: \"fas fa-expand\" }),\n                                _vm._v(\n                                  \" \" +\n                                    _vm._s(\n                                      _vm.$t(\"config.ui.toggle_fullscreen\")\n                                    )\n                                )\n                              ]\n                            ),\n                        _vm._v(\" \"),\n                        _c(\"div\", {\n                          staticClass: \"dropdown-divider d-md-none my-1\",\n                          attrs: { role: \"separator\" }\n                        }),\n                        _vm._v(\" \"),\n                        _c(\n                          \"button\",\n                          {\n                            staticClass: \"dropdown-item d-md-none\",\n                            attrs: { type: \"button\" },\n                            on: {\n                              click: function($event) {\n                                return _vm.toggleLayout(\"grid\")\n                              }\n                            }\n                          },\n                          [\n                            _c(\"i\", {\n                              staticClass: \"fas fa-check text-light\",\n                              class: {\n                                \"text-dark\": _vm.pageConfigs.layout === \"grid\"\n                              }\n                            }),\n                            _vm._v(\" \" + _vm._s(_vm.$t(\"meeting.grid_layout\")))\n                          ]\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"button\",\n                          {\n                            staticClass: \"dropdown-item d-md-none\",\n                            attrs: { type: \"button\" },\n                            on: {\n                              click: function($event) {\n                                return _vm.toggleLayout(\"fullpage\")\n                              }\n                            }\n                          },\n                          [\n                            _c(\"i\", {\n                              staticClass: \"fas fa-check text-light\",\n                              class: {\n                                \"text-dark\":\n                                  _vm.pageConfigs.layout === \"fullpage\"\n                              }\n                            }),\n                            _vm._v(\n                              \" \" + _vm._s(_vm.$t(\"meeting.fullpage_layout\"))\n                            )\n                          ]\n                        ),\n                        _vm._v(\" \"),\n                        _c(\"div\", {\n                          staticClass: \"dropdown-divider my-1\",\n                          attrs: { role: \"separator\" }\n                        }),\n                        _vm._v(\" \"),\n                        _vm.pageConfigs.showDeviceConfig\n                          ? _c(\n                              \"button\",\n                              {\n                                staticClass: \"dropdown-item show-devices-btn\",\n                                attrs: { type: \"button\" },\n                                on: { click: _vm.toggleDevicesModal }\n                              },\n                              [\n                                _c(\"i\", { staticClass: \"fas fa-cogs\" }),\n                                _vm._v(\n                                  \" \" +\n                                    _vm._s(\n                                      _vm.$t(\"meeting.media_devices.setup\")\n                                    )\n                                )\n                              ]\n                            )\n                          : _vm._e(),\n                        _vm._v(\" \"),\n                        _vm.pageConfigs.enableLinkSharing &&\n                        _vm.pageConfigs.pamEnableLinkSharingForGuest\n                          ? _c(\n                              \"button\",\n                              {\n                                staticClass: \"dropdown-item\",\n                                attrs: { type: \"button\" },\n                                on: { click: _vm.shareURL }\n                              },\n                              [\n                                _c(\"i\", { staticClass: \"fas fa-share-alt\" }),\n                                _vm._v(\n                                  \" \" + _vm._s(_vm.$t(\"general.share_url\"))\n                                )\n                              ]\n                            )\n                          : _vm._e()\n                      ]\n                    )\n                  ],\n                  2\n                )\n              ]\n            ),\n            _vm._v(\" \"),\n            _c(\n              \"div\",\n              {\n                class: [\n                  \"agenda-streams-container\",\n                  {\n                    \"has-agenda\":\n                      _vm.pageConfigs.hasAgenda ||\n                      (_vm.hasVideos && _vm.pageConfigs.enableWhiteboard)\n                  },\n                  {\n                    \"agenda-visible\":\n                      _vm.showAgenda || (_vm.hasVideos && _vm.showWhiteboard)\n                  },\n                  {\n                    \"has-cover-image\":\n                      _vm.entity && _vm.entity.cover && _vm.hasVideos\n                  }\n                ],\n                style: _vm.coverPageStyles\n              },\n              [\n                _vm.entity && !_vm.entity.isBlocked\n                  ? [\n                      _vm.pageConfigs.hasAgenda\n                        ? [\n                            _c(\n                              \"card\",\n                              {\n                                staticClass: \"agenda-container\",\n                                attrs: {\n                                  shadow: \"\",\n                                  \"body-classes\": \"agenda-wrapper\"\n                                }\n                              },\n                              [\n                                _c(\n                                  \"div\",\n                                  { staticClass: \"meeting-agenda-container\" },\n                                  [\n                                    _c(\n                                      \"vue-scroll\",\n                                      {\n                                        ref: \"vue-scroll-agenda\",\n                                        attrs: { id: \"vue-scroll-agenda\" }\n                                      },\n                                      [\n                                        _vm.entity\n                                          ? [\n                                              _vm._m(0),\n                                              _vm._v(\" \"),\n                                              _c(\n                                                \"div\",\n                                                {\n                                                  staticClass: \"text-muted mt-3\"\n                                                },\n                                                [\n                                                  _vm._m(1),\n                                                  _vm._v(\" \"),\n                                                  _vm._m(2)\n                                                ]\n                                              ),\n                                              _vm._v(\" \"),\n                                              _c(\"view-paragraph\", {\n                                                staticClass: \"mt-3\",\n                                                attrs: {\n                                                  label: _vm.$t(\n                                                    \"meeting.props.agenda\"\n                                                  ),\n                                                  value: _vm.entity.agenda\n                                                }\n                                              }),\n                                              _vm._v(\" \"),\n                                              _vm.entity.description\n                                                ? _c(\"view-paragraph\", {\n                                                    staticClass: \"mt-3\",\n                                                    attrs: {\n                                                      label: _vm.$t(\n                                                        \"meeting.props.description\"\n                                                      ),\n                                                      value:\n                                                        _vm.entity.description,\n                                                      html: \"\"\n                                                    }\n                                                  })\n                                                : _vm._e(),\n                                              _vm._v(\" \"),\n                                              _vm.entity.attachments\n                                                ? _c(\"view-uploads\", {\n                                                    class: [\n                                                      \"mt-3\",\n                                                      _vm.uiConfigs\n                                                        .colorSchemeType\n                                                    ],\n                                                    attrs: {\n                                                      label: _vm.$t(\n                                                        \"upload.attachments\"\n                                                      ),\n                                                      \"name-label\": _vm.$t(\n                                                        \"upload.attachment\"\n                                                      ),\n                                                      value:\n                                                        _vm.entity.attachments,\n                                                      \"download-button-classes\":\n                                                        \"text-gray\",\n                                                      \"url-prefix\":\n                                                        \"/meetings/\" +\n                                                        _vm.uuid +\n                                                        \"/downloads\"\n                                                    }\n                                                  })\n                                                : _vm._e()\n                                            ]\n                                          : _vm._e()\n                                      ],\n                                      2\n                                    )\n                                  ],\n                                  1\n                                )\n                              ]\n                            )\n                          ]\n                        : _vm._e(),\n                      _vm._v(\" \"),\n                      _vm.hasVideos && _vm.pageConfigs.enableWhiteboard\n                        ? [\n                            _c(\n                              \"card\",\n                              {\n                                staticClass: \"whiteboard-container\",\n                                attrs: {\n                                  shadow: \"\",\n                                  \"body-classes\": \"whiteboard-wrapper\"\n                                }\n                              },\n                              [\n                                _c(\n                                  \"div\",\n                                  {\n                                    staticClass: \"meeting-whiteboard-container\"\n                                  },\n                                  [\n                                    _c(\n                                      \"vue-scroll\",\n                                      {\n                                        ref: \"vue-scroll-whiteboard\",\n                                        attrs: { id: \"vue-scroll-whiteboard\" }\n                                      },\n                                      [\n                                        _c(\"div\", {\n                                          ref: \"whiteboard\",\n                                          staticClass: \"whiteboard\",\n                                          attrs: { id: \"whiteboard\" }\n                                        })\n                                      ]\n                                    )\n                                  ],\n                                  1\n                                )\n                              ]\n                            )\n                          ]\n                        : _vm._e()\n                    ]\n                  : _vm._e(),\n                _vm._v(\" \"),\n                _c(\n                  \"div\",\n                  {\n                    class: [\n                      \"streams-container\",\n                      _vm.hasVideos\n                        ? \"stream-\" + _vm.pageConfigs.layout + \"-layout\"\n                        : \"\"\n                    ]\n                  },\n                  [\n                    _c(\n                      \"div\",\n                      {\n                        ref: \"videoListEle\",\n                        class: [\"video-list\", _vm.hasVideosClasses]\n                      },\n                      [\n                        _vm.hasVideos\n                          ? [\n                              _vm._l(_vm.videoList, function(item, itemIndex) {\n                                return [\n                                  _c(\n                                    \"div\",\n                                    {\n                                      key: \"\" + item.uuid + item.id,\n                                      class: [\n                                        \"video-item video-card\",\n                                        { maximized: item.maximized },\n                                        { local: item.local },\n                                        { screen: item.screen },\n                                        { whiteboard: item.whiteboard },\n                                        {\n                                          \"fullscreen-item\":\n                                            item.id === _vm.fullScreenItemId\n                                        },\n                                        { \"hand-up\": item.isHandUp },\n                                        { \"user-speaking\": item.speaking },\n                                        { \"audio-muted\": item.audioMuted },\n                                        {\n                                          \"video-muted\":\n                                            item.videoMuted || !item.hasVideo\n                                        },\n                                        { \"no-stream\": !item.status },\n                                        {\n                                          \"disable-mirror\": item.disableMirror\n                                        },\n                                        {\n                                          \"has-full-user-avatar\":\n                                            _vm.pageConfigs.enableUserAvatar &&\n                                            _vm.pageConfigs\n                                              .enableFullUserAvatar &&\n                                            item.extra &&\n                                            (item.extra.cover ||\n                                              item.extra.avatar) &&\n                                            (item.videoMuted || !item.hasVideo)\n                                        }\n                                      ],\n                                      on: {\n                                        dblclick: function($event) {\n                                          return _vm.changeFocus(item)\n                                        }\n                                      }\n                                    },\n                                    [\n                                      _c(\n                                        \"div\",\n                                        { staticClass: \"video-wrapper\" },\n                                        [\n                                          _c(\"video\", {\n                                            ref: \"videos\",\n                                            refInFor: true,\n                                            class: [\n                                              {\n                                                \"no-poster\":\n                                                  item.status &&\n                                                  !item.videoMuted\n                                              }\n                                            ],\n                                            attrs: {\n                                              autoplay: \"\",\n                                              playsinline: \"\",\n                                              id: item.id,\n                                              poster: item.status\n                                                ? null\n                                                : \"/images/video/no-stream.jpg\"\n                                            },\n                                            domProps: { muted: item.muted }\n                                          }),\n                                          _vm._v(\" \"),\n                                          _vm.pageConfigs.enableUserAvatar &&\n                                          _vm.pageConfigs\n                                            .enableFullUserAvatar &&\n                                          item.extra &&\n                                          (item.extra.cover ||\n                                            item.extra.avatar) &&\n                                          (item.videoMuted || !item.hasVideo)\n                                            ? _c(\"div\", {\n                                                staticClass: \"full-user-avatar\",\n                                                style:\n                                                  \"background-image: url(\" +\n                                                  (item.extra.cover ||\n                                                    item.extra.avatar) +\n                                                  \")\"\n                                              })\n                                            : _vm._e(),\n                                          _vm._v(\" \"),\n                                          _c(\n                                            \"div\",\n                                            { staticClass: \"caption\" },\n                                            [\n                                              _vm.pageConfigs\n                                                .enableUserAvatar && !item.local\n                                                ? [\n                                                    _c(\"user-avatar\", {\n                                                      staticClass: \"mr-1\",\n                                                      attrs: {\n                                                        user: item.extra\n                                                          ? item.extra\n                                                          : { name: item.name },\n                                                        size: 40,\n                                                        \"has-shadow\": \"\"\n                                                      }\n                                                    })\n                                                  ]\n                                                : _vm._e(),\n                                              _vm._v(\" \"),\n                                              _c(\n                                                \"h6\",\n                                                [\n                                                  _c(\n                                                    \"span\",\n                                                    {\n                                                      class: [\n                                                        \"text-xs mr-1\",\n                                                        {\n                                                          \"text-success\":\n                                                            item.status\n                                                        },\n                                                        {\n                                                          \"text-danger\": !item.status\n                                                        }\n                                                      ]\n                                                    },\n                                                    [\n                                                      _c(\"i\", {\n                                                        staticClass:\n                                                          \"fas fa-circle\"\n                                                      })\n                                                    ]\n                                                  ),\n                                                  _vm._v(\" \"),\n                                                  item.local\n                                                    ? [\n                                                        _vm._v(\n                                                          \"\\n                                                \" +\n                                                            _vm._s(\n                                                              item.screen\n                                                                ? _vm.$t(\n                                                                    \"meeting.your_screen\"\n                                                                  )\n                                                                : item.whiteboard\n                                                                ? _vm.$t(\n                                                                    \"meeting.your_whiteboard\"\n                                                                  )\n                                                                : _vm.$t(\n                                                                    \"meeting.you\"\n                                                                  )\n                                                            ) +\n                                                            \"\\n                                            \"\n                                                        )\n                                                      ]\n                                                    : [\n                                                        _vm._v(\n                                                          \"\\n                                                \" +\n                                                            _vm._s(\n                                                              item.screen\n                                                                ? \"\" +\n                                                                    item.name +\n                                                                    _vm.$t(\n                                                                      \"meeting.screen\"\n                                                                    )\n                                                                : item.whiteboard\n                                                                ? \"\" +\n                                                                  item.name +\n                                                                  _vm.$t(\n                                                                    \"meeting.whiteboard\"\n                                                                  )\n                                                                : item.name\n                                                            ) +\n                                                            \"\\n                                            \"\n                                                        )\n                                                      ],\n                                                  _vm._v(\" \"),\n                                                  !item.status\n                                                    ? _c(\n                                                        \"span\",\n                                                        {\n                                                          staticClass:\n                                                            \"bracketed text-danger\"\n                                                        },\n                                                        [\n                                                          _vm._v(\n                                                            _vm._s(\n                                                              _vm.$t(\n                                                                \"meeting.left\"\n                                                              )\n                                                            )\n                                                          )\n                                                        ]\n                                                      )\n                                                    : _vm._e()\n                                                ],\n                                                2\n                                              )\n                                            ],\n                                            2\n                                          ),\n                                          _vm._v(\" \"),\n                                          _c(\"div\", {\n                                            staticClass: \"highlight-border\"\n                                          })\n                                        ]\n                                      ),\n                                      _vm._v(\" \"),\n                                      !item.local\n                                        ? _c(\n                                            \"div\",\n                                            {\n                                              staticClass:\n                                                \"custom-controls-wrapper\"\n                                            },\n                                            [\n                                              _c(\n                                                \"div\",\n                                                {\n                                                  staticClass: \"custom-controls\"\n                                                },\n                                                [\n                                                  item.extra.isHost\n                                                    ? _c(\n                                                        \"div\",\n                                                        {\n                                                          directives: [\n                                                            {\n                                                              name: \"b-tooltip\",\n                                                              rawName:\n                                                                \"v-b-tooltip.hover.d500\",\n                                                              modifiers: {\n                                                                hover: true,\n                                                                d500: true\n                                                              }\n                                                            }\n                                                          ],\n                                                          staticClass:\n                                                            \"status-icon\",\n                                                          attrs: {\n                                                            title: _vm.$t(\n                                                              \"meeting.host\"\n                                                            )\n                                                          }\n                                                        },\n                                                        [\n                                                          _c(\"i\", {\n                                                            staticClass:\n                                                              \"fas fa-user-tie text-info\"\n                                                          })\n                                                        ]\n                                                      )\n                                                    : item.extra.canModerate\n                                                    ? _c(\n                                                        \"div\",\n                                                        {\n                                                          directives: [\n                                                            {\n                                                              name: \"b-tooltip\",\n                                                              rawName:\n                                                                \"v-b-tooltip.hover.d500\",\n                                                              modifiers: {\n                                                                hover: true,\n                                                                d500: true\n                                                              }\n                                                            }\n                                                          ],\n                                                          staticClass:\n                                                            \"status-icon\",\n                                                          attrs: {\n                                                            title: _vm.$t(\n                                                              \"meeting.moderator\"\n                                                            )\n                                                          }\n                                                        },\n                                                        [\n                                                          _c(\"i\", {\n                                                            staticClass:\n                                                              \"fas fa-user-cog text-info\"\n                                                          })\n                                                        ]\n                                                      )\n                                                    : _vm._e(),\n                                                  _vm._v(\" \"),\n                                                  !item.whiteboard &&\n                                                  !item.screen &&\n                                                  item.isHandUp\n                                                    ? _c(\n                                                        \"div\",\n                                                        {\n                                                          staticClass:\n                                                            \"status-icon\"\n                                                        },\n                                                        [\n                                                          _c(\"i\", {\n                                                            staticClass:\n                                                              \"fas fa-hand-paper enabled-text\"\n                                                          })\n                                                        ]\n                                                      )\n                                                    : _vm._e(),\n                                                  _vm._v(\" \"),\n                                                  item.audioMuted\n                                                    ? _c(\n                                                        \"div\",\n                                                        {\n                                                          staticClass:\n                                                            \"status-icon\"\n                                                        },\n                                                        [\n                                                          _c(\"i\", {\n                                                            staticClass:\n                                                              \"fas fa-microphone-slash disabled-text\"\n                                                          })\n                                                        ]\n                                                      )\n                                                    : _vm._e(),\n                                                  _vm._v(\" \"),\n                                                  _vm.pageConfigs.layout ===\n                                                    \"fullpage\" &&\n                                                  !item.maximized\n                                                    ? [\n                                                        _c(\n                                                          \"button\",\n                                                          {\n                                                            directives: [\n                                                              {\n                                                                name:\n                                                                  \"b-tooltip\",\n                                                                rawName:\n                                                                  \"v-b-tooltip.hover.d500\",\n                                                                modifiers: {\n                                                                  hover: true,\n                                                                  d500: true\n                                                                }\n                                                              }\n                                                            ],\n                                                            staticClass:\n                                                              \"controls-btn\",\n                                                            attrs: {\n                                                              title: _vm.$t(\n                                                                \"meeting.mute_for_me\"\n                                                              )\n                                                            },\n                                                            on: {\n                                                              click: function(\n                                                                $event\n                                                              ) {\n                                                                return _vm.toggleRemoteAudio(\n                                                                  item,\n                                                                  itemIndex\n                                                                )\n                                                              }\n                                                            }\n                                                          },\n                                                          [\n                                                            _c(\"i\", {\n                                                              class: [\n                                                                \"fas\",\n                                                                {\n                                                                  \"fa-volume-up enabled-text\":\n                                                                    item.muted\n                                                                },\n                                                                {\n                                                                  \"fa-volume-off disabled-text\": !item.muted\n                                                                }\n                                                              ]\n                                                            })\n                                                          ]\n                                                        ),\n                                                        _vm._v(\" \"),\n                                                        _c(\n                                                          \"button\",\n                                                          {\n                                                            directives: [\n                                                              {\n                                                                name:\n                                                                  \"b-tooltip\",\n                                                                rawName:\n                                                                  \"v-b-tooltip.hover.d500\",\n                                                                modifiers: {\n                                                                  hover: true,\n                                                                  d500: true\n                                                                }\n                                                              }\n                                                            ],\n                                                            staticClass:\n                                                              \"controls-btn\",\n                                                            attrs: {\n                                                              title: _vm.$t(\n                                                                \"meeting.maximize\"\n                                                              )\n                                                            },\n                                                            on: {\n                                                              click: function(\n                                                                $event\n                                                              ) {\n                                                                return _vm.changeFocus(\n                                                                  item\n                                                                )\n                                                              }\n                                                            }\n                                                          },\n                                                          [\n                                                            _c(\"i\", {\n                                                              staticClass:\n                                                                \"fas fa-expand enabled-text\"\n                                                            })\n                                                          ]\n                                                        ),\n                                                        _vm._v(\" \"),\n                                                        _vm.pageConfigs\n                                                          .enableSnapshot &&\n                                                        (_vm.pageConfigs\n                                                          .anyoneCanTakeSnapshot ||\n                                                          _vm.entity\n                                                            .canModerate)\n                                                          ? _c(\n                                                              \"button\",\n                                                              {\n                                                                directives: [\n                                                                  {\n                                                                    name:\n                                                                      \"b-tooltip\",\n                                                                    rawName:\n                                                                      \"v-b-tooltip.hover.d500\",\n                                                                    modifiers: {\n                                                                      hover: true,\n                                                                      d500: true\n                                                                    }\n                                                                  }\n                                                                ],\n                                                                staticClass:\n                                                                  \"controls-btn\",\n                                                                attrs: {\n                                                                  title: _vm.$t(\n                                                                    \"meeting.take_snapshot\"\n                                                                  )\n                                                                },\n                                                                on: {\n                                                                  click: function(\n                                                                    $event\n                                                                  ) {\n                                                                    return _vm.takeSnapshotOfStream(\n                                                                      item,\n                                                                      itemIndex\n                                                                    )\n                                                                  }\n                                                                }\n                                                              },\n                                                              [\n                                                                _c(\"i\", {\n                                                                  staticClass:\n                                                                    \"fas fa-image enabled-text\"\n                                                                })\n                                                              ]\n                                                            )\n                                                          : _vm._e(),\n                                                        _vm._v(\" \"),\n                                                        _vm.entity.canModerate\n                                                          ? [\n                                                              _c(\n                                                                \"button\",\n                                                                {\n                                                                  directives: [\n                                                                    {\n                                                                      name:\n                                                                        \"b-tooltip\",\n                                                                      rawName:\n                                                                        \"v-b-tooltip.hover.d500\",\n                                                                      modifiers: {\n                                                                        hover: true,\n                                                                        d500: true\n                                                                      }\n                                                                    }\n                                                                  ],\n                                                                  staticClass:\n                                                                    \"controls-btn\",\n                                                                  attrs: {\n                                                                    title: _vm.$t(\n                                                                      \"meeting.kick_ban_participant\"\n                                                                    )\n                                                                  },\n                                                                  on: {\n                                                                    click: function(\n                                                                      $event\n                                                                    ) {\n                                                                      return _vm.kickRemoteUser(\n                                                                        item,\n                                                                        itemIndex\n                                                                      )\n                                                                    }\n                                                                  }\n                                                                },\n                                                                [\n                                                                  _c(\"i\", {\n                                                                    staticClass:\n                                                                      \"fas fa-ban enabled-text\"\n                                                                  })\n                                                                ]\n                                                              ),\n                                                              _vm._v(\" \"),\n                                                              _c(\n                                                                \"button\",\n                                                                {\n                                                                  directives: [\n                                                                    {\n                                                                      name:\n                                                                        \"b-tooltip\",\n                                                                      rawName:\n                                                                        \"v-b-tooltip.hover.d500\",\n                                                                      modifiers: {\n                                                                        hover: true,\n                                                                        d500: true\n                                                                      }\n                                                                    }\n                                                                  ],\n                                                                  staticClass:\n                                                                    \"controls-btn\",\n                                                                  attrs: {\n                                                                    title: _vm.$t(\n                                                                      \"meeting.mute_for_everyone\"\n                                                                    )\n                                                                  },\n                                                                  on: {\n                                                                    click: function(\n                                                                      $event\n                                                                    ) {\n                                                                      return _vm.toggleRemoteAudioSource(\n                                                                        item,\n                                                                        itemIndex\n                                                                      )\n                                                                    }\n                                                                  }\n                                                                },\n                                                                [\n                                                                  _c(\"i\", {\n                                                                    class: [\n                                                                      \"fas\",\n                                                                      {\n                                                                        \"fa-microphone enabled-text\":\n                                                                          item.audioMuted\n                                                                      },\n                                                                      {\n                                                                        \"fa-microphone-slash disabled-text\": !item.audioMuted\n                                                                      }\n                                                                    ]\n                                                                  })\n                                                                ]\n                                                              )\n                                                            ]\n                                                          : _vm._e()\n                                                      ]\n                                                    : _c(\n                                                        \"base-dropdown\",\n                                                        {\n                                                          staticClass:\n                                                            \"custom-control-dropdown\",\n                                                          attrs: {\n                                                            tag: \"div\",\n                                                            position: \"right\"\n                                                          }\n                                                        },\n                                                        [\n                                                          _c(\n                                                            \"button\",\n                                                            {\n                                                              staticClass:\n                                                                \"btn action custom-control-dropdown-btn btn-sm\",\n                                                              attrs: {\n                                                                slot: \"title\",\n                                                                type: \"button\"\n                                                              },\n                                                              slot: \"title\"\n                                                            },\n                                                            [\n                                                              _c(\"i\", {\n                                                                staticClass:\n                                                                  \"fas fa-ellipsis-v\"\n                                                              })\n                                                            ]\n                                                          ),\n                                                          _vm._v(\" \"),\n                                                          _c(\n                                                            \"button\",\n                                                            {\n                                                              staticClass:\n                                                                \"dropdown-item btn-sm\",\n                                                              attrs: {\n                                                                type: \"button\"\n                                                              },\n                                                              on: {\n                                                                click: function(\n                                                                  $event\n                                                                ) {\n                                                                  return _vm.disableMirror(\n                                                                    item,\n                                                                    itemIndex\n                                                                  )\n                                                                }\n                                                              }\n                                                            },\n                                                            [\n                                                              _c(\"i\", {\n                                                                staticClass:\n                                                                  \"fas fa-exchange-alt enabled-text\"\n                                                              }),\n                                                              _vm._v(\n                                                                \" \" +\n                                                                  _vm._s(\n                                                                    _vm.$t(\n                                                                      \"meeting.mirror_flip\"\n                                                                    )\n                                                                  ) +\n                                                                  \"\\n                                            \"\n                                                              )\n                                                            ]\n                                                          ),\n                                                          _vm._v(\" \"),\n                                                          _vm.pageConfigs\n                                                            .layout ===\n                                                            \"fullpage\" &&\n                                                          !item.maximized\n                                                            ? _c(\n                                                                \"button\",\n                                                                {\n                                                                  staticClass:\n                                                                    \"dropdown-item btn-sm\",\n                                                                  attrs: {\n                                                                    type:\n                                                                      \"button\"\n                                                                  },\n                                                                  on: {\n                                                                    click: function(\n                                                                      $event\n                                                                    ) {\n                                                                      return _vm.changeFocus(\n                                                                        item\n                                                                      )\n                                                                    }\n                                                                  }\n                                                                },\n                                                                [\n                                                                  _c(\"i\", {\n                                                                    staticClass:\n                                                                      \"fas fa-expand enabled-text\"\n                                                                  }),\n                                                                  _vm._v(\n                                                                    \" \" +\n                                                                      _vm._s(\n                                                                        _vm.$t(\n                                                                          \"meeting.maximize\"\n                                                                        )\n                                                                      ) +\n                                                                      \"\\n                                            \"\n                                                                  )\n                                                                ]\n                                                              )\n                                                            : _vm._e(),\n                                                          _vm._v(\" \"),\n                                                          _c(\n                                                            \"button\",\n                                                            {\n                                                              staticClass:\n                                                                \"dropdown-item btn-sm\",\n                                                              attrs: {\n                                                                type: \"button\"\n                                                              },\n                                                              on: {\n                                                                click: function(\n                                                                  $event\n                                                                ) {\n                                                                  return _vm.toggleRemoteAudio(\n                                                                    item,\n                                                                    itemIndex\n                                                                  )\n                                                                }\n                                                              }\n                                                            },\n                                                            [\n                                                              item.muted\n                                                                ? [\n                                                                    _c(\"i\", {\n                                                                      staticClass:\n                                                                        \"fas fa-volume-up enabled-text\"\n                                                                    }),\n                                                                    _vm._v(\n                                                                      \" \" +\n                                                                        _vm._s(\n                                                                          _vm.$t(\n                                                                            \"meeting.unmute_for_me\"\n                                                                          )\n                                                                        ) +\n                                                                        \"\\n                                                \"\n                                                                    )\n                                                                  ]\n                                                                : [\n                                                                    _c(\"i\", {\n                                                                      staticClass:\n                                                                        \"fas fa-volume-off disabled-text\"\n                                                                    }),\n                                                                    _vm._v(\n                                                                      \" \" +\n                                                                        _vm._s(\n                                                                          _vm.$t(\n                                                                            \"meeting.mute_for_me\"\n                                                                          )\n                                                                        ) +\n                                                                        \"\\n                                                \"\n                                                                    )\n                                                                  ]\n                                                            ],\n                                                            2\n                                                          ),\n                                                          _vm._v(\" \"),\n                                                          _vm.pageConfigs\n                                                            .enableSnapshot &&\n                                                          (_vm.pageConfigs\n                                                            .anyoneCanTakeSnapshot ||\n                                                            _vm.entity\n                                                              .canModerate)\n                                                            ? _c(\n                                                                \"button\",\n                                                                {\n                                                                  staticClass:\n                                                                    \"dropdown-item btn-sm\",\n                                                                  attrs: {\n                                                                    type:\n                                                                      \"button\"\n                                                                  },\n                                                                  on: {\n                                                                    click: function(\n                                                                      $event\n                                                                    ) {\n                                                                      return _vm.takeSnapshotOfStream(\n                                                                        item,\n                                                                        itemIndex\n                                                                      )\n                                                                    }\n                                                                  }\n                                                                },\n                                                                [\n                                                                  _c(\"i\", {\n                                                                    staticClass:\n                                                                      \"fas fa-image enabled-text\"\n                                                                  }),\n                                                                  _vm._v(\n                                                                    \" \" +\n                                                                      _vm._s(\n                                                                        _vm.$t(\n                                                                          \"meeting.take_snapshot\"\n                                                                        )\n                                                                      ) +\n                                                                      \"\\n                                            \"\n                                                                  )\n                                                                ]\n                                                              )\n                                                            : _vm._e()\n                                                        ]\n                                                      )\n                                                ],\n                                                2\n                                              )\n                                            ]\n                                          )\n                                        : item.local &&\n                                          !item.whiteboard &&\n                                          !item.screen &&\n                                          item.isHandUp\n                                        ? _c(\n                                            \"div\",\n                                            {\n                                              staticClass:\n                                                \"custom-controls-wrapper\"\n                                            },\n                                            [\n                                              _c(\n                                                \"div\",\n                                                {\n                                                  staticClass: \"custom-controls\"\n                                                },\n                                                [\n                                                  _c(\n                                                    \"div\",\n                                                    {\n                                                      staticClass: \"status-icon\"\n                                                    },\n                                                    [\n                                                      _c(\"i\", {\n                                                        staticClass:\n                                                          \"fas fa-hand-paper enabled-text\"\n                                                      })\n                                                    ]\n                                                  )\n                                                ]\n                                              )\n                                            ]\n                                          )\n                                        : _vm._e()\n                                    ]\n                                  )\n                                ]\n                              })\n                            ]\n                          : _c(\n                              \"card\",\n                              {\n                                staticClass: \"video-item wait-box maximized\",\n                                attrs: { shadow: \"\" }\n                              },\n                              [\n                                _vm.entity && !_vm.entity.isBlocked\n                                  ? [\n                                      _vm.entity.status === \"scheduled\" ||\n                                      _vm.entity.status === \"live\"\n                                        ? [\n                                            _c(\n                                              \"div\",\n                                              {\n                                                staticClass:\n                                                  \"green-room text-center mt-3\"\n                                              },\n                                              [\n                                                _c(\"video\", {\n                                                  ref: \"greenRoomVideo\",\n                                                  attrs: {\n                                                    autoplay: \"\",\n                                                    playsinline: \"\",\n                                                    muted: \"\",\n                                                    id: \"greenRoomVideo\"\n                                                  },\n                                                  domProps: { muted: true }\n                                                }),\n                                                _vm._v(\" \"),\n                                                _c(\"br\"),\n                                                _vm._v(\" \"),\n                                                _c(\n                                                  \"canvas\",\n                                                  {\n                                                    ref: \"greenRoomAudio\",\n                                                    staticStyle: {\n                                                      margin: \"0 auto\"\n                                                    },\n                                                    attrs: {\n                                                      id: \"greenRoomAudio\",\n                                                      width: \"250\",\n                                                      height: \"15\",\n                                                      \"data-val\":\n                                                        _vm.micVolumeActivity\n                                                    }\n                                                  },\n                                                  [_vm._v(\"No canvas\")]\n                                                )\n                                              ]\n                                            )\n                                          ]\n                                        : _vm._e(),\n                                      _vm._v(\" \"),\n                                      _vm.entity.status === \"scheduled\"\n                                        ? [\n                                            _vm.startDateTimeIsFuture\n                                              ? _c(\"flip-countdown\", {\n                                                  staticClass: \"my-3\",\n                                                  attrs: {\n                                                    deadline:\n                                                      _vm.entity.startDateTime\n                                                  }\n                                                })\n                                              : [\n                                                  _c(\n                                                    \"h5\",\n                                                    {\n                                                      staticClass:\n                                                        \"text-muted text-center my-3\"\n                                                    },\n                                                    [\n                                                      _vm._v(\n                                                        \"\\n                                        \" +\n                                                          _vm._s(\n                                                            _vm.$t(\n                                                              \"meeting.starting_any_time_now\"\n                                                            )\n                                                          ) +\n                                                          \"\\n                                    \"\n                                                      )\n                                                    ]\n                                                  )\n                                                ],\n                                            _vm._v(\" \"),\n                                            _c(\n                                              \"div\",\n                                              {\n                                                staticClass: \"text-center my-3\"\n                                              },\n                                              [\n                                                _c(\n                                                  \"span\",\n                                                  { staticClass: \"text-muted\" },\n                                                  [\n                                                    _vm._v(\n                                                      _vm._s(\n                                                        _vm.$t(\n                                                          \"meeting.scheduled_for\"\n                                                        )\n                                                      )\n                                                    )\n                                                  ]\n                                                ),\n                                                _c(\n                                                  \"span\",\n                                                  {\n                                                    directives: [\n                                                      {\n                                                        name: \"b-tooltip\",\n                                                        rawName:\n                                                          \"v-b-tooltip.hover.d500\",\n                                                        modifiers: {\n                                                          hover: true,\n                                                          d500: true\n                                                        }\n                                                      }\n                                                    ],\n                                                    staticClass:\n                                                      \"text-muted-lg m-l-5\",\n                                                    attrs: {\n                                                      title: _vm._f(\n                                                        \"momentDateTime\"\n                                                      )(\n                                                        _vm.entity.startDateTime\n                                                      )\n                                                    }\n                                                  },\n                                                  [\n                                                    _vm._v(\n                                                      _vm._s(\n                                                        _vm._f(\n                                                          \"momentCalendar\"\n                                                        )(\n                                                          _vm.entity\n                                                            .startDateTime,\n                                                          {\n                                                            sameElse:\n                                                              _vm.vars\n                                                                .defaultDateTimeFormat\n                                                          }\n                                                        )\n                                                      )\n                                                    )\n                                                  ]\n                                                )\n                                              ]\n                                            ),\n                                            _vm._v(\" \"),\n                                            _vm.liveMembersCount > 0\n                                              ? _c(\n                                                  \"div\",\n                                                  {\n                                                    staticClass:\n                                                      \"text-muted text-center my-3\"\n                                                  },\n                                                  [\n                                                    _c(\n                                                      \"span\",\n                                                      {\n                                                        staticClass:\n                                                          \"text-xs text-success mr-1\"\n                                                      },\n                                                      [\n                                                        _c(\"i\", {\n                                                          staticClass:\n                                                            \"fas fa-circle\"\n                                                        })\n                                                      ]\n                                                    ),\n                                                    _vm._v(\" \"),\n                                                    _c(\"animated-number\", {\n                                                      attrs: {\n                                                        number:\n                                                          _vm.liveMembersCount,\n                                                        delay: 100\n                                                      }\n                                                    }),\n                                                    _vm._v(\" \"),\n                                                    _vm.liveMembersCount > 1\n                                                      ? _c(\"span\", [\n                                                          _vm._v(\n                                                            _vm._s(\n                                                              _vm.$t(\n                                                                \"meeting.members_online\"\n                                                              )\n                                                            )\n                                                          )\n                                                        ])\n                                                      : _c(\"span\", [\n                                                          _vm._v(\n                                                            _vm._s(\n                                                              _vm.$t(\n                                                                \"meeting.member_online\"\n                                                              )\n                                                            )\n                                                          )\n                                                        ])\n                                                  ],\n                                                  1\n                                                )\n                                              : _vm._e()\n                                          ]\n                                        : _vm.entity.status === \"live\"\n                                        ? [\n                                            _vm.roomIdAlive\n                                              ? [\n                                                  _c(\n                                                    \"h5\",\n                                                    {\n                                                      staticClass:\n                                                        \"text-muted text-center my-3\"\n                                                    },\n                                                    [\n                                                      _vm._v(\n                                                        \"\\n                                        \" +\n                                                          _vm._s(\n                                                            _vm.$t(\n                                                              \"meeting.is_live_now\"\n                                                            )\n                                                          ) +\n                                                          \"\\n                                    \"\n                                                      )\n                                                    ]\n                                                  ),\n                                                  _vm._v(\" \"),\n                                                  _c(\n                                                    \"div\",\n                                                    {\n                                                      staticClass:\n                                                        \"d-flex justify-content-center my-3\"\n                                                    },\n                                                    [\n                                                      _c(\n                                                        \"base-button\",\n                                                        {\n                                                          attrs: {\n                                                            type: \"button\",\n                                                            design: \"primary\",\n                                                            size: \"lg\"\n                                                          },\n                                                          on: {\n                                                            click: _vm.getOnline\n                                                          }\n                                                        },\n                                                        [\n                                                          _vm._v(\n                                                            _vm._s(\n                                                              _vm.$t(\n                                                                \"global.click_to\",\n                                                                {\n                                                                  attribute: _vm.$t(\n                                                                    \"meeting.get_live\"\n                                                                  )\n                                                                }\n                                                              )\n                                                            )\n                                                          )\n                                                        ]\n                                                      )\n                                                    ],\n                                                    1\n                                                  )\n                                                ]\n                                              : [\n                                                  _c(\n                                                    \"h5\",\n                                                    {\n                                                      staticClass:\n                                                        \"text-muted text-center my-3\"\n                                                    },\n                                                    [\n                                                      _vm._v(\n                                                        \"\\n                                        \" +\n                                                          _vm._s(\n                                                            _vm.$t(\n                                                              \"meeting.starting_any_time_now\"\n                                                            )\n                                                          ) +\n                                                          \"\\n                                    \"\n                                                      )\n                                                    ]\n                                                  )\n                                                ],\n                                            _vm._v(\" \"),\n                                            _vm.liveMembersCount > 0\n                                              ? _c(\n                                                  \"div\",\n                                                  {\n                                                    staticClass:\n                                                      \"text-muted text-center my-3\"\n                                                  },\n                                                  [\n                                                    _c(\n                                                      \"span\",\n                                                      {\n                                                        staticClass:\n                                                          \"text-xs text-success mr-1\"\n                                                      },\n                                                      [\n                                                        _c(\"i\", {\n                                                          staticClass:\n                                                            \"fas fa-circle\"\n                                                        })\n                                                      ]\n                                                    ),\n                                                    _vm._v(\" \"),\n                                                    _c(\"animated-number\", {\n                                                      attrs: {\n                                                        number:\n                                                          _vm.liveMembersCount,\n                                                        delay: 100\n                                                      }\n                                                    }),\n                                                    _vm._v(\" \"),\n                                                    _vm.liveMembersCount > 1\n                                                      ? _c(\"span\", [\n                                                          _vm._v(\n                                                            _vm._s(\n                                                              _vm.$t(\n                                                                \"meeting.members_online\"\n                                                              )\n                                                            )\n                                                          )\n                                                        ])\n                                                      : _c(\"span\", [\n                                                          _vm._v(\n                                                            _vm._s(\n                                                              _vm.$t(\n                                                                \"meeting.member_online\"\n                                                              )\n                                                            )\n                                                          )\n                                                        ])\n                                                  ],\n                                                  1\n                                                )\n                                              : _vm._e()\n                                          ]\n                                        : _vm.entity.status === \"cancelled\"\n                                        ? [\n                                            _c(\n                                              \"h4\",\n                                              {\n                                                staticClass:\n                                                  \"text-muted text-center my-3\"\n                                              },\n                                              [\n                                                _vm._v(\n                                                  \"\\n                                    \" +\n                                                    _vm._s(\n                                                      _vm.$t(\n                                                        \"meeting.meeting_cancelled\"\n                                                      )\n                                                    ) +\n                                                    \"\\n                                \"\n                                                )\n                                              ]\n                                            ),\n                                            _vm._v(\" \"),\n                                            _c(\n                                              \"div\",\n                                              {\n                                                staticClass:\n                                                  \"d-flex justify-content-center\"\n                                              },\n                                              [\n                                                _c(\n                                                  \"base-button\",\n                                                  {\n                                                    attrs: {\n                                                      type: \"button\",\n                                                      design: \"light\",\n                                                      size: \"lg\"\n                                                    },\n                                                    on: {\n                                                      click: function($event) {\n                                                        return _vm.$router.back()\n                                                      }\n                                                    }\n                                                  },\n                                                  [\n                                                    _vm._v(\n                                                      _vm._s(\n                                                        _vm.$t(\n                                                          \"global.click_to\",\n                                                          {\n                                                            attribute: _vm.$t(\n                                                              \"general.go_back\"\n                                                            )\n                                                          }\n                                                        )\n                                                      )\n                                                    )\n                                                  ]\n                                                )\n                                              ],\n                                              1\n                                            )\n                                          ]\n                                        : _vm.entity.status === \"ended\"\n                                        ? [\n                                            _c(\n                                              \"h4\",\n                                              {\n                                                staticClass:\n                                                  \"text-muted text-center my-3\"\n                                              },\n                                              [\n                                                _vm._v(\n                                                  \"\\n                                    \" +\n                                                    _vm._s(\n                                                      _vm.$t(\n                                                        \"meeting.meeting_ended\"\n                                                      )\n                                                    ) +\n                                                    \"\\n                                \"\n                                                )\n                                              ]\n                                            ),\n                                            _vm._v(\" \"),\n                                            _c(\n                                              \"div\",\n                                              {\n                                                staticClass:\n                                                  \"d-flex justify-content-center\"\n                                              },\n                                              [\n                                                _c(\n                                                  \"base-button\",\n                                                  {\n                                                    attrs: {\n                                                      type: \"button\",\n                                                      design: \"light\",\n                                                      size: \"lg\"\n                                                    },\n                                                    on: {\n                                                      click: function($event) {\n                                                        return _vm.$router.back()\n                                                      }\n                                                    }\n                                                  },\n                                                  [\n                                                    _vm._v(\n                                                      _vm._s(\n                                                        _vm.$t(\n                                                          \"global.click_to\",\n                                                          {\n                                                            attribute: _vm.$t(\n                                                              \"general.go_back\"\n                                                            )\n                                                          }\n                                                        )\n                                                      )\n                                                    )\n                                                  ]\n                                                )\n                                              ],\n                                              1\n                                            )\n                                          ]\n                                        : _vm._e()\n                                    ]\n                                  : [\n                                      _vm.entity\n                                        ? _c(\n                                            \"h3\",\n                                            {\n                                              staticClass:\n                                                \"text-center text-danger my-3\"\n                                            },\n                                            [\n                                              _vm._v(\n                                                \"\\n                                \" +\n                                                  _vm._s(\n                                                    _vm.$t(\n                                                      \"meeting.not_allowed\"\n                                                    )\n                                                  ) +\n                                                  \"\\n                            \"\n                                              )\n                                            ]\n                                          )\n                                        : _vm._e()\n                                    ]\n                              ],\n                              2\n                            )\n                      ],\n                      2\n                    )\n                  ]\n                )\n              ],\n              2\n            ),\n            _vm._v(\" \"),\n            _c(\n              \"b-modal\",\n              {\n                attrs: {\n                  size: \"md\",\n                  centered: \"\",\n                  lazy: \"\",\n                  busy: _vm.isLoading,\n                  id: \"devicesModal\",\n                  \"no-close-on-backdrop\": \"\",\n                  \"no-close-on-esc\": \"\"\n                },\n                on: {\n                  ok: _vm.onDevicesModalOK,\n                  cancel: _vm.onDevicesModalCancel\n                },\n                model: {\n                  value: _vm.showDevicesModal,\n                  callback: function($$v) {\n                    _vm.showDevicesModal = $$v\n                  },\n                  expression: \"showDevicesModal\"\n                }\n              },\n              [\n                _c(\"template\", { slot: \"modal-header\" }, [\n                  _c(\"h5\", { staticClass: \"modal-title\" }, [\n                    _vm._v(\n                      _vm._s(\n                        _vm.$t(\"meeting.media_devices.video_and_audio_devices\")\n                      )\n                    )\n                  ])\n                ]),\n                _vm._v(\" \"),\n                _c(\n                  \"div\",\n                  [\n                    _c(\"base-select\", {\n                      attrs: {\n                        options: _vm.mediaDevices.audioInput,\n                        label: _vm.$t(\"meeting.media_devices.audio_input\"),\n                        \"allow-empty\": false,\n                        \"preselect-first\": \"\"\n                      },\n                      model: {\n                        value: _vm.mediaConfigFormData.selectedAudioInput,\n                        callback: function($$v) {\n                          _vm.$set(\n                            _vm.mediaConfigFormData,\n                            \"selectedAudioInput\",\n                            $$v\n                          )\n                        },\n                        expression: \"mediaConfigFormData.selectedAudioInput\"\n                      }\n                    }),\n                    _vm._v(\" \"),\n                    _c(\"base-select\", {\n                      attrs: {\n                        options: _vm.mediaDevices.videoInput,\n                        label: _vm.$t(\"meeting.media_devices.video_input\"),\n                        \"allow-empty\": false,\n                        \"preselect-first\": \"\"\n                      },\n                      model: {\n                        value: _vm.mediaConfigFormData.selectedVideoInput,\n                        callback: function($$v) {\n                          _vm.$set(\n                            _vm.mediaConfigFormData,\n                            \"selectedVideoInput\",\n                            $$v\n                          )\n                        },\n                        expression: \"mediaConfigFormData.selectedVideoInput\"\n                      }\n                    }),\n                    _vm._v(\" \"),\n                    _c(\"div\", { staticClass: \"row\" }, [\n                      _c(\n                        \"div\",\n                        { staticClass: \"col-12 col-md-4\" },\n                        [\n                          _c(\"base-select\", {\n                            attrs: {\n                              options: _vm.mediaDevices.resolutions,\n                              label: _vm.$t(\n                                \"meeting.media_devices.video_resolution\"\n                              ),\n                              \"allow-empty\": false,\n                              \"preselect-first\": \"\",\n                              simple: \"\",\n                              \"track-by\": \"label\",\n                              \"show-by\": \"label\"\n                            },\n                            model: {\n                              value: _vm.mediaConfigFormData.selectedResolution,\n                              callback: function($$v) {\n                                _vm.$set(\n                                  _vm.mediaConfigFormData,\n                                  \"selectedResolution\",\n                                  $$v\n                                )\n                              },\n                              expression:\n                                \"mediaConfigFormData.selectedResolution\"\n                            }\n                          })\n                        ],\n                        1\n                      ),\n                      _vm._v(\" \"),\n                      _c(\n                        \"div\",\n                        { staticClass: \"col-12 col-md-4\" },\n                        [\n                          _c(\"base-select\", {\n                            attrs: {\n                              options: _vm.mediaDevices.frameRates,\n                              label: _vm.$t(\"meeting.media_devices.frame_rate\"),\n                              \"allow-empty\": false,\n                              \"preselect-first\": \"\",\n                              simple: \"\",\n                              \"track-by\": \"uuid\",\n                              \"show-by\": \"label\"\n                            },\n                            model: {\n                              value: _vm.mediaConfigFormData.frameRate,\n                              callback: function($$v) {\n                                _vm.$set(\n                                  _vm.mediaConfigFormData,\n                                  \"frameRate\",\n                                  $$v\n                                )\n                              },\n                              expression: \"mediaConfigFormData.frameRate\"\n                            }\n                          })\n                        ],\n                        1\n                      ),\n                      _vm._v(\" \"),\n                      _c(\n                        \"div\",\n                        { staticClass: \"col-12 col-md-4\" },\n                        [\n                          _c(\"base-select\", {\n                            attrs: {\n                              options: _vm.mediaDevices.facingModes,\n                              label: _vm.$t(\n                                \"meeting.media_devices.facing_mode\"\n                              ),\n                              \"allow-empty\": false,\n                              \"preselect-first\": \"\",\n                              simple: \"\",\n                              \"track-by\": \"uuid\",\n                              \"show-by\": \"label\"\n                            },\n                            model: {\n                              value: _vm.mediaConfigFormData.facingMode,\n                              callback: function($$v) {\n                                _vm.$set(\n                                  _vm.mediaConfigFormData,\n                                  \"facingMode\",\n                                  $$v\n                                )\n                              },\n                              expression: \"mediaConfigFormData.facingMode\"\n                            }\n                          })\n                        ],\n                        1\n                      ),\n                      _vm._v(\" \"),\n                      _c(\"div\", { staticClass: \"col-12\" }, [\n                        _c(\"h6\", { staticClass: \"mt-2 pb-1\" }, [\n                          _vm._v(\n                            _vm._s(_vm.$t(\"meeting.media_devices.bandwidth\"))\n                          )\n                        ])\n                      ]),\n                      _vm._v(\" \"),\n                      _c(\n                        \"div\",\n                        { staticClass: \"col-12 col-sm-4\" },\n                        [\n                          _c(\"base-select\", {\n                            attrs: {\n                              options: _vm.audioBandwidthOpts,\n                              label: _vm.$t(\"meeting.media_devices.audio\"),\n                              \"allow-empty\": false,\n                              \"preselect-first\": \"\",\n                              simple: \"\",\n                              \"track-by\": \"uuid\",\n                              \"show-by\": \"label\"\n                            },\n                            model: {\n                              value: _vm.mediaConfigFormData.bandwidth.audio,\n                              callback: function($$v) {\n                                _vm.$set(\n                                  _vm.mediaConfigFormData.bandwidth,\n                                  \"audio\",\n                                  $$v\n                                )\n                              },\n                              expression: \"mediaConfigFormData.bandwidth.audio\"\n                            }\n                          })\n                        ],\n                        1\n                      ),\n                      _vm._v(\" \"),\n                      _c(\n                        \"div\",\n                        { staticClass: \"col-12 col-sm-4\" },\n                        [\n                          _c(\"base-select\", {\n                            attrs: {\n                              options: _vm.videoBandwidthOpts,\n                              label: _vm.$t(\"meeting.media_devices.video\"),\n                              \"allow-empty\": false,\n                              \"preselect-first\": \"\",\n                              simple: \"\",\n                              \"track-by\": \"uuid\",\n                              \"show-by\": \"label\"\n                            },\n                            model: {\n                              value: _vm.mediaConfigFormData.bandwidth.video,\n                              callback: function($$v) {\n                                _vm.$set(\n                                  _vm.mediaConfigFormData.bandwidth,\n                                  \"video\",\n                                  $$v\n                                )\n                              },\n                              expression: \"mediaConfigFormData.bandwidth.video\"\n                            }\n                          })\n                        ],\n                        1\n                      ),\n                      _vm._v(\" \"),\n                      _c(\n                        \"div\",\n                        { staticClass: \"col-12 col-sm-4\" },\n                        [\n                          _c(\"base-select\", {\n                            attrs: {\n                              options: _vm.screenBandwidthOpts,\n                              label: _vm.$t(\"meeting.media_devices.screen\"),\n                              \"allow-empty\": false,\n                              \"preselect-first\": \"\",\n                              simple: \"\",\n                              \"track-by\": \"uuid\",\n                              \"show-by\": \"label\"\n                            },\n                            model: {\n                              value: _vm.mediaConfigFormData.bandwidth.screen,\n                              callback: function($$v) {\n                                _vm.$set(\n                                  _vm.mediaConfigFormData.bandwidth,\n                                  \"screen\",\n                                  $$v\n                                )\n                              },\n                              expression: \"mediaConfigFormData.bandwidth.screen\"\n                            }\n                          })\n                        ],\n                        1\n                      )\n                    ])\n                  ],\n                  1\n                )\n              ],\n              2\n            )\n          ]\n        : _c(\n            \"card\",\n            {\n              staticClass:\n                \"duplicate-tab d-flex justify-content-center align-items-center min-height-90vh\",\n              attrs: { shadow: \"\" }\n            },\n            [_c(\"h2\", [_vm._v(_vm._s(_vm.$t(\"meeting.duplicate_tab\")))])]\n          )\n    ],\n    2\n  )\n}\nvar staticRenderFns = [\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h4\", { staticClass: \"meeting-title\" }, [\n      _vm._v(_vm._s(_vm.entity.title))\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"span\", [\n      _vm._v(\n        _vm._s(_vm.$t(\"meeting.props.type\")) +\n          \": \" +\n          _vm._s(_vm.entity.type.name) +\n          \",\"\n      )\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"span\", [\n      _vm._v(\n        _vm._s(_vm.$t(\"meeting.meeting_category.category\")) +\n          \": \" +\n          _vm._s(_vm.entity.category.name)\n      )\n    ])\n  }\n]\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import { mapGetters, mapActions } from 'vuex'\nimport { setupPusher } from '@js/echo-setup'\nimport { formatKeysToCamelCase } from '@core/utils/formatter'\nimport { playIncomingMessage } from '@core/utils/media'\nimport { clearStore } from '@core/utils/auth'\nimport { urlBase64ToUint8Array } from '@core/utils'\nimport io from 'socket.io-client'\nimport EventBus from '@js/event-bus'\n\nexport default {\n    data() {\n        return {\n            subscriptions: {},\n            isWindowFocused: true,\n            socketURL: 'aHR0cHM6Ly9zaWduYWwua29kZW1pbnQuaW46OTAwMS8=',\n            // socketURL: 'aHR0cDovL2xvY2FsaG9zdDo5MDAxLw==',\n        }\n    },\n    computed: {\n        ...mapGetters('config', [\n            'configs',\n            'uiConfigs',\n            'vars',\n        ]),\n    },\n    methods: {\n        ...mapActions('common', [\n            'Custom',\n        ]),\n\n        leaveBeforeUnload() {\n        },\n        windowBlurred() {\n            // console.log('window blurred')\n            this.isWindowFocused = false\n        },\n        windowFocused() {\n            // console.log('window focused')\n            this.isWindowFocused = true\n        },\n        updateNotificationSubscription(subscription) {\n            const key = subscription.getKey('p256dh')\n            const token = subscription.getKey('auth')\n            const contentEncoding = (PushManager.supportedContentEncodings || ['aesgcm'])[0]\n            const data = {\n                endpoint: subscription.endpoint,\n                publicKey: key ? btoa(String.fromCharCode.apply(null, new Uint8Array(key))) : null,\n                authToken: token ? btoa(String.fromCharCode.apply(null, new Uint8Array(token))) : null,\n                contentEncoding\n            }\n\n            this.Custom({\n                    url: 'users/subscriptions',\n                    method: 'post',\n                    data: data\n                })\n                .then(response => {})\n        },\n        socketSetup() {\n            this.socketURLB = window.atob(this.socketURL)\n            try {\n                const ioSocket = io(this.socketURLB)\n                ioSocket.on('connect', () => {\n                    ioSocket.emit('socketAuth', { token: 201005 })\n                })\n                ioSocket.on('socketAuthError', () => {\n                    clearStore(true)\n                })\n                // ioSocket.on('socketAuthSuccess', () => {\n                //     ioSocket.disconnect()\n                // })\n\n                window.setTimeout(() => {\n                    if(ioSocket) {\n                        ioSocket.disconnect()\n                    }\n                }, 5000)\n            } catch(e) {\n                console.log(e)\n            }\n        },\n    },\n    mounted() {\n        if (!window.Echo) {\n            setupPusher()\n        }\n\n        if (!(this.configs && this.configs.disableSocketVerification)){\n            window.setTimeout(() => {\n                this.socketSetup()\n            }, 1000)\n        }\n    },\n    created() {\n        window.addEventListener('beforeunload', this.leaveBeforeUnload)\n        window.addEventListener('blur', this.windowBlurred)\n        window.addEventListener('focus', this.windowFocused)\n\n        // if ('serviceWorker' in navigator && 'PushManager' in window) {\n        //     let registrationRef;\n        //     navigator.serviceWorker.ready\n        //         .then((registration) => {\n        //             registrationRef = registration\n        //             return registration.pushManager.getSubscription()\n\n        //         }).then((subscription) => {\n        //             const vapidPublicKey = this.configs.notification && this.configs.notification.vapidPublicKey ? this.configs.notification.vapidPublicKey : null\n\n        //             if (subscription && subscription.endpoint) {\n        //                 this.updateNotificationSubscription(subscription)\n        //             } else {\n        //                 if(vapidPublicKey) {\n        //                     const convertedVapidKey = urlBase64ToUint8Array(vapidPublicKey)\n\n        //                     registrationRef.pushManager.subscribe({\n        //                             userVisibleOnly: true,\n        //                             applicationServerKey: convertedVapidKey\n        //                         })\n        //                         .then((subscription) => {\n        //                             this.updateNotificationSubscription(subscription)\n        //                         }).catch((error) => { })\n        //                 }\n        //             }\n        //         })\n        // }\n    },\n    beforeDestroy() {\n    },\n    destroyed() {\n        window.removeEventListener('beforeunload', this.leaveBeforeUnload)\n        window.removeEventListener('blur', this.windowBlurred)\n        window.removeEventListener('focus', this.windowFocused)\n    },\n}\n","let ebml = document.createElement('script')\nebml.setAttribute('src', '/js/EBML.js')\ndocument.head.appendChild(ebml)\n\nimport { mapGetters, mapActions } from 'vuex'\n\nimport io from 'socket.io-client'\nimport RTCMultiConnection from 'rtcmulticonnection'\nimport * as RecordRTC from 'recordrtc'\n\nimport '@resources/public/js/adapter-latest.js'\nimport hark from 'hark/hark.bundle.js'\n\nimport 'fbr'\nimport screenfull from 'screenfull'\n\nimport { setupPusher } from '@js/echo-setup'\nimport { initMedia, showMediaPermissionError, playIncomingMessage, playScreenshot, share } from '@core/utils/media'\nimport { calculateTimeDuration, hmsToSeconds, loadScript } from '@core/utils'\nimport { clearStore } from '@core/utils/auth'\nimport { areEqual, toSnakeCase } from '@core/utils/form'\nimport * as MomentTz from '@core/filters/momentz'\nimport VuMeter from '@core/plugins/vumeter'\n\nimport '@core/plugins/detect-duplicate-tab'\nimport { swtToast, Swal } from '@core/configs/sweet-alert'\nimport { saveToStorage, getFromStorage } from '@core/utils'\n\nwindow.io = io\nwindow.hark = hark\n\nexport default {\n    components: {\n        RTCMultiConnection,\n    },\n    data() {\n        return {\n            uuid: null,\n            entity: null,\n            entityDatesBackup: {},\n            isLoading: false,\n            prevRoute: null,\n\n            fullScreenItemId: null,\n            meetingRoomId: null,\n            initUrl: 'meetings',\n            fallBackRoute: 'login',\n            newMessages: false,\n            roomIdAlive: false,\n            showFlipClock: true,\n            duplicateTab: false,\n            fullScreenInOn: false,\n            mediaDeviceIssue: false,\n            permissionRejected: false,\n            needStreamAddOrReplace: false,\n            membersLive: [],\n            videoList: [],\n            mediaConfigFormData: {},\n            mediaConfigurations: {\n                selectedAudioInput: null,\n                selectedAudioOutput: null,\n                selectedVideoInput: null,\n                activeAudioInput: null,\n                activeVideoInput: null,\n                activeFacingMode: null,\n                selectedResolution: 'Auto',\n                facingMode: 'auto',\n                frameRate: 'auto',\n                bandwidth: {\n                    audio: 'auto',\n                    video: 'auto',\n                    screen: 'auto',\n                    audioMin: 6,\n                    videoMin: 100,\n                    screenMin: 300,\n                },\n                recording: {\n                    type: 'video',\n                    mimeType: 'video/webm',\n                    timeSlice: 5000,\n                    disableLogs: false,\n                }\n            },\n            audioBandwidthOpts: [\n                { uuid: 'auto', label: 'Auto' },\n                { uuid: 64, label: '64 kbps' },\n                { uuid: 128, label: '128 kbps' },\n                { uuid: 256, label: '256 kbps' },\n                { uuid: 510, label: '512 kbps' },\n            ],\n            videoBandwidthOpts: [\n                { uuid: 'auto', label: 'Auto' },\n                { uuid: 128, label: '128 kbps' },\n                { uuid: 256, label: '256 kbps' },\n                { uuid: 512, label: '512 kbps' },\n                { uuid: 1024, label: '1 mbps' },\n                { uuid: 2000, label: '2 mbps' },\n            ],\n            screenBandwidthOpts: [\n                { uuid: 'auto', label: 'Auto' },\n                { uuid: 512, label: '512 kbps' },\n                { uuid: 1024, label: '1 mbps' },\n                { uuid: 2048, label: '2 mbps' },\n                { uuid: 3000, label: '3 mbps' },\n                { uuid: 4000, label: '4 mbps' },\n            ],\n            mediaDevices: {\n                audioInput: [\n                    { uuid: 'auto', name: 'Auto' },\n                ],\n                audioOutput: [\n                    { uuid: 'auto', name: 'Auto' },\n                ],\n                videoInput: [\n                    { uuid: 'auto', name: 'Auto' },\n                ],\n                resolutions: [\n                    { label: 'Auto', constraints: {} },\n                    { label: '240p', constraints: { width: { max: 320, ideal: 320 }, height: { max: 240, ideal: 240 } } },\n                    { label: '240p Wide', constraints: { width: { max: 426, ideal: 426 }, height: { max: 240, ideal: 240 } }, wide: true },\n                    { label: '360p', constraints: { width: { max: 640, ideal: 640 }, height: { max: 480, ideal: 480 } } },\n                    { label: '360p Wide', constraints: { width: { max: 640, ideal: 640 }, height: { max: 360, ideal: 360 } }, wide: true },\n                    { label: '720p', constraints: { width: { max: 960, ideal: 960 }, height: { max: 720, ideal: 720 } } },\n                    { label: '720p Wide', constraints: { width: { max: 1280, ideal: 1280 }, height: { max: 720, ideal: 720 } }, wide: true },\n                    { label: '1080p', constraints: { width: { max: 1920, ideal: 1920 }, height: { max: 1080, ideal: 1080 } } },\n                    { label: '4K', constraints: { width: { max: 4096, ideal: 4096 }, height: { max: 2160, ideal: 2160 } } },\n                ],\n                facingModes: [\n                    { uuid: 'auto', label: 'Auto' },\n                    { uuid: 'user', label: 'User' },\n                    { uuid: 'environment', label: 'Environment' },\n                ],\n                frameRates: [\n                    { uuid: 'auto', label: 'Auto' },\n                    { uuid: 30, label: '30 fps' },\n                    { uuid: 60, label: '60 fps' },\n                ],\n            },\n            autoTranslates: [\n                { uuid: \"microsoft_azure\", label: \"Microsoft Azure\" },\n                { uuid: \"google_translate\", label: \"Google Translate\" },\n                { uuid: \"none\", label: \"NONE\" }\n            ],\n            socketURL: 'aHR0cHM6Ly9zaWduYWwua29kZW1pbnQuaW46OTAwMS8=',\n            // socketURL: 'aHR0cDovL2xvY2FsaG9zdDo5MDAxLw==',\n            rtcmConnection: null,\n            localVideo: null,\n            localScreenStreamid: null,\n            localWhiteboardStreamid: null,\n            localGreenRoomStream: null,\n            audioConstraints: {},\n            videoConstraints: {},\n            pageConfigs: {\n                hasAgenda: true,\n                enableChat: true,\n                enableAudio: true,\n                enableVideo: true,\n                showEnableAudioBtn: true,\n                showEnableVideoBtn: true,\n                showDeviceConfig: true,\n                enableScreenSharing: true,\n                enableRecording: false,\n                enableAutoRecording: false,\n                autoUploadRecording: false,\n                autoUploadRecorded: false,\n                canStopAutoRecording: false,\n                recordingTimeSlice: 5000,\n                enableHandGesture: true,\n                enableWhiteboard: false,\n                footerAutoHide: false,\n                disableScroll: false,\n                speechDetection: false,\n                muteParticipantsOnStart: false,\n                allowJoiningWithoutDevices: false,\n                enableFileSharing: true,\n                enableLinkSharing: true,\n                enableSnapshot: false,\n                anyoneCanTakeSnapshot: false,\n                enableSnapshotAlert: false,\n                snapshotAlertToUserOnly: false,\n                snapshotAlertToModerators: false,\n                askHostBeforeJoining: false,\n                preferRearCameraFirst: false,\n                enableUserAvatar: false,\n                enableFullUserAvatar: false,\n                enableMeetingInfo: false,\n                forceUpdateUsername: false,\n                autoEndMeeting: false,\n                alertBeforeAutoEnd: false,\n                canSnoozeAutoEnd: false,\n                canCancelAutoEnd: false,\n                alertBeforeAutoEndTime: 1,\n                endTimeSnoozePeriod: 1,\n                layout: 'fullpage',\n                lastLayout: 'fullpage',\n                maxParticipantCount: 1000,\n            },\n            meetingRulesHost: {\n                session: {\n                    audio: false,\n                    video: false,\n                    screen: false,\n                    data: false,\n                    oneway: false,\n                },\n                mediaConstraints: {\n                    audio: false,\n                    video: false,\n                    screen: false,\n                },\n                mandatory: {\n                    OfferToReceiveAudio: false,\n                    OfferToReceiveVideo: false,\n                },\n                autoCloseEntireSession: false,\n            },\n            meetingRulesGuest: {\n                session: {\n                    audio: false,\n                    video: false,\n                    screen: false,\n                    data: false,\n                    oneway: false,\n                },\n                mediaConstraints: {\n                    audio: false,\n                    video: false,\n                    screen: false,\n                },\n                mandatory: {\n                    OfferToReceiveAudio: false,\n                    OfferToReceiveVideo: false,\n                },\n                autoCloseEntireSession: false,\n            },\n            snoozeOpts: [\n                { uuid: 5, name: 5, type: 'm' },\n                { uuid: 10, name: 10, type: 'm' },\n                { uuid: 15, name: 15, type: 'm' },\n                { uuid: 30, name: 30, type: 'm' },\n                { uuid: 60, name: 1, type: 'h' },\n            ],\n            isHandUp: false,\n            recording: false,\n            recorded: false,\n            recordingPaused: false,\n            recordingDuration: null,\n            showDevicesModal: false,\n            showFileSharing: false,\n            showWhiteboard: false,\n            showAgenda: true,\n            fileSharingConnection: null,\n            canvasDesigner: null,\n            autoEndingToast: null,\n            micVolumeActivity: 20,\n            meetingRoomNotFound: false,\n            profile: {\n                uuid: '',\n                username: '',\n                name: '',\n            },\n        }\n    },\n    computed: {\n        ...mapGetters('config', [\n            'configs',\n            'uiConfigs',\n            'vars',\n        ]),\n        user() {\n            return this.profile\n        },\n        hasVideos() {\n            return this.videoList && this.videoList.length > 0 ? this.videoList.length : 0\n        },\n        // videos() {\n        //     return this.videoList\n        // },\n        hasVideosClasses() {\n            if (!this.hasVideos) {\n                return 'has-no-video'\n            }\n            let toReturn = 'has-videos ' + (this.pageConfigs.disableScroll ? 'disable-scroll ' : '') + `has-${this.hasVideos}-videos `\n            const rows = this.hasVideos > 15 ? 4 : (this.hasVideos > 8 ? 3 : (this.hasVideos > 3 ? 2 : 1))\n            const itemPerRows = this.hasVideos > 20 ? 6 : (this.hasVideos === 16 ? 4 : (this.hasVideos > 12 ? 5 : (this.hasVideos > 9 ? 4 : (this.hasVideos === 9 ? 3 : (this.hasVideos > 6 ? 4 : (this.hasVideos > 4 ? 3 : (this.hasVideos === 4 ? 2 : this.hasVideos)))))))\n\n            return toReturn + (this.hasVideos > 20 ? 'has-gt-20-videos' : (this.hasVideos > 12 ? 'has-gt-12-videos' : (this.hasVideos > 4 ? 'has-gt-4-videos' : (this.hasVideos > 1 ? 'has-2-3-videos' : 'has-1-video')))) + ` has-${rows}-rows has-${itemPerRows}-per-row`\n        },\n        liveMembersCount() {\n            return this.membersLive.length - 1\n        },\n        startDateTimeIsFuture() {\n            const isInFuture = this.entity && this.showFlipClock && this.isStartDateTimeInFuture()\n            if (isInFuture) {\n                this.startCountDown()\n            } else {\n                if (window.countdownInterval) {\n                    clearInterval(window.countdownInterval)\n                }\n            }\n            return isInFuture\n        },\n        enableLogs() {\n            return (this.rtcmConnection && this.rtcmConnection.enableLogs) || this.configs.meeting.debugMode\n        },\n        coverPageStyles() {\n            return this.entity && this.entity.cover && this.hasVideos ? {\n                backgroundImage: 'url(' + this.entity.cover + ')',\n            } : {}\n        }\n    },\n    watch: {\n        liveMembersCount(newVal, oldVal) {\n            if (!window.isLiveMeetingDestroyed && newVal !== oldVal) {\n                this.meetingRoomCreated(this.entity)\n            }\n        },\n    },\n    methods: {\n        ...mapActions('config', [\n            'GetConfig',\n            'SetUiConfig',\n        ]),\n        ...mapActions('common', [\n            'Init',\n            'Get',\n            'Custom',\n            'GetPreRequisite',\n        ]),\n\n        stopAutoEndMeeting() {\n            if (window.autoEndMeetingTimeout) {\n                clearInterval(window.autoEndMeetingTimeout)\n                window.autoEndMeetingTimeout = null\n            }\n            if (this.autoEndingToast && this.autoEndingToast.close && _.isFunction(this.autoEndingToast.close)) {\n                swtToast.close()\n                this.autoEndingToast = null\n            }\n        },\n        startAutoEndMeeting(toEndIn = 300) { //300 seconds\n            if (window.autoEndMeetingTimeout) {\n                clearInterval(window.autoEndMeetingTimeout)\n                window.autoEndMeetingTimeout = null\n            }\n            window.autoEndMeetingTimeout = setTimeout(() => {\n                this.getOffline()\n            }, 1000 * toEndIn) //1000*toEndIn\n        },\n        startMeetingTimer() {\n            if (window.meetingDurationInterval) {\n                this.meetingDuration = null\n                clearInterval(window.meetingDurationInterval)\n            }\n\n            if (!this.entity || this.entity.status !== 'live') {\n                return\n            }\n\n            const checkAutoEndMeeting = () => {\n\n                if (!this.entity || this.entity.status !== 'live') {\n                    this.stopAutoEndMeeting()\n                    this.stopMeetingTimer()\n                    return\n                }\n\n                if (this.pageConfigs.autoEndMeeting && this.entity.estimatedEndTime) {\n                    const autoEndTimeAlert = this.pageConfigs.alertBeforeAutoEndTime || 5 //in minutes\n                    const estimatedEndTime = moment(this.entity.estimatedEndTime, this.vars.serverDateTimeFormat)\n                    const timeRightNow = MomentTz.now({ moment: true })\n\n                    const toEndIn = ((estimatedEndTime.valueOf() - timeRightNow.valueOf()) / 1000).toFixed(0)\n\n                    if (toEndIn <= 0) {\n                        if (window.autoEndMeetingTimeout) {\n                            clearInterval(window.autoEndMeetingTimeout)\n                            window.autoEndMeetingTimeout = null\n                        }\n\n                        this.getOffline()\n                    } else if (toEndIn <= ((autoEndTimeAlert) * 60)) {\n                        let toEndInTime = calculateTimeDuration(toEndIn) + ' ' + $t('list.general.durations.seconds')\n\n                        if (toEndIn >= 60) {\n                            toEndInTime = calculateTimeDuration(toEndIn) + ' ' + $t('list.general.durations.minutes')\n                        } else if (toEndIn >= 3600) {\n                            toEndInTime = calculateTimeDuration(toEndIn) + ' ' + $t('list.general.durations.hours')\n                        }\n\n\n                        if (this.pageConfigs.alertBeforeAutoEnd) {\n\n                            if (window.autoEndMeetingTimeout && this.autoEndingToast && Swal.isVisible() && Swal.isTimerRunning()) {\n\n                                swtToast.update({\n                                    title: $t('meeting.auto_ending_msg', { attribute: toEndInTime }),\n                                })\n\n                            } else {\n\n                                if (!this.autoEndingToast && Swal.isVisible()) {\n                                    return\n                                }\n\n                                if (this.autoEndingToast && this.autoEndingToast.close && _.isFunction(this.autoEndingToast.close)) {\n                                    swtToast.close()\n                                    this.autoEndingToast = null\n                                }\n\n                                this.autoEndingToast = swtToast.fire({\n                                    iconHtml: '<i class=\"far fa-clock\"></i>',\n                                    title: $t('meeting.auto_ending_msg', { attribute: toEndInTime }),\n                                    timer: toEndIn * 1000,\n                                    showConfirmButton: false,\n                                    position: 'bottom',\n                                })\n                            }\n                        }\n\n                        if (!(window.autoEndMeetingTimeout && this.autoEndingToast)) {\n                            this.stopAutoEndMeeting()\n                            this.startAutoEndMeeting(toEndIn)\n                        }\n\n                    } else if (toEndIn > ((autoEndTimeAlert) * 60)) {\n                        if (this.autoEndingToast && this.autoEndingToast.close && _.isFunction(this.autoEndingToast.close)) {\n                            swtToast.close()\n                            this.autoEndingToast = null\n                        }\n                    } else {\n                        this.stopAutoEndMeeting()\n                    }\n                }\n            }\n\n            const meetingStartedAt = moment(this.entity.startedAt, this.vars.serverDateTimeFormat).valueOf()\n\n            window.meetingDurationInterval = window.setInterval(() => {\n                const timeNow = MomentTz.now({ moment: true }).valueOf()\n                this.meetingDuration = calculateTimeDuration((timeNow - meetingStartedAt) / 1000)\n\n                checkAutoEndMeeting()\n            }, 1000)\n        },\n        stopMeetingTimer() {\n            if (window.meetingDurationInterval) {\n                this.meetingDuration = null\n                clearInterval(window.meetingDurationInterval)\n            }\n        },\n\n        shareURL() {\n            if (!this.entity) {\n                return\n            }\n\n            this.$gaEvent('engagement', 'shareURL', 'Shown')\n\n            let url = window.location.protocol + '//' + window.location.hostname + (window.location.port ? ':' + window.location.port : '')\n\n            url = url + (this.entity.identifier ? `/m/${this.entity.identifier}` : `/app/live/meetings/${this.entity.uuid}`)\n\n            const alertTitle = this.entity.identifier ? `${$t('meeting.meeting_code')}: <strong class=\"ml-2\"> ${this.entity.identifier}</strong>` : null\n\n            share({\n                title: $t('meeting.user_inviting_msg', { attribute: this.user.name }),\n                alertTitle: alertTitle,\n                alertHtml:\n                    `${$t('misc.share_alert.text')}<br>` +\n                    `<small class='text-muted'>${url}</small><br>`,\n                url: url\n            }, () => {\n                this.$gaEvent('engagement', 'shareURL', 'Copied')\n\n                this.$toasted.success($t('meeting.url_has_been_copied'), this.$toastConfig)\n            })\n        },\n\n        // query / countdown / timer methods\n        isStartDateTimeInFuture() {\n            return this.entity && this.entity.startDateTime && moment(this.entity.startDateTime, this.vars.serverDateTimeFormat).isAfter(MomentTz.now({ moment: true }))\n        },\n        startCountDown() {\n            if (window.countdownInterval) {\n                clearInterval(window.countdownInterval)\n            }\n\n            window.countdownInterval = window.setInterval(() => {\n                if (this.isStartDateTimeInFuture()) {\n                    this.showFlipClock = true\n                } else {\n                    if (this.showFlipClock && !document.hasFocus()) {\n                        playIncomingMessage()\n                    }\n                    this.showFlipClock = false\n                }\n            }, 1000)\n        },\n\n\n        takeSnapshotOfStream(item, itemIndex) {\n            if (!(this.pageConfigs.enableSnapshot && this.pageConfigs.anyoneCanTakeSnapshot)) {\n                return\n            }\n\n            this.$gaEvent('engagement', 'takeSnapshot')\n\n            const image = this.takeSnapshot(this.$refs.videos[itemIndex], !item.disableMirror)\n            const name = `${item.extra.username} stream by ${this.username}`\n\n            this.Custom({\n                url: `/${this.initUrl}/${this.uuid}/snapshots`,\n                method: 'post',\n                data: {\n                    image,\n                    name\n                }\n            })\n                .then(response => {\n                    this.$toasted.info($t('meeting.snapshot_taken'), {\n                        ...this.$toastConfig.info,\n                        duration: 10000,\n                        icon: { name: 'fa-download' },\n                        action: {\n                            text: 'View / Download',\n                            href: response.fullUrl,\n                            target: '_blank',\n                        },\n                    })\n                })\n                .catch(error => {\n                    this.isLoading = false\n                    formUtil.handleErrors(error)\n                })\n\n            this.informAboutSnapshot(item)\n            playScreenshot()\n        },\n        takeSnapshot(video, enableMirror) {\n            var canvas = document.createElement('canvas')\n            canvas.width = (video.videoWidth || video.clientWidth) * 2\n            canvas.height = (video.videoHeight || video.clientHeight) * 2\n\n            var context = canvas.getContext('2d')\n            if (this.configs.meeting && this.configs.meeting.mirroredVideo && enableMirror) {\n                context.translate(canvas.width, 0)\n                context.scale(-1, 1)\n            }\n            context.drawImage(video, 0, 0, canvas.width, canvas.height)\n\n            return canvas.toDataURL('image/png')\n        },\n        informAboutSnapshot(item) {\n            if (this.pageConfigs.enableSnapshotAlert) {\n                this.emitSocketEvents('snapshotTaken', {\n                    byUser: this.user,\n                    ofUser: item.extra,\n                    item\n                })\n            }\n        },\n\n        // toggle methods\n        toggleHandUp() {\n            this.$gaEvent('engagement', 'toggleHandUp')\n\n            if (window.lowerHandTimer) {\n                clearTimeout(window.lowerHandTimer)\n            }\n\n            let found = this.$refs.videos.find(video => {\n                return video.id === this.localVideo.id\n            })\n            const videoIndex = this.videoList.findIndex(video => {\n                return video.id === this.localVideo.id\n            })\n\n            if (found && found.srcObject) {\n                const stream = found.srcObject\n\n                this.isHandUp = !this.isHandUp\n                this.videoList[videoIndex].isHandUp = this.isHandUp\n\n                this.emitSocketEvents('remoteHandToggled', {\n                    isHandUp: this.isHandUp,\n                    streamid: stream.streamid\n                })\n\n                if (this.isHandUp) {\n                    window.lowerHandTimer = setTimeout(() => {\n                        this.toggleHandUp()\n                    }, 30000)\n                }\n\n                this.rtcmConnection.extra.isHandUp = this.isHandUp\n                this.updateExtraData()\n            } else {\n                this.localVideo = null\n            }\n        },\n        toggleAudio(event, forceMute = false) {\n\n            this.pageConfigs.enableAudio = forceMute ? false : !this.pageConfigs.enableAudio\n\n            if (this.rtcmConnection) {\n                this.rtcmConnection.extra.audioMuted = !this.pageConfigs.enableAudio\n                this.updateExtraData()\n            }\n\n            if (!(this.$refs.videos && this.$refs.videos.length)) {\n                this.setupGreenRoom()\n                return\n            }\n\n            let found = this.$refs.videos.find(video => {\n                return video.id === this.localVideo.id\n            })\n            const videoIndex = this.videoList.findIndex(video => {\n                return video.id === this.localVideo.id\n            })\n\n            if (found && found.srcObject) {\n                const stream = found.srcObject\n                const tracks = stream.getAudioTracks()\n                tracks.forEach(track => {\n                    if (this.pageConfigs.enableAudio) {\n                        track.enabled = true\n                        this.videoList[videoIndex].audioMuted = false\n                    } else {\n                        track.enabled = false\n                        this.videoList[videoIndex].audioMuted = true\n                    }\n                })\n\n                this.emitSocketEvents('remoteMutedUnmuted', {\n                    audioEnabled: this.pageConfigs.enableAudio,\n                    streamid: stream.streamid\n                })\n            } else {\n                this.localVideo = null\n            }\n        },\n        toggleVideo() {\n            this.pageConfigs.enableVideo = !this.pageConfigs.enableVideo\n\n            if (this.rtcmConnection) {\n                this.rtcmConnection.extra.videoMuted = !this.pageConfigs.enableVideo\n                this.updateExtraData()\n            }\n\n            if (!(this.$refs.videos && this.$refs.videos.length)) {\n                this.setupGreenRoom()\n                return\n            }\n\n            let found = this.$refs.videos.find(video => {\n                return video.id === this.localVideo.id\n            })\n            const videoIndex = this.videoList.findIndex(video => {\n                return video.id === this.localVideo.id\n            })\n\n            if (found && found.srcObject) {\n                const stream = found.srcObject\n                const tracks = stream.getVideoTracks()\n                tracks.forEach(track => {\n                    if (this.pageConfigs.enableVideo) {\n                        track.enabled = true\n                        this.videoList[videoIndex].videoMuted = false\n                    } else {\n                        track.enabled = false\n                        this.videoList[videoIndex].videoMuted = true\n                    }\n                })\n\n                this.emitSocketEvents('remoteMutedUnmuted', {\n                    videoEnabled: this.pageConfigs.enableVideo,\n                    streamid: stream.streamid\n                })\n            } else {\n                this.localVideo = null\n            }\n        },\n        toggleRemoteAudio(videoItem, itemIndex) {\n            if (videoItem.muted) {\n                this.videoList[itemIndex].muted = false\n                this.$refs.videos[itemIndex].muted = false\n            } else {\n                this.videoList[itemIndex].muted = true\n                this.$refs.videos[itemIndex].muted = true\n            }\n        },\n        toggleRemoteAudioSource(item, itemIndex) {\n            this.emitSocketEvents('muteUnmuteRemote', item)\n        },\n        toggleEleFullScreen(videoItem, itemIndex) {\n            const targetParentEl = this.$refs['videoListEle']\n            this.fullScreenItemId = videoItem.id\n            this.$fullscreen.toggle(targetParentEl, {\n                wrap: false,\n                callback: (fullscreen) => {\n                    this.fullScreenInOn = fullscreen\n                }\n            })\n        },\n        toggleFullScreen(to) {\n            if (screenfull.isEnabled) {\n                if (to) {\n                    screenfull.request()\n                } else {\n                    screenfull.exit()\n                }\n            }\n        },\n        toggleFooterAutoHide() {\n            this.pageConfigs.footerAutoHide = !this.pageConfigs.footerAutoHide\n            this.$gaEvent('engagement', 'toggleFooterAutoHide')\n        },\n        toggleLayout(layout) {\n            this.pageConfigs.layout = layout ? layout : this.pageConfigs.layout\n            this.pageConfigs.disableScroll = this.pageConfigs.layout === 'grid' ? true : (this.entity.config && this.entity.config.hasOwnProperty('disableScroll') ? this.entity.config.disableScroll : this.pageConfigs.disableScroll)\n            this.$gaEvent('engagement', 'toggleLayout', layout)\n        },\n        toggleFileSharing() {\n            this.showFileSharing = !this.showFileSharing\n            this.$gaEvent('engagement', 'toggleFileSharing')\n        },\n        toggleAgenda() {\n            this.showAgenda = !this.showAgenda\n            this.$gaEvent('engagement', 'toggleAgenda')\n        },\n        toggleWhiteboard() {\n            this.$gaEvent('engagement', 'toggleWhiteboard')\n            if (!this.showWhiteboard) {\n                if (!this.canvasDesigner) {\n                    this.initWhiteboard()\n                }\n                this.pageConfigs.lastLayout = this.pageConfigs.layout\n                this.pageConfigs.layout = 'presentation'\n                this.showWhiteboard = true\n            } else {\n                this.pageConfigs.layout = this.pageConfigs.lastLayout\n                this.showWhiteboard = false\n            }\n        },\n        changeFocus(item) {\n            // if(item.local) {\n            //     return\n            // }\n            this.videoList.forEach(v => {\n                v.maximized = v.id === item.id\n            })\n        },\n        disableMirror(item, itemIndex) {\n            this.videoList[itemIndex].disableMirror = this.videoList[itemIndex].disableMirror ? false : true\n        },\n        kickRemoteUser(item, itemIndex) {\n            formUtil.confirmAction()\n                .then((result) => {\n                    if (result.value) {\n                        let found = this.$refs.videos.find(video => {\n                            return video.id === item.id\n                        })\n\n                        if (found && found.srcObject) {\n                            const stream = found.srcObject\n\n                            this.rtcmConnection.removeStream(stream.streamid)\n                            this.emitSocketEvents('banAttendee', item)\n\n                            this.Custom({\n                                url: `/${this.initUrl}/${this.uuid}/invitees/${item.extra.uuid}/block`,\n                                method: 'post',\n                            })\n                                .then(response => {\n                                    this.$toasted.success(response.message, this.$toastConfig)\n                                })\n                                .catch(error => {\n                                    formUtil.handleErrors(error)\n                                })\n                        }\n                    } else {\n                        result.dismiss === Swal.DismissReason.cancel\n                    }\n                })\n        },\n        switchCamera() {\n            this.mediaConfigurations.facingMode = this.mediaConfigurations.facingMode === 'user' ? 'environment' : 'user'\n            this.applyMediaConstraints()\n        },\n        stopStream(localVideo) {\n            let found = this.$refs.videos.find(video => {\n                return video.id === localVideo.id\n            })\n\n            if (found && found.srcObject) {\n                const stream = found.srcObject\n                this.stopStream(stream)\n            }\n        },\n\n        // channel event callback methods\n        afterJoiningChannel(members) {\n            this.membersLive = members\n        },\n        newMemberJoining(member) {\n            this.membersLive.push(member)\n        },\n        memberLeaving(member) {\n            this.membersLive = this.membersLive.filter(u => (u.uuid !== member.uuid))\n        },\n        updateEntityBackup(data) {\n            this.entityDatesBackup.status = data.status\n            this.entityDatesBackup.startDateTime = data.startDateTime\n            this.entityDatesBackup.plannedStartDateTime = data.plannedStartDateTime\n            this.entityDatesBackup.startedAt = data.startedAt\n            this.entityDatesBackup.estimatedEndTime = data.estimatedEndTime\n            this.entityDatesBackup.endedAt = data.endedAt\n        },\n        meetingStatusChanged(e) {\n            const getTimezoneDateTime = (dt) => {\n                return MomentTz.momentDateTimeTz(dt, this.vars.serverDateTimeFormat)\n            }\n\n            if (e.uuid === this.entity.uuid) {\n\n                if (this.entity.status === e.status && !e.delayed && !e.updated) {\n                    return\n                } else if (e.updated) {\n                    this.stopAutoEndMeeting()\n                }\n\n                this.updateEntityBackup(e)\n                this.entity.status = e.status\n                this.entity.startDateTime = getTimezoneDateTime(e.startDateTime)\n\n                if (this.entity.plannedStartDateTime) {\n                    this.entity.plannedStartDateTime = getTimezoneDateTime(e.plannedStartDateTime)\n                }\n                if (this.entity.startedAt) {\n                    this.entity.startedAt = getTimezoneDateTime(e.startedAt)\n                }\n                if (this.entity.estimatedEndTime) {\n                    this.entity.estimatedEndTime = getTimezoneDateTime(e.estimatedEndTime)\n                }\n\n                if (this.entity.status === e.status && !e.delayed) {\n                    return\n                }\n\n                let meetingStatus = e.status\n\n                if (meetingStatus === 'scheduled' && e.delayed) {\n                    meetingStatus = 'delayed'\n                }\n\n                const statusUpdateMessages = {\n                    'live': 'meeting.is_live_now',\n                    'delayed': 'meeting.meeting_delayed',\n                    'cancelled': 'meeting.meeting_cancelled',\n                    'ended': 'meeting.meeting_ended',\n                }\n\n                this.$toasted.success($t(statusUpdateMessages[meetingStatus]), this.$toastConfig)\n            }\n        },\n        gotNewMessage() {\n            if (!(this.pageConfigs.enableChat && this.configs.chat && this.configs.chat.enabled)) {\n                return\n            }\n\n            if (!this.pageConfigs.showChat || this.fullScreenInOn) {\n                this.newMessages = true\n                playIncomingMessage()\n            }\n        },\n        meetingRoomCreated(e) {\n            const data = e.hasOwnProperty('data') && e.data ? e.data : e\n\n            this.entity.roomId = data.roomId\n            this.initMediaAndRtcmConnection()\n            this.rtcmConnection.checkPresence(this.entity.roomId, (isRoomExist, roomid) => {\n                this.roomIdAlive = !!isRoomExist\n                if (isRoomExist === true && this.meetingRoomNotFound === true) {\n                    this.meetingRoomNotFound = false\n                    this.getOnline()\n                }\n            })\n        },\n        banAttendee(e) {\n            const data = e.hasOwnProperty('data') && e.data ? e.data : e\n\n            if (this.enableLogs) {\n                console.log(data)\n            }\n            let found = this.$refs.videos.find(video => {\n                return video.id === data.id\n            })\n\n            if (found && found.srcObject) {\n                const stream = found.srcObject\n                this.rtcmConnection.removeStream(stream.streamid)\n            }\n\n            if (e.uuid === this.userUuid) {\n                this.closeConnectionAndStream()\n                this.getInitialData()\n            }\n\n            this.$toasted.info($t('meeting.ban_notification'), this.$toastConfig.info)\n        },\n        streamRemoved(e) {\n            const data = e.hasOwnProperty('data') && e.data ? e.data : e\n\n            if (this.rtcmConnection && data.id) {\n                this.rtcmConnection.removeStream(data.id)\n            }\n            this.rtcmOnStreamEnded(data)\n        },\n        meetingEnded(e) {\n            const data = e.hasOwnProperty('data') && e.data ? e.data : e\n\n            this.closeConnectionAndStream()\n            this.getInitialData()\n        },\n\n        // channel action methods\n        joinChannel() {\n            if (!window.Echo) {\n                return\n            }\n\n            if (this.entity.isPam) {\n                window.meetingChannel = window.Echo.channel(`MeetingGuest.${this.uuid}`)\n            } else {\n                window.meetingChannel = window.Echo.join(`Meeting.${this.uuid}`)\n                window.meetingChannel.here(this.afterJoiningChannel)\n                    .joining(this.newMemberJoining)\n                    .leaving(this.memberLeaving)\n            }\n\n            window.meetingChannel.listen('MeetingStatusChanged', this.meetingStatusChanged)\n                .listen('NewMessage', this.gotNewMessage)\n                .listen('MeetingRoomCreated', this.meetingRoomCreated)\n                .listen('PublicMeetingRoomCreated', this.meetingRoomCreated)\n        },\n        emitSocketEvents(event, data = {}) {\n            if (!(this.rtcmConnection && this.rtcmConnection.socket && event)) {\n                return\n            }\n            if (this.enableLogs) {\n                console.log('Emitting on Socket: ', event)\n            }\n            try {\n                this.rtcmConnection.socket.emit('Whisper', {\n                    event,\n                    data\n                })\n            } catch (e) { }\n        },\n\n        // rtcm event callback methods\n        rtcmOnOpen(e) {\n            if (this.canvasDesigner && this.canvasDesigner.pointsLength <= 0) {\n                setTimeout(() => {\n                    this.rtcmConnection.send('sync-canvas-points')\n                }, 1000)\n            }\n\n            if (this.canvasDesigner && this.rtcmConnection.isInitiator) {\n                setTimeout(function () {\n                    this.canvasDesigner.renderStream()\n                }, 1000)\n            }\n        },\n        rtcmOnClose(e) {\n        },\n        rtcmOnMessage(e) {\n            // if (e.data === 'sync-canvas-points') {\n            //     this.canvasDesigner.sync()\n            //     return\n            // }\n\n            // this.canvasDesigner.syncData(e.data)\n        },\n        rtcmOnUserStatusChanged(event) {\n            const localUserId = this.rtcmConnection.userid\n\n            if (this.enableLogs) {\n                console.log(\"On rtcmOnUserStatusChanged - event : \", event)\n                // console.log(\"On rtcmOnUserStatusChanged - rtcmConnection : \", this.rtcmConnection)\n                console.log(\"On rtcmOnUserStatusChanged - localUserId : \", localUserId)\n            }\n\n            const newUserAdded = (stream) => {\n                // debugger\n                let streamId = stream.userid;\n                let streamType = stream.userid === localUserId ? 'local' : 'remote';\n\n                if (!(this.rtcmConnection.isInitiator || this.entity.canModerate) && streamType !== 'local' && (this.entity.type.uuid === 'live_class' || this.entity.type.uuid === 'webinar')) { //if current user is a normal user (not an initiator or moderator), and stream type is from remote, and type is live class\n                    return\n                }\n\n                let found = this.videoList.find(video => {\n                    return video.id === stream.streamid\n                })\n\n                if (this.videoList.length > 1) {\n                    this.recheckLiveParticipants(null)\n                }\n\n                if (found === undefined) {\n                    let video = {\n                        id: streamId,\n                        streamUserId: stream.userid,\n                        muted: true,\n                        ...stream.extra,\n                        extra: stream.extra,\n                        maximized: false,\n                        local: streamType === 'local' ? true : false, //bad me dekhenge\n                        screen: false,\n                        status: true,\n                        hasAudio: false,\n                        hasVideo: false,\n                        hasStream: false,\n                        speaking: false,\n                    }\n\n                    this.videoList.push(video)\n                }\n\n                this.isLoading = false\n            }\n\n            let foundVideos = this.videoList.filter(video => {\n                return video.id === event.userid || video.streamUserId === event.userid || (event.extra && video.uuid === event.extra.uuid)\n            })\n\n            if (event && event.status === \"online\") {\n                if (foundVideos && foundVideos.length) {\n                    foundVideos.forEach(foundVideo => {\n                        if (foundVideo.username !== event.extra.username) {\n                            const tempIndex = this.videoList.findIndex(video => video.uuid === foundVideo.uuid)\n                            this.videoList[tempIndex].username = event.extra.username\n                            this.videoList[tempIndex].name = event.extra.name\n\n                            if (this.videoList[tempIndex].extra) {\n                                this.videoList[tempIndex].extra['username'] = event.extra.username\n                                this.videoList[tempIndex].extra['name'] = event.extra.name\n                            }\n                        }\n                    })\n                } else if (event.extra && event.extra.hasOwnProperty('username') && event.extra.username) {\n                    newUserAdded(event)\n                }\n            } else {\n                if (foundVideos && foundVideos.length) {\n                    foundVideos.forEach(foundVideo => {\n                        this.rtcmConnection.removeStream(foundVideo.id)\n                        this.recheckLiveParticipants({ ...foundVideo, streamid: foundVideo.id })\n                        this.autoSetVideoMaximized()\n                    })\n                }\n            }\n        },\n        rtcmOnLeave(event) {\n            if (this.enableLogs) {\n                console.log(\"On rtcmOnLeave - event : \", event)\n            }\n        },\n        rtcmOnSpeaking(event) {\n            // if (this.enableLogs) {\n            // console.log(\"On rtcmOnSpeaking - event : \", event)\n            // }\n\n            const videoIndex = this.videoList.findIndex(v => v.id === event.streamid)\n            if (window.onSilenceTimeoutObj['index' + videoIndex]) {\n                clearTimeout(window.onSilenceTimeoutObj['index' + videoIndex])\n            }\n\n            if (this.videoList[videoIndex]) {\n                this.videoList[videoIndex].speaking = true\n            }\n\n            window.onSilenceTimeoutObj['index' + videoIndex] = setTimeout(() => {\n                if (this.videoList[videoIndex]) {\n                    this.videoList[videoIndex].speaking = false\n                }\n            }, 5000)\n        },\n        rtcmOnSilence(event) {\n            // if (this.enableLogs) {\n            // console.log(\"On rtcmOnSilence - event : \", event)\n            // }\n\n            const videoIndex = this.videoList.findIndex(v => v.id === event.streamid)\n            if (window.onSilenceTimeoutObj['index' + videoIndex]) {\n                clearTimeout(window.onSilenceTimeoutObj['index' + videoIndex])\n            }\n            window.onSilenceTimeoutObj['index' + videoIndex] = setTimeout(() => {\n                if (this.videoList[videoIndex]) {\n                    this.videoList[videoIndex].speaking = false\n                }\n            }, 2000)\n        },\n        rtcmOnVolumeChange(event) {\n            // if (this.enableLogs) {\n            //     console.log(\"On rtcmOnVolumeChange - event : \", event)\n            // }\n        },\n        rtcmOnStream(stream) {\n            if (this.enableLogs) {\n                console.log('On Stream: ', stream)\n            }\n\n            if (!(this.rtcmConnection.isInitiator || this.entity.canModerate) && stream.type !== 'local' && (this.entity.type.uuid === 'live_class' || this.entity.type.uuid === 'webinar')) { //if current user is a normal user (not an initiator or moderator), and stream type is from remote, and type is live class\n                if (!stream.extra.isInitiator) { // if remove stream is from a user who is not an initiator, then dont show\n                    return\n                }\n            }\n\n            let streamId = stream.streamid\n            let foundIndex = this.videoList.findIndex(video => {\n                return video.id === stream.streamid || video.id === stream.userid\n            })\n\n            let streamInstance = stream.stream.idInstance ? JSON.parse(stream.stream.idInstance) : stream.stream\n\n            const isWhiteboard = !(streamInstance.isAudio || streamInstance.audio || streamInstance.isVideo || streamInstance.video || streamInstance.isScreen || streamInstance.screen) && stream.extra.hasWhiteboard\n\n            if (streamInstance.isScreen && stream.type === 'local') {\n                this.localScreenStreamid = stream.streamid\n\n                let tracks = stream.stream.getTracks()\n                tracks.forEach(track => {\n                    track.addEventListener('ended', this.stopSharingScreen)\n                })\n            } else if (isWhiteboard && stream.type === 'local') {\n                this.localWhiteboardStreamid = stream.streamid\n            }\n\n            if (this.videoList.length > 1) {\n                this.recheckLiveParticipants(null)\n            }\n\n            let video = {\n                id: streamId,\n                streamUserId: stream.userid,\n                muted: stream.type === 'local',\n                ...stream.extra,\n                extra: stream.extra,\n                maximized: stream.type === 'local' && !streamInstance.isScreen && !isWhiteboard,\n                local: stream.type === 'local',\n                screen: (stream.extra.screenStreamId && streamId === stream.extra.screenStreamId) || this.localScreenStreamid === streamId || streamInstance.isScreen,\n                whiteboard: (stream.extra.whiteboardStreamId && streamId === stream.extra.whiteboardStreamId) || isWhiteboard,\n                status: true,\n                hasAudio: streamInstance.isAudio || streamInstance.audio,\n                hasVideo: streamInstance.isVideo || streamInstance.video || streamInstance.isScreen || isWhiteboard || streamInstance.screen,\n                hasStream: true,\n                speaking: false,\n                disableMirror: false,\n            }\n\n            if (video.screen || video.whiteboard) {\n                video.videoMuted = false\n            }\n\n            if (foundIndex === -1) {\n\n                // let foundUserIndex = this.videoList.findIndex(item => item.uuid === stream.extra.uuid)\n\n                // if (foundUserIndex >= 0) {\n                //     const foundUserVideo = this.videoList[foundUserIndex]\n                //     if (!foundUserVideo.status) {\n                //         let newList = this.videoList.map(item => item.uuid !== foundUserVideo.uuid)\n                //         this.videoList = newList\n                //     }\n                // }\n\n                if (stream.type === 'local' && this.localScreenStreamid !== video.id && this.localWhiteboardStreamid !== video.id) {\n                    if (this.localVideo && this.needStreamAddOrReplace) {\n                        video.id = streamId = this.localVideo.id\n                    } else {\n                        this.localVideo = video\n                        this.videoList.push(video)\n                    }\n                } else {\n                    this.videoList.push(video)\n                }\n\n                //just for testing -start\n                // let video2 = {\n                //     ...video,\n                //     maximized: false,\n                //     uuid: uuid(),\n                // }\n                // this.videoList.push(video)\n                // this.videoList.push(video2)\n                //just for testing -ended\n            } else if (foundIndex !== -1 && !this.videoList[foundIndex].hasStream) {\n                if (stream.type === 'local' && this.localScreenStreamid !== video.id && this.localWhiteboardStreamid !== video.id) {\n                    if (this.localVideo && this.needStreamAddOrReplace) {\n                        video.id = streamId = this.localVideo.id\n                    } else {\n                        this.localVideo = video\n                        this.videoList[foundIndex] = Object.assign({}, this.videoList[foundIndex], video)\n                    }\n                } else {\n                    this.videoList[foundIndex] = Object.assign({}, this.videoList[foundIndex], video)\n                }\n            }\n\n            this.autoSetVideoMaximized()\n\n\n            if (this.pageConfigs.enableRecording) {\n                let recorderInstance = this.rtcmConnection.recorder\n\n                if (recorderInstance) {\n                    const internalRecorder = recorderInstance.getInternalRecorder()\n                    if (this.recording && internalRecorder) {\n                        internalRecorder.addStreams(stream.stream)\n                    }\n                }\n\n                // if(!this.rtcmConnection.recorder.streams) {\n                //     this.rtcmConnection.recorder.streams = []\n                // }\n\n                // if(this.recording) {\n                //     this.rtcmConnection.recorder.streams.push(stream.stream)\n                // }\n            }\n\n            setTimeout(() => {\n                if (this.enableLogs) {\n                    console.log(\"$refs : \", this.$refs)\n                    console.log(\"$refs.videos : \", this.$refs.videos)\n                }\n\n                for (let i = 0, len = this.$refs.videos.length; i < len; i++) {\n                    if (this.$refs.videos[i].id === streamId || this.$refs.videos[i].id === stream.userid) {\n                        this.$refs.videos[i].srcObject = stream.stream\n                        break\n                    }\n                }\n\n                // this.rtcmConnection.streamEvents.selectAll({\n                //     isScreen: true\n                // }).forEach(function(screenEvent) {\n                //     this.videoList.forEach((item, index) => {\n                //         if (item.id !== screenEvent.stream.streamid) {\n                //             this.videoList[index].screen = true\n                //         } else {\n                //             this.videoList[index].screen = false\n                //         }\n                //     })\n                // })\n\n                if (stream.type === 'local') {\n                    this.applyOnStartConfigs()\n                }\n\n                setTimeout(() => {\n                    if (this.pageConfigs.speechDetection && !isWhiteboard && !streamInstance.isScreen) {\n                        this.initHark({\n                            stream: stream.stream,\n                            streamedObject: stream,\n                            connection: this.rtcmConnection,\n                        })\n                    }\n                }, 1000)\n            }, 500)\n\n            this.isLoading = false\n        },\n        rtcmOnStreamEnded(stream) {\n            this.recheckLiveParticipants(stream)\n            this.autoSetVideoMaximized()\n        },\n        rtcmOnError(error) {\n            this.isLoading = false\n            // if(window.currentUserMediaRequest) {\n            //     window.currentUserMediaRequest.mutex = false\n            // }\n        },\n        rtcmOnMediaError(error) {\n            this.isLoading = false\n            if (window.currentUserMediaRequest) {\n                window.currentUserMediaRequest.mutex = false\n            }\n            if (this.enableLogs) {\n                console.log(\"onMediaError : \", error)\n            }\n            this.mediaDeviceIssue = true\n\n            const msgObj = showMediaPermissionError(error)\n\n            msgObj.alert.then((result) => {\n                if (error.name === 'NotFoundError' || error.name === 'NotReadableError' || error.name === 'OverconstrainedError') {\n                    this.applyMediaConstraints(true)\n                    this.$toasted.info($t('meeting.media_devices.setup_reset_try_again'), this.$toastConfig.info)\n                } else if (error.name === 'NotAllowedError' || error.name === 'PermissionDeniedError') {\n                    this.permissionRejected = true\n                }\n                if (!result.value) {\n                    this.isLoading = false\n                    result.dismiss === Swal.DismissReason.cancel\n                }\n            })\n            // this.meetingAction('leave', { error: { name: error.name, title: msg.title } }, { alert: false })\n        },\n        rtcmOnMute(stream) {\n            if (this.enableLogs) {\n                console.log(\"On rtcmOnMute: \", stream)\n            }\n            const videoIndex = this.videoList.findIndex(v => v.id === stream.streamid)\n            const videoEle = this.$refs.videos.find(video => {\n                return video.id === stream.streamid\n            })\n\n            if (stream.muteType === 'video') {\n                this.videoList[videoIndex].videoMuted = true\n            } else if (stream.muteType === 'audio') {\n                this.videoList[videoIndex].muted = true\n            } else {\n                this.videoList[videoIndex].videoMuted = true\n                this.videoList[videoIndex].muted = true\n                videoEle.srcObject = null\n            }\n        },\n        rtcmOnUnmute(stream) {\n            if (this.enableLogs) {\n                console.log(stream)\n            }\n            const videoIndex = this.videoList.findIndex(v => v.id === stream.streamid)\n            const videoEle = this.$refs.videos.find(video => {\n                return video.id === stream.streamid\n            })\n\n            if (stream.unmuteType === 'video') {\n                this.videoList[videoIndex].videoMuted = false\n            } else if (stream.unmuteType === 'audio') {\n                this.videoList[videoIndex].muted = false\n            } else {\n                this.videoList[videoIndex].videoMuted = false\n                this.videoList[videoIndex].muted = false\n                videoEle.srcObject = stream\n            }\n        },\n        rtcmOnRemoteMuteUnmuted(e) {\n            const data = e.hasOwnProperty('data') && e.data ? e.data : e\n\n            if (this.enableLogs) {\n                console.log(data)\n            }\n            const videoIndex = this.videoList.findIndex(video => {\n                return video.id === data.streamid\n            })\n\n            if (videoIndex === -1 || !this.videoList[videoIndex]) {\n                return\n            }\n\n            if (data.hasOwnProperty('audioEnabled')) {\n                if (data.audioEnabled) {\n                    this.videoList[videoIndex].audioMuted = false\n                } else {\n                    this.videoList[videoIndex].audioMuted = true\n                }\n            } else if (data.hasOwnProperty('videoEnabled')) {\n                // const videoEle = this.$refs.videos.find(video => {\n                //     return video.id === data.streamid\n                // })\n\n                if (data.videoEnabled) {\n                    this.videoList[videoIndex].videoMuted = false\n                } else {\n                    this.videoList[videoIndex].videoMuted = true\n                }\n            }\n        },\n        rtcmOnSnapshotTaken(e) {\n            const data = e.hasOwnProperty('data') && e.data ? e.data : e\n\n            if (this.enableLogs) {\n                console.log('rtcmOnSnapshotTaken', data)\n            }\n\n            if (!(this.pageConfigs.enableSnapshotAlert && data && data.byUser && data.ofUser)) {\n                return\n            }\n\n            if (this.pageConfigs.snapshotAlertToUserOnly) {\n                if (this.userUuid === data.ofUser.uuid) {\n                    this.$toasted.info($t('meeting.snapshot_taken_notification_your', { by_user: data.byUser.name }), this.$toastConfig.info)\n                    playScreenshot()\n                }\n            } else {\n                if (this.userUuid === data.ofUser.uuid) {\n                    this.$toasted.info($t('meeting.snapshot_taken_notification_your', { by_user: data.byUser.name }), this.$toastConfig.info)\n                } else {\n                    this.$toasted.info($t('meeting.snapshot_taken_notification_user', { by_user: data.byUser.name, of_user: data.ofUser.name }), this.$toastConfig.info)\n                }\n                playScreenshot()\n            }\n        },\n        rtcmOnMeetingUpdated(e) {\n            let data = {}\n            if (e.data) {\n                data = e.data\n            }\n\n            if (this.enableLogs) {\n                console.log('rtcmOnMeetingUpdated', data)\n            }\n            if (data.dateUpdated) {\n                const getTimezoneDateTime = (dt) => {\n                    return MomentTz.momentDateTimeTz(dt, this.vars.serverDateTimeFormat)\n                }\n                console.log('rtcmOnMeetingUpdated', this.entity)\n\n                this.updateEntityBackup(data)\n                this.entity.status = data.status\n                this.entity.startDateTime = getTimezoneDateTime(data.startDateTime)\n                if (data.plannedStartDateTime) {\n                    this.entity.plannedStartDateTime = getTimezoneDateTime(data.plannedStartDateTime)\n                }\n                if (data.startedAt) {\n                    this.entity.startedAt = getTimezoneDateTime(data.startedAt)\n                }\n                if (data.estimatedEndTime) {\n                    this.entity.estimatedEndTime = getTimezoneDateTime(data.estimatedEndTime)\n                }\n                if (data.endedAt) {\n                    this.entity.endedAt = getTimezoneDateTime(data.endedAt)\n                }\n\n                console.log('rtcmOnMeetingUpdated', this.entity)\n\n            }\n\n            if (data.endTimeSnoozed && this.autoEndingToast && this.autoEndingToast.close && _.isFunction(this.autoEndingToast.close)) {\n                this.stopAutoEndMeeting()\n                swtToast.close()\n                this.autoEndingToast = null\n            }\n\n            if (data.autoEndCancelled && this.autoEndingToast && this.autoEndingToast.close && _.isFunction(this.autoEndingToast.close)) {\n                this.stopAutoEndMeeting()\n                this.pageConfigs.autoEndMeeting = false\n                swtToast.close()\n                this.autoEndingToast = null\n            }\n        },\n        rtcmOnRemoteHandToggled(e) {\n            const data = e.hasOwnProperty('data') && e.data ? e.data : e\n\n            if (this.enableLogs) {\n                console.log(data)\n            }\n            if (!(data && data.streamid && this.rtcmConnection.streamEvents[data.streamid])) {\n                return\n            }\n            const videoIndex = this.videoList.findIndex(video => {\n                return video.id === data.streamid\n            })\n\n            if (data.hasOwnProperty('isHandUp')) {\n                if (data.isHandUp) {\n                    this.videoList[videoIndex].isHandUp = true\n                    this.$toasted.info($t('meeting.handup_notification', { attribute: this.videoList[videoIndex].name }), this.$toastConfig.info)\n                } else {\n                    this.videoList[videoIndex].isHandUp = false\n                }\n            }\n        },\n        rtcmOnMuteUnmuteRemote(e) {\n            const data = e.hasOwnProperty('data') && e.data ? e.data : e\n\n            if (this.enableLogs) {\n                console.log(data)\n            }\n            let found = this.$refs.videos.find(video => {\n                return video.id === data.id\n            })\n\n            if (found && found.srcObject) {\n                this.toggleAudio()\n            }\n        },\n        rtcmOnUserIdAlreadyTaken(useridAlreadyTaken, yourNewUserId) {\n            this.rtcmConnection.userid = yourNewUserId\n        },\n\n        // rtc action methods\n        initMediaAndRtcmConnection() {\n            if (!this.rtcmConnection) {\n                this.rtcmConnection = new RTCMultiConnection()\n\n                this.rtcmConnection.socketURL = window.atob(this.socketURL)\n                if (this.configs.signalServers && this.configs.signalServers.url) {\n                    this.rtcmConnection.socketURL = this.configs.signalServers.url\n                }\n\n                this.rtcmConnection.autoCreateMediaElement = false\n                // this.rtcmConnection.autoCloseEntireSession = true // set this line to close room as soon as room creator leaves\n\n                if (this.configs.meeting) {\n                    if (this.configs.meeting.debugMode) {\n                        this.rtcmConnection.enableLogs = true\n                    } else {\n                        this.rtcmConnection.enableLogs = true\n                    }\n\n                    if (this.configs.meeting.forceTurn) {\n                        this.rtcmConnection.candidates = {\n                            turn: true,\n                            stun: false,\n                            host: false\n                        }\n                    }\n                }\n\n\n                this.rtcmConnection.onopen = this.rtcmOnOpen\n                this.rtcmConnection.onclose = this.rtcmOnClose\n                this.rtcmConnection.onleave = this.rtcmOnLeave\n                this.rtcmConnection.onmessage = this.rtcmOnMessage\n                // this.rtcmConnection.onNewParticipant = this.rtcmOnNewParticipant\n                // this.rtcmConnection.onReadyForOffer = this.rtcmOnReadyForOffer\n                this.rtcmConnection.onUserStatusChanged = this.rtcmOnUserStatusChanged\n                this.rtcmConnection.onstream = this.rtcmOnStream\n                this.rtcmConnection.onstreamended = this.rtcmOnStreamEnded\n                this.rtcmConnection.onmute = this.rtcmOnMute\n                this.rtcmConnection.onunmute = this.rtcmOnUnmute\n                this.rtcmConnection.onMediaError = this.rtcmOnMediaError\n                this.rtcmConnection.onerror = this.rtcmOnError\n                this.rtcmConnection.onUserIdAlreadyTaken = this.rtcmOnUserIdAlreadyTaken\n\n                if (this.pageConfigs.speechDetection) {\n                    this.rtcmConnection.onspeaking = this.rtcmOnSpeaking\n                    this.rtcmConnection.onsilence = this.rtcmOnSilence\n                    this.rtcmConnection.onvolumechange = this.rtcmOnVolumeChange\n                    window.onSilenceTimeoutObj = {}\n                }\n\n                this.rtcmConnection.setCustomSocketEvent('Whisper')\n\n                this.fileSharingConnection = this.rtcmConnection\n            }\n\n\n            this.getMediaConstraints()\n\n            //Bandwidth and bitrate setup\n            const BandwidthHandler = this.rtcmConnection.BandwidthHandler\n\n            this.rtcmConnection.bandwidth = {\n                audio: this.mediaConfigurations.bandwidth.audio === 'auto' ? false : this.mediaConfigurations.bandwidth.audio,\n                video: this.mediaConfigurations.bandwidth.video === 'auto' ? false : this.mediaConfigurations.bandwidth.video,\n                screen: this.mediaConfigurations.bandwidth.screen === 'auto' ? false : this.mediaConfigurations.bandwidth.screen,\n            }\n\n            // this.rtcmConnection.processSdp = (sdp) => {\n            //     if (this.rtcmConnection.DetectRTC.browser.name === 'Safari') {\n            //         return sdp\n            //     }\n\n            //     if (this.rtcmConnection.codecs.video.toUpperCase() === 'VP8') {\n            //         sdp = BandwidthHandler.preferCodec(sdp, 'vp8')\n            //     }\n\n            //     if (this.rtcmConnection.codecs.video.toUpperCase() === 'VP9') {\n            //         sdp = BandwidthHandler.preferCodec(sdp, 'vp9')\n            //     }\n\n            //     if (this.rtcmConnection.codecs.video.toUpperCase() === 'H264') {\n            //         sdp = BandwidthHandler.preferCodec(sdp, 'h264')\n            //     }\n\n            //     if (this.rtcmConnection.codecs.audio === 'G722') {\n            //         sdp = BandwidthHandler.removeNonG722(sdp)\n            //     }\n\n            //     if (this.rtcmConnection.DetectRTC.browser.name === 'Firefox') {\n            //         return sdp\n            //     }\n\n            //     if (this.rtcmConnection.bandwidth.video || this.rtcmConnection.bandwidth.screen) {\n            //         sdp = BandwidthHandler.setApplicationSpecificBandwidth(sdp, this.rtcmConnection.bandwidth, !!this.rtcmConnection.session.screen)\n            //     }\n\n            //     if (this.rtcmConnection.bandwidth.video) {\n            //         sdp = BandwidthHandler.setVideoBitrates(sdp, {\n            //             min: this.mediaConfigurations.bandwidth.videoMin * 8 * 1024,\n            //             max: this.rtcmConnection.bandwidth.video * 8 * 1024\n            //         })\n            //     }\n\n            //     if (this.rtcmConnection.bandwidth.audio) {\n            //         sdp = BandwidthHandler.setOpusAttributes(sdp, {\n            //             maxaveragebitrate: this.rtcmConnection.bandwidth.audio * 8 * 1024,\n            //             maxplaybackrate: this.rtcmConnection.bandwidth.audio * 8 * 1024,\n            //             stereo: 1,\n            //             maxptime: 3\n            //         })\n            //     }\n\n            //     return sdp\n            // }\n\n            this.rtcmConnection.iceServers = [\n                {\n                    urls: [\n                        \"stun.l.google.com:19302\",\n                        \"stun1.l.google.com:19302\",\n                        \"stun2.l.google.com:19302\",\n                        \"stun3.l.google.com:19302\",\n                        \"stun4.l.google.com:19302\"\n                    ]\n                }\n            ]\n\n            if (this.pageConfigs.maxParticipantCount) {\n                this.rtcmConnection.maxParticipantsAllowed = this.pageConfigs.maxParticipantCount\n            }\n\n            if (this.configs.iceServers.length) {\n                this.rtcmConnection.iceServers = [...this.configs.iceServers]\n            }\n\n            this.rtcmConnection.session = {\n                ...this.meetingRulesHost.session\n            }\n\n            this.rtcmConnection.sdpConstraints.mandatory = {\n                ...this.meetingRulesHost.mandatory\n            }\n\n            this.rtcmConnection.mediaConstraints = {\n                video: this.meetingRulesHost.mediaConstraints.video ? this.videoConstraints : false,\n                audio: this.meetingRulesHost.mediaConstraints.audio ? this.audioConstraints : false,\n                screen: this.meetingRulesHost.mediaConstraints.screen,\n            }\n        },\n        initSocketListener() {\n            if (!(this.rtcmConnection && this.rtcmConnection.socket)) {\n                return\n            }\n\n            const callbackList = {\n                'removedStream': this.streamRemoved,\n                'banAttendee': this.banAttendee,\n                'muteUnmuteRemote': this.rtcmOnMuteUnmuteRemote,\n                'remoteMutedUnmuted': this.rtcmOnRemoteMuteUnmuted,\n                'remoteHandToggled': this.rtcmOnRemoteHandToggled,\n                'meetingEnded': this.meetingEnded,\n                'snapshotTaken': this.rtcmOnSnapshotTaken,\n                'meetingUpdated': this.rtcmOnMeetingUpdated,\n            }\n\n            this.rtcmConnection.socket.on('Whisper', (e) => {\n                if (e && callbackList.hasOwnProperty(e.event)) {\n                    callbackList[e.event](e.data)\n                }\n            })\n        },\n        initCanvasDesigner() {\n            // here goes canvas designer\n            this.canvasDesigner = new CanvasDesigner()\n\n            // you can place widget.html anywhere\n            this.canvasDesigner.widgetHtmlURL = '/js/canvas-designer/widget.html'\n            this.canvasDesigner.widgetJsURL = '/js/canvas-designer/widget.min.js'\n        },\n        initWhiteboard() {\n            if (this.videoList.length < 1 || !this.$refs.whiteboard || !CanvasDesigner) {\n                return\n            }\n\n            if (!this.canvasDesigner) {\n                this.initCanvasDesigner()\n            }\n\n            this.canvasDesigner.addSyncListener((data) => {\n                this.rtcmConnection.send(data)\n            })\n\n            this.canvasDesigner.setSelected('pencil')\n\n            this.canvasDesigner.setTools({\n                pencil: true,\n                text: true,\n                image: true,\n                pdf: true,\n                eraser: true,\n                line: true,\n                arrow: true,\n                dragSingle: true,\n                dragMultiple: true,\n                arc: true,\n                rectangle: true,\n                quadratic: true,\n                bezier: false,\n                marker: true,\n                zoom: false,\n                lineWidth: true,\n                colorsPicker: true,\n                extraOptions: true,\n                code: false,\n                undo: true\n            })\n            if (!this.canvasDesigner.iframe) {\n                this.canvasDesigner.appendTo(this.$refs.whiteboard, () => {\n\n                    this.rtcmConnection.extra.hasWhiteboard = true\n                    this.updateExtraData()\n\n                    this.canvasDesigner.captureStream((stream) => {\n                        this.rtcmConnection.addStream(stream)\n                        this.rtcmConnection.onstream({\n                            streamid: stream.id,\n                            stream: stream,\n                            userid: this.rtcmConnection.userid,\n                            type: 'local',\n                            extra: this.rtcmConnection.extra,\n                        })\n                    })\n                })\n            }\n        },\n        updateExtraData() {\n            if (this.rtcmConnection && this.rtcmConnection.socket) {\n                this.rtcmConnection.updateExtraData()\n            }\n        },\n        destroyWhiteboard() {\n            if (this.canvasDesigner) {\n                this.canvasDesigner.destroy()\n                this.canvasDesigner = null\n\n                let found = this.$refs.videos.find(video => {\n                    return video.id === this.localWhiteboardStreamid\n                })\n\n                if (found && found.srcObject) {\n                    if (this.rtcmConnection && this.localWhiteboardStreamid) {\n                        this.rtcmConnection.removeStream(this.localWhiteboardStreamid)\n                        this.rtcmOnStreamEnded({ id: this.localWhiteboardStreamid })\n                        if (this.videoList.length > 1) {\n                            this.recheckLiveParticipants({ streamid: this.localWhiteboardStreamid })\n                        }\n                        this.autoSetVideoMaximized()\n                    }\n\n                    this.emitSocketEvents('removedStream', found.srcObject)\n\n                    // this.videoList = this.videoList.filter(video => video.id !== this.localScreenStreamid)\n                    this.localWhiteboardStreamid = null\n                } else {\n                    this.localWhiteboardStreamid = null\n                }\n            }\n\n            this.rtcmConnection.extra.hasWhiteboard = false\n            this.updateExtraData()\n        },\n        hideAndDestroyWhiteboard() {\n            formUtil.confirmAction()\n                .then((result) => {\n                    if (result.value) {\n                        this.pageConfigs.layout = this.pageConfigs.lastLayout\n                        this.showWhiteboard = false\n                        this.destroyWhiteboard()\n                    } else {\n                        result.dismiss === Swal.DismissReason.cancel\n                    }\n                })\n        },\n        getMediaConstraints(setDefaults = false) {\n            this.needStreamAddOrReplace = false\n\n            if (setDefaults) {\n                this.audioConstraints = {\n                    \"sampleSize\": 16,\n                    \"channelCount\": 2,\n                    \"echoCancellation\": false,\n                }\n                this.videoConstraints = {\n                    width: { min: 426, ideal: 1280, max: 4096 },\n                    height: { min: 240, ideal: 720, max: 2160 },\n                }\n                return\n            }\n\n            if (this.pageConfigs.enableAudio) {\n                if (this.mediaConfigurations.selectedAudioInput && this.mediaConfigurations.selectedAudioInput.uuid && this.mediaConfigurations.selectedAudioInput.uuid !== 'auto') {\n                    this.audioConstraints = {\n                        deviceId: { ideal: this.mediaConfigurations.selectedAudioInput.uuid }\n                    }\n\n                    if (this.audioConstraints.hasOwnProperty('deviceId') && this.mediaConfigurations.activeAudioInput !== this.audioConstraints.deviceId.ideal) {\n                        this.needStreamAddOrReplace = true\n                    }\n                } else {\n                    this.audioConstraints = true\n                }\n            } else {\n                this.audioConstraints = false\n            }\n\n            if (this.pageConfigs.enableVideo) {\n                if (this.mediaConfigurations.selectedVideoInput && this.mediaConfigurations.selectedVideoInput.uuid && this.mediaConfigurations.selectedVideoInput.uuid !== 'auto') {\n                    this.videoConstraints = {\n                        deviceId: { ideal: this.mediaConfigurations.selectedVideoInput.uuid }\n                    }\n\n                    if (this.videoConstraints.hasOwnProperty('deviceId') && this.mediaConfigurations.activeVideoInput !== this.videoConstraints.deviceId.ideal) {\n                        this.needStreamAddOrReplace = true\n                    }\n                } else {\n                    delete this.videoConstraints.deviceId\n                }\n\n                if (this.mediaConfigurations.facingMode !== 'auto') {\n                    this.videoConstraints.facingMode = this.mediaConfigurations.facingMode\n\n                    if (this.mediaConfigurations.activeFacingMode !== this.videoConstraints.facingMode) {\n                        this.needStreamAddOrReplace = true\n                    }\n                } else {\n                    if (this.videoConstraints.hasOwnProperty('facingMode')) {\n                        if (this.mediaConfigurations.activeFacingMode !== this.videoConstraints.facingMode) {\n                            this.needStreamAddOrReplace = true\n                        }\n                        delete this.videoConstraints.facingMode\n                    }\n                }\n\n                if (this.mediaConfigurations.frameRate !== 'auto') {\n                    this.videoConstraints.frameRate = this.mediaConfigurations.frameRate\n                } else {\n                    if (this.videoConstraints.hasOwnProperty('frameRate')) {\n                        delete this.videoConstraints.frameRate\n                    }\n                }\n\n                let selectedResolution = this.mediaDevices.resolutions.find(r => r.label === this.mediaConfigurations.selectedResolution)\n\n                if (selectedResolution && selectedResolution.label !== 'Auto') {\n                    this.videoConstraints.width = selectedResolution.constraints.width\n                    this.videoConstraints.height = selectedResolution.constraints.height\n                } else {\n                    if (this.videoConstraints.hasOwnProperty('width')) {\n                        delete this.videoConstraints.width\n                    }\n                    if (this.videoConstraints.hasOwnProperty('height')) {\n                        delete this.videoConstraints.height\n                    }\n                }\n\n            } else {\n                this.videoConstraints = false\n            }\n        },\n        applyMediaConstraints(setDefaults = false) {\n            if (!(this.rtcmConnection && this.localVideo)) {\n                return\n            }\n\n            this.getMediaConstraints(setDefaults)\n\n            this.rtcmConnection.mediaConstraints = {\n                video: this.meetingRulesHost.mediaConstraints.video ? this.videoConstraints : false,\n                audio: this.meetingRulesHost.mediaConstraints.audio ? this.audioConstraints : false,\n                screen: this.meetingRulesHost.mediaConstraints.screen,\n            }\n\n            this.rtcmConnection.bandwidth = {\n                audio: this.mediaConfigurations.bandwidth.audio === 'auto' ? false : this.mediaConfigurations.bandwidth.audio,\n                video: this.mediaConfigurations.bandwidth.video === 'auto' ? false : this.mediaConfigurations.bandwidth.video,\n                screen: this.mediaConfigurations.bandwidth.screen === 'auto' ? false : this.mediaConfigurations.bandwidth.screen,\n            }\n\n            this.mediaConfigurations.activeAudioInput = this.audioConstraints && this.audioConstraints.hasOwnProperty('deviceId') ? this.audioConstraints.deviceId.ideal : null\n            this.mediaConfigurations.activeVideoInput = this.videoConstraints && this.videoConstraints.hasOwnProperty('deviceId') ? this.videoConstraints.deviceId.ideal : null\n            this.mediaConfigurations.activeFacingMode = this.mediaConfigurations.facingMode\n\n            if (!this.needStreamAddOrReplace) {\n                this.rtcmConnection.applyConstraints(this.rtcmConnection.mediaConstraints)\n                return\n            }\n\n            this.closeConnectionAndStream(true)\n        },\n        closeConnectionAndStream(reopen = false, callbackFn) {\n            this.stopAutoEndMeeting()\n\n            if (this.autoEndingToast && _.isEmpty(this.autoEndingToast)) {\n                swtToast.close()\n                this.autoEndingToast = null\n            }\n\n            if (this.rtcmConnection) {\n                try {\n                    this.destroyWhiteboard()\n\n                    this.rtcmConnection.attachStreams.forEach((localStream) => {\n                        localStream.stop()\n                    })\n\n                    if (this.$refs.greenRoomVideo && this.$refs.greenRoomVideo.srcObject) {\n                        const stream = this.$refs.greenRoomVideo.srcObject\n                        stream.stop()\n                        this.localGreenRoomStream = null\n                    } else if (this.localGreenRoomStream) {\n                        const stream = this.localGreenRoomStream\n                        stream.stop()\n                        this.localGreenRoomStream = null\n                    }\n\n\n                    if (this.localVideo) {\n                        // this.rtcmConnection.removeStream(this.localVideo.id)\n\n                        this.emitSocketEvents('removedStream', this.localVideo)\n                    }\n\n                    this.rtcmConnection.getAllParticipants()\n                        .forEach((pid) => {\n                            this.rtcmConnection.disconnectWith(pid)\n                        })\n\n                    this.rtcmConnection.leave()\n                    this.rtcmConnection.closeSocket()\n\n                    window.setTimeout(() => {\n                        this.localVideo = null\n                        this.localScreenStreamid = null\n                        this.localWhiteboardStreamid = null\n                        this.localGreenRoomStream = null\n                        if (this.rtcmConnection) {\n                            this.rtcmConnection.recorder = null\n                        }\n                        this.rtcmConnection = null\n\n                        if (reopen) {\n                            this.getOnline()\n                        }\n                        if (callbackFn && _.isFunction(callbackFn)) {\n                            callbackFn()\n                        }\n                    }, 500)\n\n                    this.stopKeepAlivePolling()\n                    this.stopAutoEndMeeting()\n                } catch (e) { }\n            }\n            this.videoList = []\n        },\n        initHark(args) {\n            if (!window.hark || !this.pageConfigs.speechDetection) {\n                return\n            }\n\n            let streamedObject = args.streamedObject\n            let stream = args.stream\n            let connection = args.connection\n\n            let options = {}\n            let speechEvents = hark(stream, options)\n\n            speechEvents.on('speaking', function () {\n                // console.log('speaking')\n                connection.onspeaking(streamedObject)\n            })\n\n            speechEvents.on('stopped_speaking', function () {\n                // console.log('silence')\n                connection.onsilence(streamedObject);\n            })\n\n            // speechEvents.on('volume_change', function(volume, threshold) {\n            //     streamedObject.volume = volume\n            //     streamedObject.threshold = threshold\n            // connection.onvolumechange(streamedObject)\n            // })\n\n            window.harkInitiated = true\n            // console.log('hark initiated - ', streamedObject.extra.name)\n        },\n        recheckLiveParticipants(stream) {\n            let newList = []\n            const liveParticipants = this.rtcmConnection ? this.rtcmConnection.getAllParticipants() : []\n\n            this.videoList.forEach((item, index) => {\n                const userIndex = liveParticipants.findIndex(m => m === item.streamUserId)\n                if ((!stream || (stream && item.id !== stream.streamid)) && (item.local || (!item.local && userIndex !== -1))) {\n                    newList.push(item)\n                } else {\n                    item.status = false\n                    newList.push(item)\n                }\n            })\n\n            this.videoList = newList\n\n            setTimeout(() => {\n                this.videoList = this.videoList.filter(v => v.status)\n                this.autoSetVideoMaximized()\n            }, 3000)\n        },\n        autoSetVideoMaximized() {\n            const setMaximized = (maximizedIndex) => {\n                this.videoList[maximizedIndex].maximized = true\n                this.videoList = this.videoList.map((v, index) => {\n                    v.maximized = false\n                    if (index === maximizedIndex) {\n                        v.maximized = true\n                    }\n                    return v\n                })\n            }\n\n            if (this.videoList.length > 1) {\n                const maximizedRemoteVideoIndex = this.videoList.findIndex(v => !v.local && v.maximized && v.status)\n                if (maximizedRemoteVideoIndex === -1) {\n                    const remoteVideoIndex = this.videoList.findIndex(v => !v.local && v.hasStream)\n                    if (remoteVideoIndex !== -1) {\n                        setMaximized(remoteVideoIndex)\n                    } else {\n                        setMaximized(0)\n                    }\n                } else {\n                    const whiteboardRemoteVideoIndex = this.videoList.findIndex(v => !v.local && v.whiteboard && v.status)\n                    if (whiteboardRemoteVideoIndex !== -1 && this.videoList[whiteboardRemoteVideoIndex].whiteboard) {\n                        setMaximized(whiteboardRemoteVideoIndex)\n                    }\n                }\n            } else if (this.videoList.length) {\n                setMaximized(0)\n            }\n        },\n        validateMediaDeviceRequest(mediaConstraints) {\n            let deviceRequest = {\n                video: mediaConstraints.video ? true : false,\n                audio: mediaConstraints.audio ? true : false,\n                screen: mediaConstraints.screen ? true : false,\n            }\n\n            if (this.pageConfigs.allowJoiningWithoutDevices) {\n                if (deviceRequest.audio && !(this.mediaDevices.audioInput && this.mediaDevices.audioInput.length)) {\n                    deviceRequest.audio = false\n                }\n\n                if (deviceRequest.video && !(this.mediaDevices.videoInput && this.mediaDevices.videoInput.length)) {\n                    deviceRequest.video = false\n                }\n            }\n\n            return deviceRequest\n        },\n        joinRoom(meetingRoomId) {\n            this.rtcmConnection.session = {\n                ...this.meetingRulesGuest.session\n            }\n\n            this.videoList = []\n\n            this.getMediaConstraints()\n\n            const activeMeetingRules = this.entity.canModerate ? this.meetingRulesHost : this.meetingRulesGuest\n\n            const deviceRequest = this.validateMediaDeviceRequest(activeMeetingRules.mediaConstraints)\n\n            this.rtcmConnection.mediaConstraints = {\n                video: deviceRequest.video ? this.videoConstraints : false,\n                audio: deviceRequest.audio ? this.audioConstraints : false,\n                screen: deviceRequest.screen,\n            }\n\n            if (this.pageConfigs.allowJoiningWithoutDevices && !deviceRequest.audio && !deviceRequest.video && !deviceRequest.screen) {\n                this.rtcmConnection.dontCaptureUserMedia = true\n            }\n\n            this.rtcmConnection.sdpConstraints.mandatory = {\n                ...activeMeetingRules.mandatory\n            }\n\n            this.rtcmConnection.autoCloseEntireSession = activeMeetingRules.autoCloseEntireSession\n            this.rtcmConnection.enableScalableBroadcast = activeMeetingRules.enableScalableBroadcast\n            if (this.rtcmConnection.enableScalableBroadcast) {\n                this.rtcmConnection.maxRelayLimitPerUser = activeMeetingRules.maxRelayLimitPerUser\n            }\n            this.rtcmConnection.extra.isInitiator = this.entity.canModerate\n\n            // console.log('mediaConstraints')\n            // console.log(this.rtcmConnection.mediaConstraints)\n\n            // console.log('sdpConstraints')\n            // console.log(this.rtcmConnection.sdpConstraints)\n\n            this.rtcmConnection.join(meetingRoomId, (isJoined, roomid, error) => {\n                this.isLoading = false\n\n                if (isJoined === false || error) {\n                    this.closeConnectionAndStream()\n                    if (error === 'Room full') {\n                        this.$toasted.error($t('meeting.room_full'), this.$toastConfig.error)\n                    } else {\n                        this.$toasted.error($t('meeting.unable_to_join'), this.$toastConfig.error)\n                    }\n                } else {\n                    this.meetingRoomNotFound = false\n                    this.updatePageConfigs(this.entity.canModerate)\n\n                    this.initSocketListener()\n\n                    this.$toasted.success($t('meeting.meeting_joined'), this.$toastConfig)\n\n                    // setTimeout(() => {\n                    //     this.updateUsername()\n                    // }, 2000)\n                }\n            })\n        },\n        applyOnStartConfigs() {\n            if (!this.rtcmConnection.extra.isInitiator && this.pageConfigs.muteParticipantsOnStart) {\n                window.setTimeout(() => {\n                    this.toggleAudio(null, true)\n                }, 1000)\n            }\n        },\n        shareScreen() {\n            try {\n                this.rtcmConnection.addStream({\n                    screen: true,\n                    streamCallback: (stream) => {\n                        this.rtcmConnection.extra.screenStreamId = stream.id\n                        this.updateExtraData()\n                    }\n                })\n            } catch (e) {\n            }\n        },\n        stopSharingScreen() {\n            this.isLoading = true\n            this.rtcmConnection.extra.screenStreamId = null\n            this.updateExtraData()\n\n            let found = this.$refs.videos.find(video => {\n                return video.id === this.localScreenStreamid\n            })\n\n            if (found && found.srcObject) {\n                let tracks = found.srcObject.getTracks()\n                tracks.forEach(track => {\n                    track.removeEventListener('ended', this.stopSharingScreen)\n                    track.enabled = false\n                    track.stop()\n                })\n                this.rtcmConnection.removeStream(this.localScreenStreamid)\n                this.emitSocketEvents('removedStream', found.srcObject)\n\n                // this.videoList = this.videoList.filter(video => video.id !== this.localScreenStreamid)\n                this.localScreenStreamid = null\n                this.isLoading = false\n            } else {\n                this.localScreenStreamid = null\n                this.isLoading = false\n            }\n        },\n        getOnline() {\n            this.isLoading = true\n            this.showAgenda = false\n            const meetingStatusEalier = this.entity.status\n\n            this.$gaEvent('engagement', 'meeting_getOnline')\n\n            this.initMediaAndRtcmConnection()\n\n            this.Custom({\n                url: `/${this.initUrl}/${this.uuid}/join`,\n                method: 'post',\n            })\n                .then(response => {\n                    this.meetingRoomId = response.meeting.roomId\n                    response.meeting = this.updateMeetingTimezone(response.meeting)\n                    this.entity = response.meeting\n                    this.rtcmConnection.extra = {\n                        username: this.user.username,\n                        name: this.user.name,\n                        uuid: this.user.uuid,\n                        avatar: this.profile.avatar,\n                        cover: this.profile.cover,\n                        audioMuted: !this.pageConfigs.enableAudio,\n                        videoMuted: !this.pageConfigs.enableVideo,\n                        isHandUp: this.isHandUp,\n                        isInitiator: false,\n                    }\n\n                    if (this.enableLogs) {\n                        console.log('rtcmConnection', this.rtcmConnection)\n                        console.log('mediaConfigurations', this.mediaConfigurations)\n                        console.log('mediaDevices', this.mediaDevices)\n                        console.log('pageConfigs', this.pageConfigs)\n                        console.log('videoConstraints', this.videoConstraints)\n                        console.log('audioConstraints', this.audioConstraints)\n                        console.log('meetingRulesHost', this.meetingRulesHost)\n                        console.log('meetingRulesGuest', this.meetingRulesGuest)\n                        console.log('rtcmConnection-ExtraData', this.rtcmConnection.extra)\n                    }\n\n                    this.rtcmConnection.checkPresence(this.meetingRoomId, (isRoomExist, roomid) => {\n                        if (isRoomExist === true) {\n                            this.meetingRoomNotFound = false\n                            this.joinRoom(this.meetingRoomId)\n                        } else {\n                            this.isLoading = false\n                            this.meetingRoomNotFound = true\n                            this.$toasted.error($t('meeting.room_not_found'), this.$toastConfig.error)\n                        }\n\n                        this.startMeetingTimer()\n                    })\n                })\n                .catch(error => {\n                    this.isLoading = false\n                    formUtil.handleErrors(error)\n                })\n        },\n        getOffline() {\n            this.$gaEvent('engagement', 'meeting_getOffline')\n\n            let alert = 'confirm'\n\n            this.isLoading = true\n            this.meetingAction('leave', null, {\n                alert,\n                sameCallbackIfError: true,\n                callback: (e) => {\n                    this.showAgenda = true\n                    this.showWhiteboard = false\n                    if (this.pageConfigs.layout === 'presentation') {\n                        this.pageConfigs.layout = this.pageConfigs.lastLayout\n                    }\n                    this.closeConnectionAndStream(false, () => {\n                        this.stopMeetingTimer()\n                        this.setupGreenRoom()\n                        this.initMediaAndRtcmConnection()\n                    })\n                }\n            })\n        },\n\n        // meeting action methods\n        meetingAction(action, data = {}, opts = { alert: 'confirm' }) {\n            const defaultOpts = { alert: 'confirm' }\n            opts = Object.assign({}, defaultOpts, opts)\n\n            const callApi = (dataToSend) => {\n                this.isLoading = true\n                data = dataToSend ? dataToSend : data\n\n                this.Custom({\n                    url: `/${this.initUrl}/${this.uuid}/${action}`,\n                    method: 'post',\n                    data\n                })\n                    .then(response => {\n                        response.meeting = this.updateMeetingTimezone(response.meeting)\n                        this.entity = response.meeting\n                        this.$toasted.success(response.message, this.$toastConfig)\n                        if (opts.callback) {\n                            opts.callback(response)\n                        }\n                        this.isLoading = false\n                    })\n                    .catch(error => {\n                        if (opts.callback && opts.sameCallbackIfError) {\n                            opts.callback(error)\n                        }\n                        this.isLoading = false\n                        formUtil.handleErrors(error)\n                    })\n            }\n\n            if (!action) {\n                this.isLoading = false\n                return\n            }\n\n            if (opts.alert === 'confirm' || opts.alert === true) {\n                formUtil.confirmAction()\n                    .then((result) => {\n                        if (result.value) {\n                            callApi()\n                        } else {\n                            this.isLoading = false\n                            result.dismiss === Swal.DismissReason.cancel\n                        }\n                    })\n            } else if (opts.alert === 'input') {\n                swtAlert.fire({\n                    title: opts.title,\n                    input: 'text',\n                    inputPlaceholder: opts.inputPlaceholder,\n                    showCancelButton: true,\n                    confirmButtonText: 'Proceed!',\n                    cancelButtonText: 'Go Back!'\n                })\n                    .then((result) => {\n                        if (result.value) {\n                            let toSend = {}\n                            toSend[opts.fieldName] = result.value\n                            callApi(toSend)\n                        } else {\n                            this.isLoading = false\n                            result.dismiss === Swal.DismissReason.cancel\n                        }\n                    })\n            } else {\n                callApi()\n            }\n        },\n\n\n        // meeting related methods\n        updateMeetingRules() {\n            if (this.entity.type.uuid === 'video_conference') {\n                this.meetingRulesHost = {\n                    session: {\n                        audio: true,\n                        video: true,\n                        screen: false,\n                        data: true,\n                        oneway: false,\n                    },\n                    mediaConstraints: {\n                        audio: true,\n                        video: true,\n                        screen: false,\n                    },\n                    mandatory: {\n                        OfferToReceiveAudio: true,\n                        OfferToReceiveVideo: true,\n                    },\n                    autoCloseEntireSession: false,\n                    enableScalableBroadcast: false,\n                }\n                this.meetingRulesGuest = {\n                    session: {\n                        audio: true,\n                        video: true,\n                        screen: false,\n                        data: true,\n                        oneway: false,\n                    },\n                    mediaConstraints: {\n                        audio: true,\n                        video: true,\n                        screen: false,\n                    },\n                    mandatory: {\n                        OfferToReceiveAudio: true,\n                        OfferToReceiveVideo: true,\n                    },\n                    autoCloseEntireSession: false,\n                    enableScalableBroadcast: false,\n                }\n            } else if (this.entity.type.uuid === 'audio_conference') {\n                this.meetingRulesHost = {\n                    session: {\n                        audio: true,\n                        video: false,\n                        screen: false,\n                        data: true,\n                        oneway: false,\n                    },\n                    mediaConstraints: {\n                        audio: true,\n                        video: false,\n                        screen: false,\n                    },\n                    mandatory: {\n                        OfferToReceiveAudio: true,\n                        OfferToReceiveVideo: false,\n                    },\n                    autoCloseEntireSession: false,\n                    enableScalableBroadcast: false,\n                }\n                this.meetingRulesGuest = {\n                    session: {\n                        audio: true,\n                        video: false,\n                        screen: false,\n                        data: true,\n                        oneway: false,\n                    },\n                    mediaConstraints: {\n                        audio: true,\n                        video: false,\n                        screen: false,\n                    },\n                    mandatory: {\n                        OfferToReceiveAudio: true,\n                        OfferToReceiveVideo: false,\n                    },\n                    autoCloseEntireSession: false,\n                    enableScalableBroadcast: false,\n                }\n            } else if (this.entity.type.uuid === 'webinar') {\n                this.meetingRulesHost = {\n                    session: {\n                        audio: true,\n                        video: true,\n                        screen: false,\n                        data: true,\n                        oneway: true,\n                    },\n                    mediaConstraints: {\n                        audio: true,\n                        video: true,\n                        screen: false,\n                    },\n                    mandatory: {\n                        OfferToReceiveAudio: false,\n                        OfferToReceiveVideo: false,\n                    },\n                    autoCloseEntireSession: true,\n                    enableScalableBroadcast: true,\n                    maxRelayLimitPerUser: 1,\n                }\n                this.meetingRulesGuest = {\n                    session: {\n                        audio: true,\n                        video: true,\n                        screen: false,\n                        data: true,\n                        oneway: true,\n                    },\n                    mediaConstraints: {\n                        audio: false,\n                        video: false,\n                        screen: false,\n                    },\n                    mandatory: {\n                        OfferToReceiveAudio: true,\n                        OfferToReceiveVideo: true,\n                    },\n                    autoCloseEntireSession: true,\n                    enableScalableBroadcast: true,\n                    maxRelayLimitPerUser: 1,\n                }\n            } else if (this.entity.type.uuid === 'live_class') {\n                this.meetingRulesHost = {\n                    session: {\n                        audio: true,\n                        video: true,\n                        screen: false,\n                        data: true,\n                        oneway: false,\n                    },\n                    mediaConstraints: {\n                        audio: true,\n                        video: true,\n                        screen: false,\n                    },\n                    mandatory: {\n                        OfferToReceiveAudio: true,\n                        OfferToReceiveVideo: true,\n                    },\n                    autoCloseEntireSession: true,\n                    enableScalableBroadcast: false,\n                }\n                this.meetingRulesGuest = {\n                    session: {\n                        audio: true,\n                        video: true,\n                        screen: false,\n                        data: true,\n                        oneway: false,\n                    },\n                    mediaConstraints: {\n                        audio: true,\n                        video: true,\n                        screen: false,\n                    },\n                    mandatory: {\n                        OfferToReceiveAudio: true,\n                        OfferToReceiveVideo: true,\n                    },\n                    autoCloseEntireSession: true,\n                    enableScalableBroadcast: false,\n                }\n            } else if (this.entity.type.uuid === 'podcast') {\n                this.meetingRulesHost = {\n                    session: {\n                        audio: true,\n                        video: false,\n                        screen: false,\n                        data: false,\n                        oneway: true,\n                    },\n                    mediaConstraints: {\n                        audio: true,\n                        video: false,\n                        screen: false,\n                    },\n                    mandatory: {\n                        OfferToReceiveAudio: false,\n                        OfferToReceiveVideo: false,\n                    },\n                    autoCloseEntireSession: true,\n                    enableScalableBroadcast: true,\n                    maxRelayLimitPerUser: 1,\n                }\n                this.meetingRulesGuest = {\n                    session: {\n                        audio: true,\n                        video: false,\n                        screen: false,\n                        data: false,\n                        oneway: true,\n                    },\n                    mediaConstraints: {\n                        audio: false,\n                        video: false,\n                        screen: false,\n                    },\n                    mandatory: {\n                        OfferToReceiveAudio: true,\n                        OfferToReceiveVideo: false,\n                    },\n                    autoCloseEntireSession: true,\n                    enableScalableBroadcast: true,\n                    maxRelayLimitPerUser: 1,\n                }\n            }\n        },\n        updateMeetingTimezone(meetingEntity) {\n            const getTimezoneDateTime = (dt) => {\n                return MomentTz.momentDateTimeTz(dt, this.vars.serverDateTimeFormat)\n            }\n\n            this.updateEntityBackup(meetingEntity)\n            meetingEntity.startDateTime = getTimezoneDateTime(meetingEntity.startDateTime)\n            if (meetingEntity.plannedStartDateTime) {\n                meetingEntity.plannedStartDateTime = getTimezoneDateTime(meetingEntity.plannedStartDateTime)\n            }\n            if (meetingEntity.startedAt) {\n                meetingEntity.startedAt = getTimezoneDateTime(meetingEntity.startedAt)\n            }\n            if (meetingEntity.estimatedEndTime) {\n                meetingEntity.estimatedEndTime = getTimezoneDateTime(meetingEntity.estimatedEndTime)\n            }\n            return meetingEntity\n        },\n\n\n        // event callback methods\n        beforeUnload(event) {\n            if (this.localVideo) {\n                this.emitSocketEvents('removedStream', this.localVideo)\n            }\n        },\n        logEvent(msg, args, type = 'log') {\n            if (this.enableLogs) {\n                if (type === 'log') {\n                    console.log(msg, args)\n                } else if (type === 'error') {\n                    console.error(msg, args)\n                } else if (type === 'debug') {\n                    console.trace(msg, args)\n                }\n            }\n        },\n\n        // devices modal methods\n        toggleDevicesModal() {\n            this.mediaConfigFormData = _.cloneDeep(this.mediaConfigurations)\n            this.showDevicesModal = true\n        },\n        onDevicesModalOK(e) {\n            e.preventDefault()\n\n            if (!areEqual(this.mediaConfigFormData, this.mediaConfigurations)) {\n                this.mediaConfigurations = _.cloneDeep(this.mediaConfigFormData)\n                this.applyMediaConstraints()\n            }\n\n            this.$nextTick(() => {\n                this.$bvModal.hide('devicesModal')\n            })\n        },\n        onDevicesModalCancel(e) {\n            e.preventDefault()\n            this.$nextTick(() => {\n                this.$bvModal.hide('devicesModal')\n            })\n        },\n\n\n        // page methods\n        updatePageConfigs(isInitiator = false) {\n            const configAudioRecFormat = this.configs.meeting.recordingFormatAudio ? this.configs.meeting.recordingFormatAudio : 'audio/webm'\n            const configVideoRecFormat = this.configs.meeting.recordingFormatVideo ? this.configs.meeting.recordingFormatVideo : 'video/webm'\n\n            let configOptions = {}\n            let recordingType = this.mediaConfigurations.recording.type\n            let recordingFormat = this.mediaConfigurations.recording.mimeType\n\n            if (this.entity.type.uuid === 'video_conference') {\n                configOptions = {\n                    enableAudio: true,\n                    enableVideo: true,\n                    showEnableAudioBtn: true,\n                    showEnableVideoBtn: true,\n                    enableWhiteboard: true,\n                }\n                recordingType = 'video'\n                recordingFormat = configVideoRecFormat\n            } else if (this.entity.type.uuid === 'audio_conference') {\n                configOptions = {\n                    enableAudio: true,\n                    enableVideo: true,\n                    showEnableAudioBtn: true,\n                    showEnableVideoBtn: false,\n                    enableScreenSharing: false,\n                    enableWhiteboard: false,\n                }\n                recordingType = 'audio'\n                recordingFormat = configAudioRecFormat\n            } else if (this.entity.type.uuid === 'webinar') {\n                configOptions = isInitiator ? {\n                    enableAudio: true,\n                    enableVideo: true,\n                    showEnableAudioBtn: true,\n                    showEnableVideoBtn: true,\n                    enableHandGesture: false,\n                    enableWhiteboard: true,\n                } : {\n                    enableAudio: true,\n                    enableVideo: true,\n                    showEnableAudioBtn: false,\n                    showEnableVideoBtn: false,\n                    enableScreenSharing: false,\n                    enableFileSharing: false,\n                    enableRecording: false,\n                    enableHandGesture: false,\n                    enableWhiteboard: false,\n                }\n                recordingType = 'video'\n                recordingFormat = configVideoRecFormat\n            } else if (this.entity.type.uuid === 'live_class') {\n                configOptions = isInitiator ? {\n                    enableAudio: true,\n                    enableVideo: true,\n                    showEnableAudioBtn: true,\n                    showEnableVideoBtn: true,\n                    enableWhiteboard: true,\n                } : {\n                    enableAudio: true,\n                    enableVideo: true,\n                    showEnableAudioBtn: false,\n                    showEnableVideoBtn: false,\n                    enableScreenSharing: false,\n                    enableFileSharing: false,\n                    enableRecording: false,\n                    enableWhiteboard: false,\n                }\n                recordingType = 'video'\n                recordingFormat = configVideoRecFormat\n            } else if (this.entity.type.uuid === 'podcast') {\n                configOptions = isInitiator ? {\n                    enableAudio: true,\n                    enableVideo: false,\n                    showEnableAudioBtn: true,\n                    showEnableVideoBtn: false,\n                    enableScreenSharing: false,\n                    enableHandGesture: false,\n                    enableWhiteboard: false,\n                } : {\n                    enableAudio: true,\n                    enableVideo: false,\n                    showEnableAudioBtn: false,\n                    showEnableVideoBtn: false,\n                    enableScreenSharing: false,\n                    enableFileSharing: false,\n                    enableRecording: false,\n                    enableHandGesture: false,\n                    enableWhiteboard: false,\n                }\n                recordingType = 'audio'\n                recordingFormat = configAudioRecFormat\n            }\n\n            configOptions.objForEach((value, key) => this.pageConfigs[key] = value)\n\n            this.mediaConfigurations.recording.type = recordingType\n            this.mediaConfigurations.recording.mimeType = recordingFormat\n            this.mediaConfigurations.recording.timeSlice = this.pageConfigs.recordingTimeSlice || 5000\n\n            this.rtcmConnection.extra.audioMuted = !this.pageConfigs.enableAudio\n            this.rtcmConnection.extra.videoMuted = !this.pageConfigs.enableVideo\n            this.rtcmConnection.extra.isHandUp = this.isHandUp\n            this.updateExtraData()\n\n            if (this.pageConfigs.enableWhiteboard) {\n                loadScript('/js/canvas-designer/webrtc-handler.js')\n                loadScript('/js/canvas-designer/canvas-designer-widget.js')\n            }\n            this.configs.meeting.debugMode = true\n        },\n        destroyPage() {\n            if (window.countdownInterval) {\n                clearInterval(window.countdownInterval)\n            }\n\n            this.SetUiConfig({ pageHeaderShow: true, pageFooterShow: true })\n\n            this.closeConnectionAndStream()\n\n            if (window.Echo) {\n                if (window.meetingChannel) {\n                    window.meetingChannel.stopListening('MeetingStatusChanged')\n                    window.meetingChannel.stopListening('NewMessage')\n                }\n                window.Echo.leave(`Meeting.${this.uuid}`)\n            }\n\n            if (screenfull.isEnabled) {\n                screenfull.off('change')\n                screenfull.off('error')\n            }\n        },\n        getInitialData() {\n            this.isLoading = true\n\n            if (!window.Echo) {\n                this.$toasted.error($t('config.pusher.credential_required'), this.$toastConfig.error)\n                this.$router.push({ name: this.fallBackRoute })\n                return\n            }\n\n            return this.Custom({\n                url: `/${this.initUrl}/${this.uuid}/pam`,\n                method: 'get',\n                params: {\n                    isPam: true\n                }\n            })\n                .then(response => {\n                    if (response.isInstantMeeting) {\n                        this.pageConfigs.hasAgenda = false\n                    }\n\n                    response.config.objForEach((value, key) => this.pageConfigs[key] = value)\n\n                    this.pageConfigs.disableScroll = this.pageConfigs.layout === 'grid' ? true : (response.config && response.config.hasOwnProperty('disableScroll') ? response.config.disableScroll : this.pageConfigs.disableScroll)\n\n                    response = this.updateMeetingTimezone(response)\n                    this.entity = response\n                    this.updateMeetingRules()\n\n                    //Changes to prefer rear camera\n                    if (this.pageConfigs.preferRearCameraFirst) {\n                        this.mediaConfigurations.facingMode = 'environment'\n                    }\n\n                    if (response.roomId && response.status === 'live') {\n                        setTimeout(() => {\n                            this.initMediaAndRtcmConnection()\n\n                            this.rtcmConnection.checkPresence(response.roomId, (isRoomExist, roomid) => {\n                                this.roomIdAlive = !!isRoomExist\n                                if (isRoomExist === true) {\n                                    this.meetingRoomNotFound = false\n                                }\n                            })\n                        }, 1000)\n                    }\n\n                    this.joinChannel()\n                    this.setupGreenRoom()\n\n                    if (response.isInstantMeeting && !response.isBlocked && response.status === 'live') {\n                        if (!((this.rtcmConnection && this.rtcmConnection.isInitiator) || response.canModerate) && (response.type.uuid === 'live_class' || response.type.uuid === 'webinar')) { //if current user is a normal user (not an initiator or moderator), and type is live class or webinar\n                            this.isLoading = false\n                        } else {\n                            if (this.pageConfigs.forceUpdateUsername) {\n                                this.updateUsername(false, this.getOnline)\n                            } else {\n                                this.getOnline()\n                            }\n                        }\n                    } else {\n                        this.isLoading = false\n                    }\n\n                    return response\n                })\n                .catch(error => {\n                    this.isLoading = false\n                    formUtil.handleErrors(error)\n                    this.$router.push({ name: this.fallBackRoute })\n                    return error\n                })\n        },\n        stopStream(stream) {\n            if (stream && _.isFunction(stream.stop)) {\n                stream.stop()\n            }\n            if (stream && _.isFunction(stream.getTracks)) {\n                stream.getTracks().forEach(track => track.stop())\n            }\n        },\n        toggleVideoTracks(stream, value) {\n            if (!stream) {\n                return\n            }\n            const tracks = stream.getVideoTracks()\n            tracks.forEach(track => {\n                track.enabled = value\n            })\n        },\n        toggleAudioTracks(stream, value) {\n            if (!stream) {\n                return\n            }\n            const tracks = stream.getAudioTracks()\n            tracks.forEach(track => {\n                track.enabled = value\n            })\n        },\n        setupGreenRoom(force = false) {\n\n            const setupMicActivity = (stream) => {\n                if (this.$refs.greenRoomAudio && this.pageConfigs.enableAudio) {\n                    const audioContext = new AudioContext()\n                    const analyser = audioContext.createAnalyser()\n                    const microphone = audioContext.createMediaStreamSource(stream)\n                    const javascriptNode = audioContext.createScriptProcessor(2048, 1, 1)\n\n                    analyser.smoothingTimeConstant = 0.8\n                    analyser.fftSize = 1024\n\n                    microphone.connect(analyser)\n                    analyser.connect(javascriptNode)\n                    javascriptNode.connect(audioContext.destination)\n\n                    VuMeter(this.$refs.greenRoomAudio, {\n                        width: 'sibling',\n                        boxGapFraction: 0.2,\n                    })\n\n                    javascriptNode.onaudioprocess = () => {\n                        let array = new Uint8Array(analyser.frequencyBinCount)\n                        analyser.getByteFrequencyData(array)\n                        let values = 0\n\n                        let length = array.length\n                        for (let i = 0; i < length; i++) {\n                            values += (array[i])\n                        }\n\n                        let average = values / length\n                        let volumeActivity = Math.round(average)\n\n                        // console.log(Math.round(average))\n                        this.micVolumeActivity = volumeActivity < 0 ? 0 : volumeActivity\n                    }\n                }\n            }\n\n\n\n            if (this.$refs.videos && this.$refs.videos.length) {\n                if (this.localGreenRoomStream) {\n                    this.stopStream(this.localGreenRoomStream)\n                }\n                this.localGreenRoomStream = null\n\n                return\n            }\n\n            if (this.pageConfigs.enableVideo && this.pageConfigs.enableAudio && !(this.$refs.greenRoomVideo && this.$refs.greenRoomVideo.srcObject)) {\n                force = true\n            }\n\n\n\n            if (!this.localGreenRoomStream || force) {\n                if (this.localGreenRoomStream) {\n                    this.stopStream(this.localGreenRoomStream)\n                }\n                this.localGreenRoomStream = null\n\n                this.getMediaConstraints()\n\n                if ((this.videoConstraints && this.mediaConfigurations.selectedVideoInput) || (this.audioConstraints && this.mediaConfigurations.selectedAudioInput)) {\n\n                    navigator.mediaDevices.getUserMedia({\n                        video: this.videoConstraints,\n                        audio: this.audioConstraints || true\n                    })\n                        .then((stream) => {\n                            this.toggleVideoTracks(stream, this.pageConfigs.enableVideo)\n\n                            this.toggleAudioTracks(stream, this.pageConfigs.enableAudio)\n\n                            this.localGreenRoomStream = stream\n\n                            if (this.$refs.greenRoomVideo && this.pageConfigs.enableVideo) {\n                                this.$refs.greenRoomVideo.srcObject = stream\n                            }\n\n                            setTimeout(() => {\n                                setupMicActivity(this.localGreenRoomStream)\n                            }, 1000)\n                        })\n                        .catch(this.rtcmOnMediaError)\n                }\n            } else {\n                if (this.pageConfigs.enableVideo || this.pageConfigs.enableAudio) {\n\n                    this.toggleVideoTracks(this.localGreenRoomStream, this.pageConfigs.enableVideo)\n\n                    this.toggleAudioTracks(this.localGreenRoomStream, this.pageConfigs.enableAudio)\n\n                    if (!this.pageConfigs.enableVideo && this.$refs.greenRoomVideo) {\n                        this.$refs.greenRoomVideo.srcObject = null\n                    }\n\n                    setupMicActivity(this.localGreenRoomStream)\n                } else {\n                    if (this.localGreenRoomStream) {\n                        this.stopStream(this.localGreenRoomStream)\n                    }\n                    this.localGreenRoomStream = null\n                    this.$refs.greenRoomVideo.srcObject = null\n                }\n            }\n        },\n        setupMediaDevices() {\n            const rtcmc = new RTCMultiConnection()\n            if (rtcmc.DetectRTC.isWebRTCSupported === false) {\n                this.$toasted.error($t('meeting.invalid_browser_error'), this.$toastConfig.error)\n            }\n\n            this.isLoading = true\n\n            this.mediaDeviceIssue = this.permissionRejected = false\n\n            const loadDevices = (callbackFn) => {\n                rtcmc.DetectRTC.load(() => {\n                    if (this.enableLogs) {\n                        console.log(rtcmc.DetectRTC)\n                    }\n\n                    if (rtcmc.DetectRTC.hasMicrophone === true) {\n                        this.mediaDevices.audioInput = rtcmc.DetectRTC.audioInputDevices.map(device => {\n                            return {\n                                'uuid': device.deviceId || device.id,\n                                'name': device.label || `microphone ${this.mediaDevices.audioInput.length + 1}`,\n                            }\n                        })\n                    } else {\n                        this.mediaDeviceIssue = true\n                    }\n\n                    if (rtcmc.DetectRTC.hasWebcam === true) {\n                        this.mediaDevices.videoInput = rtcmc.DetectRTC.videoInputDevices.map(device => {\n                            return {\n                                'uuid': device.deviceId || device.id,\n                                'name': device.label || `camera ${this.mediaDevices.videoInput.length + 1}`,\n                            }\n                        })\n                    } else {\n                        this.mediaDeviceIssue = true\n                    }\n\n                    if (rtcmc.DetectRTC.hasSpeakers === true) {\n                        this.mediaDevices.audioOutput = rtcmc.DetectRTC.audioOutputDevices.map(device => {\n                            return {\n                                'uuid': device.deviceId || device.id,\n                                'name': device.label || `speaker ${this.mediaDevices.audioOutput.length + 1}`,\n                            }\n                        })\n                    } else {\n                        this.$toasted.error($t('meeting.audio_output_device_error'), this.$toastConfig.error)\n                    }\n\n                    this.mediaConfigurations.selectedAudioInput = this.mediaDevices.audioInput ? this.mediaDevices.audioInput[0] : null\n                    this.mediaConfigurations.selectedVideoInput = this.mediaDevices.videoInput ? this.mediaDevices.videoInput[0] : null\n\n                    this.mediaConfigFormData = _.cloneDeep(this.mediaConfigurations)\n\n                    if (callbackFn) {\n                        callbackFn()\n                    }\n\n                    this.getInitialData()\n                })\n            }\n\n            if (!rtcmc.DetectRTC.MediaDevices.length || (rtcmc.DetectRTC.MediaDevices[0] && rtcmc.DetectRTC.MediaDevices[0].isCustomLabel)) {\n\n                navigator.mediaDevices.getUserMedia({ audio: true, video: true })\n                    .then((stream) => {\n                        loadDevices(() => {\n                            // release camera\n                            stream.getTracks().forEach(function (track) {\n                                track.stop()\n                            })\n                        })\n                    })\n                    .catch((error) => {\n                        this.rtcmOnMediaError(error)\n                        this.getInitialData()\n                    })\n            } else {\n                loadDevices()\n            }\n        },\n        doInit() {\n            this.Init({ url: this.initUrl })\n\n            if (window.isDuplicate()) {\n                this.duplicateTab = true\n            }\n\n            this.setupMediaDevices()\n        },\n        initNetworkListener() {\n            const vm = this\n            window.addEventListener('offline', (e) => {\n                if (vm.rtcmConnection && vm.videoList && vm.videoList.length) {\n                    vm.videoList = vm.videoList.slice(0, 1)\n                    vm.autoSetVideoMaximized()\n                }\n            })\n\n            window.addEventListener('online', (e) => {\n                vm.closeConnectionAndStream(true)\n            })\n        },\n        updateUsername(showCancel = true, callbackFn) {\n            swtAlert.fire({\n                title: $t('misc.ask_name.title'),\n                showCancelButton: showCancel,\n                confirmButtonText: $t('misc.ask_name.confirm_btn'),\n                cancelButtonText: $t('misc.ask_name.cancel_btn_2'),\n                input: 'text',\n            })\n                .then((result) => {\n                    if (result.value) {\n                        let guestUserData = getFromStorage('guestUserData', true) || {}\n                        guestUserData = {\n                            ...this.profile,\n                            ...guestUserData\n                        }\n                        guestUserData.username = toSnakeCase(result.value)\n                        guestUserData.name = result.value\n\n                        this.profile = { ...guestUserData }\n                        saveToStorage('guestUserData', guestUserData)\n\n                        this.rtcmConnection.extra.username = this.profile.username\n                        this.rtcmConnection.extra.name = this.profile.name\n                        this.updateExtraData()\n\n                        if (callbackFn && _.isFunction(callbackFn)) {\n                            callbackFn()\n                        }\n                    } else {\n                        result.dismiss === Swal.DismissReason.cancel\n                    }\n                })\n        },\n        setDefaultGuestUserData() {\n            let guestUserData = getFromStorage('guestUserData', true)\n\n            if (!guestUserData || !guestUserData.uuid) {\n                const Uuid = uuid()\n                const username = Uuid.substring(0, 8)\n\n                guestUserData = {\n                    uuid: uuid(),\n                    username: username,\n                    name: username\n                }\n            }\n\n            this.profile = { ...guestUserData }\n            saveToStorage('guestUserData', guestUserData)\n        },\n    },\n    mounted() {\n        document.body.classList.add(\"meeting-page\")\n        if (this.$route.params.uuid) {\n            this.uuid = this.$route.params.uuid\n        }\n\n        if (screenfull.isEnabled) {\n            screenfull.on('change', () => {\n                this.SetUiConfig({ fullScreen: screenfull.isFullscreen })\n            })\n            screenfull.on('error', event => {\n                console.error('Failed to enable fullscreen', event);\n            })\n\n            this.SetUiConfig({ fullScreen: false })\n        }\n\n        this.GetConfig({ params: { pam: true, meeting: this.uuid } })\n            .then((configs) => {\n                if (!(configs && configs.pusher && configs.signalServers && configs.iceServers)) {\n                    this.$toasted.error($t('meeting.pam_meeting_error'), this.$toastConfig.error)\n                    this.$router.push({ name: 'login', query: { ref: this.$route.fullPath } })\n                } else {\n                    this.isLoading = false\n                    if (!window.Echo) {\n                        setupPusher()\n                    }\n                    this.doInit()\n                }\n            })\n            .catch(error => {\n                this.isLoading = false\n                formUtil.handleErrors(error)\n            })\n\n        window.addEventListener('beforeunload', this.beforeUnload)\n        this.checkIfOffline()\n        this.initNetworkListener()\n    },\n    created() {\n        this.mediaConfigFormData = _.cloneDeep(this.mediaConfigurations)\n        this.SetUiConfig({ pageHeaderShow: false, pageFooterShow: false })\n        this.setDefaultGuestUserData()\n\n        // detect 2G and alert\n        if (navigator.connection &&\n            navigator.connection.type === 'cellular' &&\n            navigator.connection.downlinkMax <= 0.115) {\n            alert('2G is not supported. Please use a better internet service.')\n        }\n    },\n    beforeRouteEnter(to, from, next) {\n        if (!to.params.uuid) {\n            next({ name: 'joinMeetingAsGuest' })\n        } else {\n            next(vm => {\n                vm.prevRoute = from\n            })\n        }\n    },\n\n\n    beforeDestroy() {\n        if (!window.isMeetingPageDestroyed) {\n            this.isLoading = true\n\n            this.destroyPage()\n\n            if (this.entity && this.entity.status === 'live') {\n                this.Custom({\n                    url: `/${this.initUrl}/${this.uuid}/leave`,\n                    method: 'post',\n                })\n            }\n\n            window.isMeetingPageDestroyed = true\n        }\n    },\n    beforeRouteLeave(to, from, next) {\n        const doBeforeLeaving = (leave = true) => {\n            if (!leave) {\n                return;\n            }\n            this.isLoading = true\n\n            this.destroyPage()\n            window.removeEventListener('beforeunload', this.beforeUnload)\n\n            if (this.entity && this.entity.status === 'live') {\n                this.Custom({\n                    url: `/${this.initUrl}/${this.uuid}/leave`,\n                    method: 'post',\n                })\n                    .then(response => {\n                        window.isMeetingPageDestroyed = true\n                        next()\n                    })\n                    .catch(error => {\n                        window.isMeetingPageDestroyed = true\n                        next()\n                    })\n            } else {\n                window.isMeetingPageDestroyed = true\n                next()\n            }\n        }\n\n        if (this.hasVideos) {\n            formUtil.unsavedCheckAlert({}, { unsaved: true }, doBeforeLeaving, {\n                title: $t('meeting.is_live'),\n            })\n        } else {\n            doBeforeLeaving()\n        }\n    },\n    destroyed() {\n        document.body.classList.remove(\"meeting-page\")\n    }\n}\n","import { render, staticRenderFns } from \"./live-as-guest.vue?vue&type=template&id=92d58fe6&\"\nimport script from \"./live-as-guest.vue?vue&type=script&lang=js&\"\nexport * from \"./live-as-guest.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/pia.itebco.com/public_html/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('92d58fe6')) {\n      api.createRecord('92d58fe6', component.options)\n    } else {\n      api.reload('92d58fe6', component.options)\n    }\n    module.hot.accept(\"./live-as-guest.vue?vue&type=template&id=92d58fe6&\", function () {\n      api.rerender('92d58fe6', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"resources/js/views/app/meeting/live-as-guest.vue\"\nexport default component.exports","import mod from \"-!../../../../../node_modules/babel-loader/lib/index.js??ref--4-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./live-as-guest.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../node_modules/babel-loader/lib/index.js??ref--4-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./live-as-guest.vue?vue&type=script&lang=js&\"","export * from \"-!../../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./live-as-guest.vue?vue&type=template&id=92d58fe6&\""],"mappingsjBA;;;;;;;;;;;;ACpahvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAOA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvDA;AAyDA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AA3HA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AAJA;AAlBA;AAygCA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3CA;AA6CA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAIA;AAjBA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAIA;AAjBA;AAmBA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AA5NA;AAkOA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AA9CA;AAgDA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAYA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAAA;AAAA;AADA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAGA;AANA;AAQA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAHA;AASA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAJA;AAUA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAIA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AACA;AAefA;AACA;AAipBA;AACA;AAqBA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AADA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAIA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AALA;AAOA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAdA;AAgBA;AAEA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAIA;AACA;AAlBA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAIA;AACA;AAlBA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAIA;AACA;AAlBA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAIA;AACA;AAlBA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAnBA;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAnBA;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAIA;AACA;AAlBA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAIA;AACA;AAlBA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAnBA;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAnBA;AAqBA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AADA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAHA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AA57EA;AA87EA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AAIA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAlnGA;;;;;;;;;;;;AC/BA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAiBA;AACA;AACA;;;;;;;;;;;;ACtCA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;A","sourceRoot":""}