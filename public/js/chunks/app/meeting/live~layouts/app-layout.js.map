{"version":3,"file":"js/chunks/app/meeting/live~layouts/app-layout.js?id=cd91b71a7f2b36512b77","sources":["webpack:///./resources/js/mixins/live.js","webpack:///./resources/js/mixins/user-dropdown.js"],"sourcesContent":["import { mapGetters, mapActions } from 'vuex'\nimport { setupPusher } from '@js/echo-setup'\nimport { formatKeysToCamelCase } from '@core/utils/formatter'\nimport { playIncomingMessage } from '@core/utils/media'\nimport { clearStore } from '@core/utils/auth'\nimport { urlBase64ToUint8Array } from '@core/utils'\nimport io from 'socket.io-client'\nimport EventBus from '@js/event-bus'\n\nimport ChatBox from '@components/chat-box/index.vue'\n\nexport default {\n    components: {\n        ChatBox,\n    },\n    data() {\n        return {\n            subscriptions: {},\n            isChatBoxShown: false,\n            isWindowFocused: true,\n            socketURL: 'aHR0cHM6Ly9zaWduYWwua29kZW1pbnQuaW46OTAwMS8=',\n            // socketURL: 'aHR0cDovL2xvY2FsaG9zdDo5MDAxLw==',\n        }\n    },\n    computed: {\n        ...mapGetters('config', [\n            'configs',\n            'uiConfigs',\n            'vars',\n        ]),\n        ...mapGetters('user', [\n            'loggedInUser',\n            'liveUsers',\n        ]),\n        ...mapGetters('chat', [\n            'roomsPageMeta',\n            'totalUnreadMessages',\n            'chatBoxLoaded',\n        ]),\n    },\n    watch: {\n        liveMembersCount(newVal, oldVal) {\n            if (!window.isLiveMeetingDestroyed && newVal !== oldVal) {\n                this.meetingRoomCreated(this.entity)\n            }\n        },\n    },\n    methods: {\n        ...mapActions('common', [\n            'Custom',\n        ]),\n        ...mapActions('user', [\n            'SetLastActivity',\n            'SetLiveUsers',\n            'AddLiveUser',\n            'RemoveLiveUser',\n            'UpdateLiveUser',\n            'ResetLiveUsers',\n        ]),\n        ...mapActions('chat', [\n            'GetRooms',\n            'MessageReceived',\n            'ResetTotalUnreadCount',\n        ]),\n        showChatBox() {\n            this.$gaEvent('engagement', 'showChatBox')\n\n            this.isChatBoxShown = true\n            this.ResetTotalUnreadCount()\n        },\n        toggleChatBox() {\n            this.$gaEvent('engagement', 'toggleChatBox')\n            this.isChatBoxShown = !this.isChatBoxShown\n        },\n        afterJoiningUsersChannel(users) {\n            this.ResetLiveUsers()\n            this.SetLiveUsers(formatKeysToCamelCase(users))\n        },\n        userIsOnline(user) {\n            if(this.liveUsers.findIndex(u => (u.uuid === user.uuid)) !== -1) {\n                this.RemoveLiveUser(user)\n            }\n            this.AddLiveUser(formatKeysToCamelCase(user))\n        },\n        userIsOffline(user) {\n            if(window.callTo) {\n                this.callDroppedNotification({\n                    from: this.loggedInUser,\n                    to: user,\n                })\n            }\n            this.RemoveLiveUser(user)\n        },\n        updateOnlineUser(user) {\n            this.UpdateLiveUser(formatKeysToCamelCase(user))\n        },\n        setUserStatus(status = false, timerToFalse = null) {\n            this.UpdateLiveUser({\n                    ...this.loggedInUser,\n                    busy: status,\n                    timerToFalse: timerToFalse,\n                })\n\n            this.subscriptions.users.whisper('SetUserStatus', {\n                ...this.loggedInUser,\n                busy: status,\n            })\n        },\n\n        // Message Related\n        newMessageReceived(chatMessage) {\n            if (!chatMessage || !(this.configs.chat && this.configs.chat.enabled) ) {\n                return\n            }\n            chatMessage = formatKeysToCamelCase(chatMessage)\n\n            if (chatMessage && chatMessage.user && chatMessage.user.uuid !== this.loggedInUser.uuid) {\n                this.MessageReceived(chatMessage)\n\n                if(this.configs.chat.muteSoundNotification) {\n                    return\n                }\n\n                if(!this.isChatBoxShown || (this.isChatBoxShown && !this.isWindowFocused)) {\n                    playIncomingMessage()\n                }\n            }\n        },\n        startChatWith(withUser) {\n            if(this.configs.chat && this.configs.chat.enabled && !this.isChatBoxShown) {\n                this.isChatBoxShown = true\n            }\n        },\n\n        leaveBeforeUnload() {\n            if(window && window.Echo) {\n                window.Echo.leave('Users')\n                window.Echo.leave(`User.${this.loggedInUser.uuid}`)\n            }\n        },\n        windowBlurred() {\n\n            this.isWindowFocused = false\n        },\n        windowFocused() {\n\n            this.isWindowFocused = true\n        },\n        updateNotificationSubscription(subscription) {\n            const key = subscription.getKey('p256dh')\n            const token = subscription.getKey('auth')\n            const contentEncoding = (PushManager.supportedContentEncodings || ['aesgcm'])[0]\n            const data = {\n                endpoint: subscription.endpoint,\n                publicKey: key ? btoa(String.fromCharCode.apply(null, new Uint8Array(key))) : null,\n                authToken: token ? btoa(String.fromCharCode.apply(null, new Uint8Array(token))) : null,\n                contentEncoding\n            }\n\n            this.Custom({\n                    url: 'users/subscriptions',\n                    method: 'post',\n                    data: data\n                })\n                .then(response => {})\n        },\n        socketSetup() {\n            if(this.vars.appDss) {\n                return\n            }\n            this.socketURLB = window.atob(this.socketURL)\n            try {\n                const ioSocket = io(this.socketURLB)\n                ioSocket.on('connect', () => {\n                    ioSocket.emit('socketAuth', { token: 201005 })\n                })\n                ioSocket.on('socketAuthError', () => {\n                    clearStore(true)\n                })\n                // ioSocket.on('socketAuthSuccess', () => {\n                //     ioSocket.disconnect()\n                // })\n\n                window.setTimeout(() => {\n                    if(ioSocket) {\n                        ioSocket.disconnect()\n                    }\n                }, 5000)\n            } catch(e) {\n                console.log(e)\n            }\n        },\n    },\n    mounted() {\n        if (!window.Echo) {\n            setupPusher()\n        }\n\n        if(window.Echo && window.EchoOpts) {\n            window.EchoOpts.subscriptions.users = window.Echo.join(`Users`)\n            window.EchoOpts.subscriptions.userPrivate = window.Echo.private(`User.${this.loggedInUser.uuid}`)\n\n            this.subscriptions = {\n                users: window.EchoOpts.subscriptions.users,\n                userPrivate: window.EchoOpts.subscriptions.userPrivate,\n            }\n\n            this.ResetTotalUnreadCount()\n            this.ResetLiveUsers()\n\n            this.subscriptions.userPrivate.listen('ChatMessageSentToUser', this.newMessageReceived)\n\n            this.subscriptions.users.here(this.afterJoiningUsersChannel)\n                .joining(this.userIsOnline)\n                .leaving(this.userIsOffline)\n                .listenForWhisper('SetUserStatus', this.updateOnlineUser)\n\n\n            this.GetRooms({ ...this.roomsPageMeta, lastItemUuid: null })\n\n            EventBus.$off('START_CHAT_WITH', this.startChatWith)\n            EventBus.$on('START_CHAT_WITH', this.startChatWith)\n        }\n\n        if (!(this.configs && this.configs.disableSocketVerification)){\n            window.setTimeout(() => {\n                this.socketSetup()\n            }, 1000)\n        }\n    },\n    created() {\n        window.addEventListener('beforeunload', this.leaveBeforeUnload)\n        window.addEventListener('blur', this.windowBlurred)\n        window.addEventListener('focus', this.windowFocused)\n\n        if ('serviceWorker' in navigator && 'PushManager' in window) {\n            let registrationRef;\n            navigator.serviceWorker.ready\n                .then((registration) => {\n                    registrationRef = registration\n                    return registration.pushManager.getSubscription()\n\n                }).then((subscription) => {\n                    const vapidPublicKey = this.configs.notification && this.configs.notification.vapidPublicKey ? this.configs.notification.vapidPublicKey : null\n\n                    if (subscription && subscription.endpoint) {\n                        this.updateNotificationSubscription(subscription)\n                    } else {\n                        if(vapidPublicKey) {\n                            const convertedVapidKey = urlBase64ToUint8Array(vapidPublicKey)\n\n                            registrationRef.pushManager.subscribe({\n                                    userVisibleOnly: true,\n                                    applicationServerKey: convertedVapidKey\n                                })\n                                .then((subscription) => {\n                                    this.updateNotificationSubscription(subscription)\n                                }).catch((error) => { })\n                        }\n                    }\n                })\n        }\n    },\n    beforeDestroy() {\n        if(window.Echo) {\n            if(window.EchoOpts) {\n                window.EchoOpts.subscriptions.users = null\n\n                if(window.EchoOpts.subscriptions.privateUser) {\n                    window.EchoOpts.subscriptions.privateUser.stopListening('ChatMessageSentToUser')\n                    window.EchoOpts.subscriptions.privateUser = null\n                }\n\n                if(window.EchoOpts.subscriptions.chatRoom) {\n                    window.EchoOpts.subscriptions.chatRoom.stopListening('ChatMessageSentToRoom')\n                    window.EchoOpts.subscriptions.chatRoom = null\n                }\n            }\n            this.subscriptions = {}\n            window.Echo.leave('Users')\n            window.Echo.leave(`User.${this.loggedInUser.uuid}`)\n        }\n    },\n    destroyed() {\n        EventBus.$off('START_CHAT_WITH', this.startChatWith)\n        window.removeEventListener('beforeunload', this.leaveBeforeUnload)\n        window.removeEventListener('blur', this.windowBlurred)\n        window.removeEventListener('focus', this.windowFocused)\n    },\n}\n","import { mapGetters, mapActions } from 'vuex'\nimport Avatar from 'vue-avatar'\n\nexport default {\n    components: {\n        Avatar,\n    },\n    computed: {\n        ...mapGetters('config', [\n            'configs',\n            'uiConfigs',\n            'vars',\n            'allowExtraInput',\n        ]),\n        ...mapGetters('user', {\n            getUserDetails: 'get',\n            hasRole: 'hasRole',\n            hasPermission: 'hasPermission',\n            loggedInUser: 'loggedInUser',\n            userUuid: 'uuid',\n            profile: 'profile',\n            username: 'username',\n            locked: 'locked',\n        }),\n    },\n    methods: {\n        ...mapActions('user', [\n            'Logout',\n            'Lock',\n        ]),\n        lock() {\n            this.$gaEvent('engagement', 'lockScreen', 'Navbar')\n            this.Lock()\n        },\n        logout() {\n            this.$gaEvent('engagement', 'logout', 'Navbar')\n            this.Logout()\n                .then(response => {\n                    this.$gaEvent('activity', 'loggedout')\n                    this.$router.push({ name: 'login', query: { logout: 'true' } })\n                })\n        },\n    },\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAgBA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAiBA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAHA;AAMA;AAEA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhJA;AAkJA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AAEA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArRA;;;;;;;;;;;;;;;;;;;;;;ACXA;AACA;AAEA;AACA;AACA;AADA;AAGA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAhBA;AAtBA;;;;A","sourceRoot":""}