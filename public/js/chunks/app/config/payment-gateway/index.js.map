{"version":3,"file":"js/chunks/app/config/payment-gateway/index.js?id=e3ec023d23ac1f1b5cc1","sources":["webpack:///index.vue","webpack:///./resources/js/views/app/config/payment-gateway/index.vue?2c0d","webpack:///./resources/js/mixins/config-form.js","webpack:///./resources/js/views/app/config/payment-gateway/index.vue","webpack:///./resources/js/views/app/config/payment-gateway/index.vue?cfee","webpack:///./resources/js/views/app/config/payment-gateway/index.vue?2571"],"sourcesContent":["<template>\n    <base-container boxed with-loader :is-loading=\"isLoading\" :loader-color=\"vars.loaderColor\">\n        <form @submit.prevent=\"submit\">\n\n            <fieldset class=\"fieldset pt-4\">\n                <legend>\n                    Stripe\n                    <div class=\"d-inline-flex align-items-center\">\n                        <base-checkbox class=\"ml-3 mt-1 mb-1\" v-model=\"formData.enableStripe\" inline>\n                            {{ $t('general.enabled') }}\n                        </base-checkbox>\n                    </div>\n                </legend>\n\n                <collapse-transition>\n                    <div class=\"row\" v-if=\"formData.enableStripe\">\n                        <div class=\"col-12 col-md-6 mb-4\">\n                            <switch-wrapper :label=\"$t('config.payment_gateway.live_mode', {attribute: 'Stripe'})\">\n                                <base-switch v-model=\"formData.stripeMode\"></base-switch>\n                            </switch-wrapper>\n                        </div>\n                        <div class=\"col-12 col-md-6 mb-4\">\n                        </div>\n\n                        <div class=\"col-12 col-md-6 mb-4\">\n                            <base-input :label=\"$t('config.payment_gateway.key', {attribute: 'Stripe'})\" type=\"text\" v-model=\"formData.stripeKey\" :error.sync=\"formErrors.stripeKey\" :disabled=\"isLoading\" />\n                        </div>\n                        <div class=\"col-12 col-md-6 mb-4\">\n                            <base-input :label=\"$t('config.payment_gateway.secret', {attribute: 'Stripe'})\" type=\"text\" v-model=\"formData.stripeSecret\" :error.sync=\"formErrors.stripeSecret\" :disabled=\"isLoading\" />\n                        </div>\n                    </div>\n                    <h5 class=\"text-muted\" v-else>{{ $t('config.payment_gateway.disabled') }}</h5>\n                </collapse-transition>\n            </fieldset>\n\n            <fieldset class=\"fieldset mt-4 pt-4\">\n                <legend>\n                    Paypal\n                    <div class=\"d-inline-flex align-items-center\">\n                        <base-checkbox class=\"ml-3 mt-1 mb-1\" v-model=\"formData.enablePaypal\" inline>\n                            {{ $t('general.enabled') }}\n                        </base-checkbox>\n                    </div>\n                </legend>\n\n                <collapse-transition>\n                    <div class=\"row\" v-if=\"formData.enablePaypal\">\n                        <div class=\"col-12 col-md-6 mb-4\">\n                            <switch-wrapper :label=\"$t('config.payment_gateway.live_mode', {attribute: 'Paypal'})\">\n                                <base-switch v-model=\"formData.paypalMode\"></base-switch>\n                            </switch-wrapper>\n                        </div>\n                        <div class=\"col-12 col-md-6 mb-4\">\n                        </div>\n\n                        <div class=\"col-12 col-md-6 mb-4\">\n                            <base-input :label=\"$t('config.payment_gateway.key', {attribute: 'Paypal'})\" type=\"text\" v-model=\"formData.paypalKey\" :error.sync=\"formErrors.paypalKey\" :disabled=\"isLoading\" />\n                        </div>\n                        <div class=\"col-12 col-md-6 mb-4\">\n                            <base-input :label=\"$t('config.payment_gateway.secret', {attribute: 'Paypal'})\" type=\"text\" v-model=\"formData.paypalSecret\" :error.sync=\"formErrors.paypalSecret\" :disabled=\"isLoading\" />\n                        </div>\n                    </div>\n                    <h5 class=\"text-muted\" v-else>{{ $t('config.payment_gateway.disabled') }}</h5>\n                </collapse-transition>\n            </fieldset>\n\n            <fieldset class=\"fieldset mt-4 pt-4\">\n                <legend>\n                    Paddle\n                    <div class=\"d-inline-flex align-items-center\">\n                        <base-checkbox class=\"ml-3 mt-1 mb-1\" v-model=\"formData.enablePaddle\" inline>\n                            {{ $t('general.enabled') }}\n                        </base-checkbox>\n                    </div>\n                </legend>\n\n                <collapse-transition>\n                    <div class=\"row\" v-if=\"formData.enablePaddle\">\n                        <div class=\"col-12 col-md-6 mb-4\">\n                            <switch-wrapper :label=\"$t('config.payment_gateway.live_mode', {attribute: 'Paddle'})\">\n                                <base-switch v-model=\"formData.paddleMode\"></base-switch>\n                            </switch-wrapper>\n                        </div>\n                        <div class=\"col-12 col-md-6 mb-4\">\n                        </div>\n                        <div class=\"col-12 col-md-6 mb-4\">\n                            <base-input :label=\"$t('config.payment_gateway.vendor_id')\" type=\"text\" v-model=\"formData.paddleKey\" :error.sync=\"formErrors.paddleKey\" :disabled=\"isLoading\" />\n                        </div>\n                        <div class=\"col-12 col-md-6 mb-4\">\n                            <base-input :label=\"$t('config.payment_gateway.auth_code')\" type=\"text\" v-model=\"formData.paddleSecret\" :error.sync=\"formErrors.paddleSecret\" :disabled=\"isLoading\" />\n                        </div>\n                    </div>\n                    <h5 class=\"text-muted\" v-else>{{ $t('config.payment_gateway.disabled') }}</h5>\n                </collapse-transition>\n            </fieldset>\n\n            <div class=\"text-right mt-5\">\n                <base-button type=\"button\" design=\"light\" @click=\"reset\">{{ $t('general.reset') }}</base-button>\n                <base-button type=\"submit\" design=\"primary\">{{ $t('general.save') }}</base-button>\n            </div>\n\n        </form>\n    </base-container>\n</template>\n\n<script>\n    import form from '@mixins/config-form'\n    import { CollapseTransition } from 'vue2-transitions'\n    import vars from '@js/vars'\n\n    export default {\n        extends: form,\n        components: {\n            CollapseTransition\n        },\n        data() {\n            return {\n                formData: {\n                    enableStripe: false,\n                    stripeMode: false,\n                    stripeKey: \"\",\n                    stripeSecret: \"\",\n                    enablePaypal: false,\n                    paypalMode: false,\n                    paypalKey: \"\",\n                    paypalSecret: \"\",\n                    enablePaddle: false,\n                    paddleMode: false,\n                    paddleKey: \"\",\n                    paddleSecret: \"\",\n                    type: 'paymentGateway',\n                },\n            }\n        },\n        mounted() {\n            this.getInitialData()\n        },\n        beforeRouteEnter(to, from, next) {\n            if (!vars.appKmon) {\n                next({ name: 'appDashboard'})\n            } else {\n                next()\n            }\n        },\n    }\n\n</script>\n","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"base-container\",\n    {\n      attrs: {\n        boxed: \"\",\n        \"with-loader\": \"\",\n        \"is-loading\": _vm.isLoading,\n        \"loader-color\": _vm.vars.loaderColor\n      }\n    },\n    [\n      _c(\n        \"form\",\n        {\n          on: {\n            submit: function($event) {\n              $event.preventDefault()\n              return _vm.submit.apply(null, arguments)\n            }\n          }\n        },\n        [\n          _c(\n            \"fieldset\",\n            { staticClass: \"fieldset pt-4\" },\n            [\n              _c(\"legend\", [\n                _vm._v(\"\\n                Stripe\\n                \"),\n                _c(\n                  \"div\",\n                  { staticClass: \"d-inline-flex align-items-center\" },\n                  [\n                    _c(\n                      \"base-checkbox\",\n                      {\n                        staticClass: \"ml-3 mt-1 mb-1\",\n                        attrs: { inline: \"\" },\n                        model: {\n                          value: _vm.formData.enableStripe,\n                          callback: function($$v) {\n                            _vm.$set(_vm.formData, \"enableStripe\", $$v)\n                          },\n                          expression: \"formData.enableStripe\"\n                        }\n                      },\n                      [\n                        _vm._v(\n                          \"\\n                        \" +\n                            _vm._s(_vm.$t(\"general.enabled\")) +\n                            \"\\n                    \"\n                        )\n                      ]\n                    )\n                  ],\n                  1\n                )\n              ]),\n              _vm._v(\" \"),\n              _c(\"collapse-transition\", [\n                _vm.formData.enableStripe\n                  ? _c(\"div\", { staticClass: \"row\" }, [\n                      _c(\n                        \"div\",\n                        { staticClass: \"col-12 col-md-6 mb-4\" },\n                        [\n                          _c(\n                            \"switch-wrapper\",\n                            {\n                              attrs: {\n                                label: _vm.$t(\n                                  \"config.payment_gateway.live_mode\",\n                                  { attribute: \"Stripe\" }\n                                )\n                              }\n                            },\n                            [\n                              _c(\"base-switch\", {\n                                model: {\n                                  value: _vm.formData.stripeMode,\n                                  callback: function($$v) {\n                                    _vm.$set(_vm.formData, \"stripeMode\", $$v)\n                                  },\n                                  expression: \"formData.stripeMode\"\n                                }\n                              })\n                            ],\n                            1\n                          )\n                        ],\n                        1\n                      ),\n                      _vm._v(\" \"),\n                      _c(\"div\", { staticClass: \"col-12 col-md-6 mb-4\" }),\n                      _vm._v(\" \"),\n                      _c(\n                        \"div\",\n                        { staticClass: \"col-12 col-md-6 mb-4\" },\n                        [\n                          _c(\"base-input\", {\n                            attrs: {\n                              label: _vm.$t(\"config.payment_gateway.key\", {\n                                attribute: \"Stripe\"\n                              }),\n                              type: \"text\",\n                              error: _vm.formErrors.stripeKey,\n                              disabled: _vm.isLoading\n                            },\n                            on: {\n                              \"update:error\": function($event) {\n                                return _vm.$set(\n                                  _vm.formErrors,\n                                  \"stripeKey\",\n                                  $event\n                                )\n                              }\n                            },\n                            model: {\n                              value: _vm.formData.stripeKey,\n                              callback: function($$v) {\n                                _vm.$set(_vm.formData, \"stripeKey\", $$v)\n                              },\n                              expression: \"formData.stripeKey\"\n                            }\n                          })\n                        ],\n                        1\n                      ),\n                      _vm._v(\" \"),\n                      _c(\n                        \"div\",\n                        { staticClass: \"col-12 col-md-6 mb-4\" },\n                        [\n                          _c(\"base-input\", {\n                            attrs: {\n                              label: _vm.$t(\"config.payment_gateway.secret\", {\n                                attribute: \"Stripe\"\n                              }),\n                              type: \"text\",\n                              error: _vm.formErrors.stripeSecret,\n                              disabled: _vm.isLoading\n                            },\n                            on: {\n                              \"update:error\": function($event) {\n                                return _vm.$set(\n                                  _vm.formErrors,\n                                  \"stripeSecret\",\n                                  $event\n                                )\n                              }\n                            },\n                            model: {\n                              value: _vm.formData.stripeSecret,\n                              callback: function($$v) {\n                                _vm.$set(_vm.formData, \"stripeSecret\", $$v)\n                              },\n                              expression: \"formData.stripeSecret\"\n                            }\n                          })\n                        ],\n                        1\n                      )\n                    ])\n                  : _c(\"h5\", { staticClass: \"text-muted\" }, [\n                      _vm._v(_vm._s(_vm.$t(\"config.payment_gateway.disabled\")))\n                    ])\n              ])\n            ],\n            1\n          ),\n          _vm._v(\" \"),\n          _c(\n            \"fieldset\",\n            { staticClass: \"fieldset mt-4 pt-4\" },\n            [\n              _c(\"legend\", [\n                _vm._v(\"\\n                Paypal\\n                \"),\n                _c(\n                  \"div\",\n                  { staticClass: \"d-inline-flex align-items-center\" },\n                  [\n                    _c(\n                      \"base-checkbox\",\n                      {\n                        staticClass: \"ml-3 mt-1 mb-1\",\n                        attrs: { inline: \"\" },\n                        model: {\n                          value: _vm.formData.enablePaypal,\n                          callback: function($$v) {\n                            _vm.$set(_vm.formData, \"enablePaypal\", $$v)\n                          },\n                          expression: \"formData.enablePaypal\"\n                        }\n                      },\n                      [\n                        _vm._v(\n                          \"\\n                        \" +\n                            _vm._s(_vm.$t(\"general.enabled\")) +\n                            \"\\n                    \"\n                        )\n                      ]\n                    )\n                  ],\n                  1\n                )\n              ]),\n              _vm._v(\" \"),\n              _c(\"collapse-transition\", [\n                _vm.formData.enablePaypal\n                  ? _c(\"div\", { staticClass: \"row\" }, [\n                      _c(\n                        \"div\",\n                        { staticClass: \"col-12 col-md-6 mb-4\" },\n                        [\n                          _c(\n                            \"switch-wrapper\",\n                            {\n                              attrs: {\n                                label: _vm.$t(\n                                  \"config.payment_gateway.live_mode\",\n                                  { attribute: \"Paypal\" }\n                                )\n                              }\n                            },\n                            [\n                              _c(\"base-switch\", {\n                                model: {\n                                  value: _vm.formData.paypalMode,\n                                  callback: function($$v) {\n                                    _vm.$set(_vm.formData, \"paypalMode\", $$v)\n                                  },\n                                  expression: \"formData.paypalMode\"\n                                }\n                              })\n                            ],\n                            1\n                          )\n                        ],\n                        1\n                      ),\n                      _vm._v(\" \"),\n                      _c(\"div\", { staticClass: \"col-12 col-md-6 mb-4\" }),\n                      _vm._v(\" \"),\n                      _c(\n                        \"div\",\n                        { staticClass: \"col-12 col-md-6 mb-4\" },\n                        [\n                          _c(\"base-input\", {\n                            attrs: {\n                              label: _vm.$t(\"config.payment_gateway.key\", {\n                                attribute: \"Paypal\"\n                              }),\n                              type: \"text\",\n                              error: _vm.formErrors.paypalKey,\n                              disabled: _vm.isLoading\n                            },\n                            on: {\n                              \"update:error\": function($event) {\n                                return _vm.$set(\n                                  _vm.formErrors,\n                                  \"paypalKey\",\n                                  $event\n                                )\n                              }\n                            },\n                            model: {\n                              value: _vm.formData.paypalKey,\n                              callback: function($$v) {\n                                _vm.$set(_vm.formData, \"paypalKey\", $$v)\n                              },\n                              expression: \"formData.paypalKey\"\n                            }\n                          })\n                        ],\n                        1\n                      ),\n                      _vm._v(\" \"),\n                      _c(\n                        \"div\",\n                        { staticClass: \"col-12 col-md-6 mb-4\" },\n                        [\n                          _c(\"base-input\", {\n                            attrs: {\n                              label: _vm.$t(\"config.payment_gateway.secret\", {\n                                attribute: \"Paypal\"\n                              }),\n                              type: \"text\",\n                              error: _vm.formErrors.paypalSecret,\n                              disabled: _vm.isLoading\n                            },\n                            on: {\n                              \"update:error\": function($event) {\n                                return _vm.$set(\n                                  _vm.formErrors,\n                                  \"paypalSecret\",\n                                  $event\n                                )\n                              }\n                            },\n                            model: {\n                              value: _vm.formData.paypalSecret,\n                              callback: function($$v) {\n                                _vm.$set(_vm.formData, \"paypalSecret\", $$v)\n                              },\n                              expression: \"formData.paypalSecret\"\n                            }\n                          })\n                        ],\n                        1\n                      )\n                    ])\n                  : _c(\"h5\", { staticClass: \"text-muted\" }, [\n                      _vm._v(_vm._s(_vm.$t(\"config.payment_gateway.disabled\")))\n                    ])\n              ])\n            ],\n            1\n          ),\n          _vm._v(\" \"),\n          _c(\n            \"fieldset\",\n            { staticClass: \"fieldset mt-4 pt-4\" },\n            [\n              _c(\"legend\", [\n                _vm._v(\"\\n                Paddle\\n                \"),\n                _c(\n                  \"div\",\n                  { staticClass: \"d-inline-flex align-items-center\" },\n                  [\n                    _c(\n                      \"base-checkbox\",\n                      {\n                        staticClass: \"ml-3 mt-1 mb-1\",\n                        attrs: { inline: \"\" },\n                        model: {\n                          value: _vm.formData.enablePaddle,\n                          callback: function($$v) {\n                            _vm.$set(_vm.formData, \"enablePaddle\", $$v)\n                          },\n                          expression: \"formData.enablePaddle\"\n                        }\n                      },\n                      [\n                        _vm._v(\n                          \"\\n                        \" +\n                            _vm._s(_vm.$t(\"general.enabled\")) +\n                            \"\\n                    \"\n                        )\n                      ]\n                    )\n                  ],\n                  1\n                )\n              ]),\n              _vm._v(\" \"),\n              _c(\"collapse-transition\", [\n                _vm.formData.enablePaddle\n                  ? _c(\"div\", { staticClass: \"row\" }, [\n                      _c(\n                        \"div\",\n                        { staticClass: \"col-12 col-md-6 mb-4\" },\n                        [\n                          _c(\n                            \"switch-wrapper\",\n                            {\n                              attrs: {\n                                label: _vm.$t(\n                                  \"config.payment_gateway.live_mode\",\n                                  { attribute: \"Paddle\" }\n                                )\n                              }\n                            },\n                            [\n                              _c(\"base-switch\", {\n                                model: {\n                                  value: _vm.formData.paddleMode,\n                                  callback: function($$v) {\n                                    _vm.$set(_vm.formData, \"paddleMode\", $$v)\n                                  },\n                                  expression: \"formData.paddleMode\"\n                                }\n                              })\n                            ],\n                            1\n                          )\n                        ],\n                        1\n                      ),\n                      _vm._v(\" \"),\n                      _c(\"div\", { staticClass: \"col-12 col-md-6 mb-4\" }),\n                      _vm._v(\" \"),\n                      _c(\n                        \"div\",\n                        { staticClass: \"col-12 col-md-6 mb-4\" },\n                        [\n                          _c(\"base-input\", {\n                            attrs: {\n                              label: _vm.$t(\"config.payment_gateway.vendor_id\"),\n                              type: \"text\",\n                              error: _vm.formErrors.paddleKey,\n                              disabled: _vm.isLoading\n                            },\n                            on: {\n                              \"update:error\": function($event) {\n                                return _vm.$set(\n                                  _vm.formErrors,\n                                  \"paddleKey\",\n                                  $event\n                                )\n                              }\n                            },\n                            model: {\n                              value: _vm.formData.paddleKey,\n                              callback: function($$v) {\n                                _vm.$set(_vm.formData, \"paddleKey\", $$v)\n                              },\n                              expression: \"formData.paddleKey\"\n                            }\n                          })\n                        ],\n                        1\n                      ),\n                      _vm._v(\" \"),\n                      _c(\n                        \"div\",\n                        { staticClass: \"col-12 col-md-6 mb-4\" },\n                        [\n                          _c(\"base-input\", {\n                            attrs: {\n                              label: _vm.$t(\"config.payment_gateway.auth_code\"),\n                              type: \"text\",\n                              error: _vm.formErrors.paddleSecret,\n                              disabled: _vm.isLoading\n                            },\n                            on: {\n                              \"update:error\": function($event) {\n                                return _vm.$set(\n                                  _vm.formErrors,\n                                  \"paddleSecret\",\n                                  $event\n                                )\n                              }\n                            },\n                            model: {\n                              value: _vm.formData.paddleSecret,\n                              callback: function($$v) {\n                                _vm.$set(_vm.formData, \"paddleSecret\", $$v)\n                              },\n                              expression: \"formData.paddleSecret\"\n                            }\n                          })\n                        ],\n                        1\n                      )\n                    ])\n                  : _c(\"h5\", { staticClass: \"text-muted\" }, [\n                      _vm._v(_vm._s(_vm.$t(\"config.payment_gateway.disabled\")))\n                    ])\n              ])\n            ],\n            1\n          ),\n          _vm._v(\" \"),\n          _c(\n            \"div\",\n            { staticClass: \"text-right mt-5\" },\n            [\n              _c(\n                \"base-button\",\n                {\n                  attrs: { type: \"button\", design: \"light\" },\n                  on: { click: _vm.reset }\n                },\n                [_vm._v(_vm._s(_vm.$t(\"general.reset\")))]\n              ),\n              _vm._v(\" \"),\n              _c(\n                \"base-button\",\n                { attrs: { type: \"submit\", design: \"primary\" } },\n                [_vm._v(_vm._s(_vm.$t(\"general.save\")))]\n              )\n            ],\n            1\n          )\n        ]\n      )\n    ]\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import { mapGetters, mapActions } from 'vuex'\nimport * as ConfigAPI from '@api/config'\nimport { formatKeysToSnakeCase } from '@js/core/utils/formatter'\n\nexport default {\n    components: {},\n    data() {\n        return {\n            formData: {},\n            formErrors: {},\n            initialFormData: null,\n            initianLength: 0,\n            emptyFormData: null,\n            entity: null,\n            preRequisite: {},\n            isLoading: true,\n            useUserPreference: false,\n            dataType: null,\n            configType: '',\n        }\n    },\n    computed: {\n        ...mapGetters('config', {\n            configsWithPreference: 'configs',\n            configs: 'configsOriginal',\n            vars: 'vars',\n            allowExtraInput: 'allowExtraInput',\n        }),\n        formHasErrors() {\n            let ans = false\n            this.formErrors.objForEach(er => {\n                ans = er !== '' ? true : ans\n            })\n            return ans\n        },\n    },\n    methods: {\n        ...mapActions('config', [\n            'GetConfig',\n        ]),\n        ...mapActions('user', [\n            'GetUser',\n        ]),\n        ...mapActions('navigation', [\n            'Generate',\n        ]),\n        ...mapActions('common', [\n            'Custom',\n        ]),\n        findActualValue(value, options, key = 'uuid') {\n            return options.find(option => option[key] === value) || null\n        },\n        submit(preference = false) {\n            if(formUtil.isUnchanged(this.initialFormData, this.formData)) {\n                this.$toasted.info(this.$t('general.nothing_changed'), this.$toastConfig.info)\n                return false\n            }\n\n            this.isLoading = true\n\n            if(this.formData.hasOwnProperty('type')) {\n                this.formData.type = this.formData.type.snakeCase()\n            }\n\n            const storeFn = preference === true || this.useUserPreference ? ConfigAPI.updateUserPref : (this.configType === 'module' ? ConfigAPI.updateModule : ConfigAPI.update)\n\n            if (this.beforeSubmit && typeof this.beforeSubmit === \"function\") {\n                const shouldProceed = this.beforeSubmit()\n                if(shouldProceed === false) {\n                    this.isLoading = false\n                    return\n                }\n            }\n\n            storeFn(this.formData)\n                .then(response => {\n                    const fnToCall = preference === true || this.useUserPreference ? this.GetUser : this.GetConfig\n                    fnToCall()\n                        .then(() => {\n                            this.$toasted.success(response.message, this.$toastConfig)\n                            this.initialFormData = _.cloneDeep(this.formData)\n                            this.isLoading = false\n                        })\n                        .catch(error => {\n                            this.isLoading = false\n                            this.formErrors = formUtil.handleErrors(error)\n                        })\n\n                    if (typeof this.afterSubmit === \"function\") {\n                        this.afterSubmit()\n                    }\n                    if (typeof this.afterSubmitSuccess === \"function\") {\n                        this.afterSubmitSuccess()\n                    }\n                })\n                .catch(error => {\n                    this.isLoading = false\n                    this.formErrors = formUtil.handleErrors(error)\n\n                    if (typeof this.afterSubmit === \"function\") {\n                        this.afterSubmit()\n                    }\n                    if (typeof this.afterSubmitError === \"function\") {\n                        this.afterSubmitError()\n                    }\n                })\n        },\n        reset() {\n            formUtil.confirmAction()\n                .then((result) => {\n                    if (result.value) {\n                        this.formData = Object.assign({}, this.formData, _.cloneDeep(this.initialFormData))\n                    }\n                })\n        },\n        unsavedCheck(next) {\n            formUtil.unsavedCheckAlert(this.initialFormData, this.formData, next)\n        },\n        fillPreRequisite(response) {\n            this.preRequisite.objForEach((value, key) => {\n                this.preRequisite[key] = response.hasOwnProperty(key) ? response[key] : value\n            })\n\n            this.isLoading = false\n        },\n        fillFormData() {\n            this.isLoading = true\n            const configsToUse = this.useUserPreference ? this.configsWithPreference : this.configs\n            if(this.formData.type && configsToUse[this.formData.type]) {\n                this.formData = formUtil.assignValues(this.formData, configsToUse[this.formData.type])\n            }\n\n            if(this.formData.types && Array.isArray(this.formData.types)) {\n                this.formData.types.forEach((value) => {\n                    this.formData = formUtil.assignValues(this.formData, configsToUse[value])\n                })\n            }\n\n            if(this.formData.override) {\n                this.formData.objForEach((value, key) => {\n                    if(value && _.isObject(value)) {\n                        this.formData[key] = formUtil.assignValues(this.formData[key], configsToUse[key])\n                    } else {\n                        this.formData[key] = configsToUse[key] ? configsToUse[key] : value\n                    }\n                })\n            }\n\n            if (typeof this.addNewRow === \"function\" && typeof this.addNewRowIfNone === \"function\") {\n                this.addNewRowIfNone()\n            }\n\n            this.isLoading = false\n        },\n        async getInitialData(callbackFn) {\n            this.isLoading = true\n            try {\n                const response = await ConfigAPI.getPreRequisite(Object.keys(this.preRequisite).join(','))\n                this.fillPreRequisite(response)\n\n                if(callbackFn) {\n                    this.$nextTick(() => {\n                        callbackFn()\n                    })\n                }\n                return response\n            } catch (error) {\n                this.isLoading = false\n                this.formErrors = formUtil.handleErrors(error)\n                throw error\n            }\n        },\n    },\n    mounted() {\n        this.fillFormData()\n        this.initialFormData = _.cloneDeep(this.formData)\n    },\n    beforeDestroy () {\n        delete this.formData\n        delete this.formErrors\n        delete this.preRequisite\n    },\n    beforeRouteLeave(to, from, next) {\n        this.unsavedCheck(next)\n    }\n}\n","import { render, staticRenderFns } from \"./index.vue?vue&type=template&id=2d07c660&\"\nimport script from \"./index.vue?vue&type=script&lang=js&\"\nexport * from \"./index.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/pia.itebco.com/public_html/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('2d07c660')) {\n      api.createRecord('2d07c660', component.options)\n    } else {\n      api.reload('2d07c660', component.options)\n    }\n    module.hot.accept(\"./index.vue?vue&type=template&id=2d07c660&\", function () {\n      api.rerender('2d07c660', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"resources/js/views/app/config/payment-gateway/index.vue\"\nexport default component.exports","import mod from \"-!../../../../../../node_modules/babel-loader/lib/index.js??ref--4-0!../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../../node_modules/babel-loader/lib/index.js??ref--4-0!../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js&\"","export * from \"-!../../../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=template&id=2d07c660&\""],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0GA;AACA;AACA;AAEA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AADA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAjeA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAaA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAeA;AAaaA;AACA;AAdA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AAvIA;AAyIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApLA;;;;;;;;;;;;ACJA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAiBA;AACA;AACA;;;;;;;;;;;;ACtCA;AAAA;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;A","sourceRoot":""}