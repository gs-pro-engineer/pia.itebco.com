{"version":3,"file":"js/chunks/app/chat~app/config/locale/add~app/config/role/add~app/contact/add~app/contact/edit~app/meeting/add~~070dbfec.js?id=120830163531423cce99","sources":["webpack:///./resources/js/core/filters/momentz.js","webpack:///./resources/js/core/utils/templater.js","webpack:///./resources/js/mixins/form.js"],"sourcesContent":["import store from '@js/store'\nconst configs = store.getters['config/configs']\nconst vars = store.getters['config/vars']\n\nconst getActiveConfigs = () => {\n    return {\n        timezone: configs.authenticated ? configs.system.timezone : moment.tz.guess(),\n        defaultDateFormat: vars.defaultDateFormat,\n        defaultDateTimeFormat: vars.defaultDateTimeFormat,\n        serverDateFormat: vars.serverDateFormat,\n        serverDateTimeFormat: vars.serverDateTimeFormat,\n        calendarLocale: {\n            // lastDay: '[Yesterday]',\n            lastDay: vars.defaultDateFormat,\n            sameDay: vars.defaultTimeFormat,\n            lastWeek: vars.defaultDateFormat,\n            sameElse: vars.defaultDateFormat\n        }\n    }\n}\n\nexport const now = (formatOption, timezoneOption) => {\n    const activeConfigs = getActiveConfigs()\n    let momentObj = moment.utc().tz(timezoneOption || activeConfigs.timezone)\n\n    if(formatOption && formatOption.hasOwnProperty('moment') && formatOption.moment) {\n        return momentObj\n    }\n\n    return momentObj.format(formatOption || activeConfigs.defaultDateTimeFormat)\n}\n\nexport const momentDate = (value, formatOption) => {\n    const activeConfigs = getActiveConfigs()\n    let momentObj = moment(value, activeConfigs.serverDateFormat)\n\n    if(!value) {\n        return 'INVALID DATE STRING'\n    }\n\n    if(Array.isArray(value)) {\n        momentObj = moment(value[0], value[1])\n    }\n\n    if(formatOption && formatOption.hasOwnProperty('moment') && formatOption.moment) {\n        return momentObj\n    }\n\n    return momentObj.format(formatOption || activeConfigs.defaultDateFormat)\n}\n\nexport const momentTime = (value, formatOption) => {\n    const activeConfigs = getActiveConfigs()\n    let momentObj = moment(value, activeConfigs.serverTimeFormat)\n\n    if(!value) {\n        return 'INVALID TIME STRING'\n    }\n\n    if(Array.isArray(value)) {\n        momentObj = moment(value[0], value[1])\n    }\n\n    if(formatOption && formatOption.hasOwnProperty('moment') && formatOption.moment) {\n        return momentObj\n    }\n\n    return momentObj.format(formatOption || activeConfigs.defaultTimeFormat)\n}\n\nexport const momentDateTime = (value, formatOption) => {\n    const activeConfigs = getActiveConfigs()\n    let momentObj = moment(value, activeConfigs.serverDateTimeFormat)\n\n    if(!value) {\n        return 'INVALID DATE TIME STRING'\n    }\n\n    if(Array.isArray(value)) {\n        momentObj = moment(value[0], value[1])\n    }\n\n    if(formatOption && formatOption.hasOwnProperty('moment') && formatOption.moment) {\n        return momentObj\n    }\n\n    return momentObj.format(formatOption || activeConfigs.defaultDateTimeFormat)\n}\n\nexport const momentCalendar = (value, calendarOption) => {\n    const activeConfigs = getActiveConfigs()\n    let momentObj = moment(value, activeConfigs.serverDateTimeFormat)\n\n    if(!value) {\n        return 'INVALID DATE TIME STRING'\n    }\n\n    if(Array.isArray(value)) {\n        momentObj = moment(value[0], value[1])\n    }\n\n    if(calendarOption && calendarOption.hasOwnProperty('moment') && calendarOption.moment) {\n        return momentObj\n    }\n\n    return momentObj.calendar(calendarOption ? calendarOption : activeConfigs.calendarLocale)\n}\n\nexport const momentDateTz = (value, formatOption, timezoneOption) => {\n    const activeConfigs = getActiveConfigs()\n\n    if(!value) {\n        return 'INVALID DATE STRING'\n    }\n\n    let momentObj = moment.utc(value, activeConfigs.serverDateFormat)\n\n    if(value === 'NOW') {\n        momentObj = moment.utc()\n    }\n\n    if(Array.isArray(value)) {\n        momentObj = moment.utc(value[0], value[1])\n    }\n\n    if(formatOption && formatOption.hasOwnProperty('moment') && formatOption.moment) {\n        return momentObj.tz(timezoneOption || activeConfigs.timezone)\n    }\n\n    return momentObj.tz(timezoneOption || activeConfigs.timezone).format(formatOption || activeConfigs.defaultDateFormat)\n}\n\nexport const momentTimeTz = (value, formatOption, timezoneOption) => {\n    const activeConfigs = getActiveConfigs()\n    let momentObj = moment.utc(`${moment().format(activeConfigs.serverDateFormat)} ${value}`, activeConfigs.serverTimeFormat)\n\n    if(!value) {\n        return 'INVALID TIME STRING'\n    }\n\n    if(Array.isArray(value)) {\n        momentObj = moment.utc(value[0], value[1])\n    }\n\n    if(formatOption && formatOption.hasOwnProperty('moment') && formatOption.moment) {\n        return momentObj.tz(timezoneOption || activeConfigs.timezone)\n    }\n\n    return momentObj.tz(timezoneOption || activeConfigs.timezone).format(formatOption || activeConfigs.defaultTimeFormat)\n}\n\nexport const momentDateTimeTz = (value, formatOption, timezoneOption) => {\n    const activeConfigs = getActiveConfigs()\n\n    if(!value) {\n        return 'INVALID DATE TIME STRING'\n    }\n\n    let momentObj\n\n    if(value === 'NOW') {\n        momentObj = moment.utc()\n    } else if(Array.isArray(value)) {\n        momentObj = moment.utc(value[0], value[1])\n    } else {\n        momentObj = moment.utc(value, activeConfigs.serverDateTimeFormat)\n    }\n\n    if(formatOption && formatOption.hasOwnProperty('moment') && formatOption.moment) {\n        return momentObj.tz(timezoneOption || activeConfigs.timezone)\n    }\n\n    return momentObj.tz(timezoneOption || activeConfigs.timezone).format(formatOption || activeConfigs.defaultDateTimeFormat)\n}\n\nexport const momentCalendarTz = (value, calendarOption = null, timezoneOption = null) => {\n    const activeConfigs = getActiveConfigs()\n    let momentObj = moment.utc(value, activeConfigs.serverDateTimeFormat)\n\n    if(!value) {\n        return 'INVALID DATE TIME STRING'\n    }\n\n    if(Array.isArray(value)) {\n        momentObj = moment.utc(value[0], value[1])\n    }\n\n    let result = momentObj.tz(timezoneOption || activeConfigs.timezone)\n\n    if(calendarOption && calendarOption.hasOwnProperty('moment') && calendarOption.moment) {\n        return result\n    }\n\n    result = result.calendar(calendarOption ? calendarOption : activeConfigs.calendarLocale)\n    return result\n}\n\nexport default { momentDate, momentTime, momentDateTime, momentCalendar, momentDateTz, momentTimeTz, momentDateTimeTz, momentCalendarTz }\n","import moment from 'moment'\n\nexport const templateStrings = {\n    'DAY_OF_MONTH': {\n        code: '%DAY_OF_MONTH%',\n        example: 'Ex. 1-31',\n        outputFormat: 'moment',\n        output: 'DD',\n    },\n    'DAY_OF_YEAR': {\n        code: '%DAY_OF_YEAR%',\n        example: 'Ex. 1-365',\n        outputFormat: 'moment',\n        output: 'DDDD',\n    },\n    'YEAR': { \n        code: '%YEAR%',\n        example: 'Ex. 2020',\n        outputFormat: 'moment',\n        output: 'YYYY',\n    },\n    'YEAR_SHORT': { \n        code: '%YEAR_SHORT%',\n        example: 'Ex. 20',\n        outputFormat: 'moment',\n        output: 'YY',\n    },\n    'MONTH': { \n        code: '%MONTH%',\n        example: 'Ex. JANUARY',\n        outputFormat: 'moment',\n        output: 'MMMM',\n    },\n    'MONTH_SHORT': { \n        code: '%MONTH_SHORT%',\n        example: 'Ex. JAN',\n        outputFormat: 'moment',\n        output: 'MMM',\n    },\n    'MONTH_NUMBER': { \n        code: '%MONTH_NUMBER%',\n        example: 'Ex. 1 - 12',\n        outputFormat: 'moment',\n        output: 'MM',\n    },\n    'DAY': { \n        code: '%DAY%',\n        example: 'Ex. MONDAY',\n        outputFormat: 'moment',\n        output: 'dddd',\n    },\n    'DAY_SHORT': { \n        code: '%DAY_SHORT%',\n        example: 'Ex. MON',\n        outputFormat: 'moment',\n        output: 'ddd',\n    },\n    'DAY_NUMBER': { \n        code: '%DAY_NUMBER%',\n        example: 'Ex. 1 - 7',\n        outputFormat: 'moment',\n        output: 'E',\n    },\n    'DATE': { \n        code: '%DATE%',\n        example: 'Ex. 31-08-1987',\n        outputFormat: 'moment',\n        output: 'YYYY',\n    },\n    'TIME': { \n        code: '%DATE%',\n        example: 'Ex. 23:59',\n        outputFormat: 'moment',\n        output: 'mm',\n    },\n}\n\nconst allTagRegex = /%(.*?)%/g;\n\nexport function build(content) {\n    const placeholders = content.match(allTagRegex)\n    templateStrings.objForEach((placeholder, key) => {\n        const regex = new RegExp(placeholder.code, 'g')\n\n        if(placeholder.outputFormat === 'moment') {\n            const toReplaceWith = moment().format(placeholder.output)\n            content = content.replace(regex, toReplaceWith)\n        }\n    })\n    return content\n}\n","import * as headerMixins from './header'\nimport FileUploader from '@components/FileUploader'\nimport { numberPadding, saveToStorage, getFromStorage, removeFromStorage } from '@core/utils'\nimport * as templater from '@core/utils/templater'\nimport { mapGetters, mapActions } from 'vuex'\nimport EventBus from '@js/event-bus'\n\nimport * as MomentTz from '@core/filters/momentz'\n\nexport default {\n    components: {\n        FileUploader,\n    },\n    props: {\n        editData: {\n            type: Object\n        },\n        isFetching: {\n            type: Boolean,\n            default: false\n        },\n        duplicate: {\n            type: Boolean,\n            default: false\n        },\n    },\n    data() {\n        return {\n            uuid: null,\n            subUuid: null,\n            formData: {},\n            formErrors: {},\n            formLabels: {},\n            customFilters: {},\n            initianLength: 0,\n            initialFormData: null,\n            emptyFormData: null,\n            preRequisite: {},\n            keepAdding: false,\n            keepAddingOption: 'clear_all',\n            keepAddingSelectedFields: null,\n            keepAddingFields: [],\n            areArrayOfObjectsFields: [],\n            isLoading: true,\n            getInitialDataCalled: false,\n            doInitBeforeGetInitialData: false,\n            initUrl: '',\n            initSubUrl: null,\n            dateTimeFields: null,\n            dataType: null,\n            uploaderConfig: {\n                module: '',\n                token: '',\n                allowedExtensions: '',\n                allowedMaxFileSize: null,\n                maxNoOfFiles: 5,\n                uuid: uuid(),\n            },\n            headerButtons: null,\n        }\n    },\n    computed: {\n        ...mapGetters('config', [\n            'configs',\n            'vars',\n            'allowExtraInput',\n        ]),\n        ...mapGetters('user', [\n            'hasPermission',\n            'hasRole',\n        ]),\n        editing() {\n            return this.editData && !this.duplicate\n        },\n        showKeepAdding() {\n            return !this.editData || this.duplicate\n        },\n        codePrefix() {\n            return this.formData.codePrefix\n        },\n        lastCodeObj() {\n            return this.preRequisite.codes.find(v => v.codePrefix === this.formData.codePrefix)\n        },\n        formHasErrors() {\n            let ans = false\n            this.formErrors.objForEach(er => {\n                if(_.isObject(er)) {\n                    er.objForEach(erTwo => {\n                        ans = erTwo !== '' ? true : ans\n                    })\n                } else {\n                    ans = er !== '' ? true : ans\n                }\n            })\n            return ans\n        },\n    },\n    watch: {\n        editData(value) {\n            if(value) {\n                let editDataValue = value\n                if(this.dateTimeFields && Array.isArray(this.dateTimeFields)) {\n                    this.dateTimeFields.forEach((key) => {\n                        if(editDataValue[key]) {\n                            editDataValue[key] = MomentTz.momentDateTimeTz(editDataValue[key], this.vars.serverDateTimeFormat)\n                        }\n                    })\n                }\n\n                if(this.timeFields && Array.isArray(this.timeFields)) {\n                    this.timeFields.forEach((key) => {\n                        if(Array.isArray(key)) {\n                            if(editDataValue[key[0]]) {\n                                editDataValue[key[0]] = MomentTz.momentTimeTz([ editDataValue[key[0]], editDataValue[key[1]] ], this.vars.serverTimeFormat, null)\n                            }\n                        } else {\n                            if(editDataValue[key]) {\n                                editDataValue[key] = MomentTz.momentTimeTz(editDataValue[key], this.vars.serverTimeFormat, null)\n                            }\n                        }\n                    })\n                }\n\n                if(this.mergeFormDataAndEntity) {\n                    this.formData = _.merge(this.formData, _.cloneDeep(editDataValue))\n                } else {\n                    this.formData = Object.assign({}, this.formData, _.cloneDeep(editDataValue))\n                }\n\n                this.uuid = this.formData.uuid\n\n                if(this.uploaderConfig) {\n                    this.uploaderConfig.token = this.formData.token\n                }\n\n                if (typeof this.addNewRow === \"function\" && typeof this.addNewRowIfNone === \"function\") {\n                    this.addNewRowIfNone()\n                }\n                if (typeof this.afterEditData === \"function\") {\n                    this.afterEditData()\n                }\n                if(this.duplicate) {\n                    this.computeCodeNumber(this.formData.codePrefix)\n                }\n                window.setTimeout(() => {\n                    this.initialFormData = _.cloneDeep(this.formData)\n                }, 500)\n            }\n        },\n        codePrefix: function() {\n            this.computeCodeNumber()\n        },\n    },\n    methods: {\n        ...mapActions('common', [\n            'Init',\n            'InitSub',\n            'Get',\n            'Store',\n            'Update',\n            'GetPreRequisite',\n            'Destroy',\n            'Custom',\n            'SetPageHeader',\n        ]),\n        ...mapActions('config', [\n            'SetUiConfig',\n            'SetConfig',\n        ]),\n        computeCodeNumber() {\n            if(this.preRequisite.codes && this.showKeepAdding) {\n                const codeObj = this.lastCodeObj\n                const codeDigit = this.configs[this.dataType].codeDigit\n\n                if (this.lastCodeObj) {\n                    this.formData.codeNumber = this.numberPadding(this.lastCodeObj.codeNumber + 1, codeDigit)\n                } else {\n                    this.formData.codeNumber = this.numberPadding(1, codeDigit)\n                }\n            }\n        },\n        numberPadding(exNumber = 1, codeDigit) {\n            return numberPadding(exNumber, codeDigit || this.configs[this.dataType].codeDigit)\n        },\n        doNothing() {\n\n        },\n        submit() {\n            if(formUtil.isUnchanged(this.initialFormData, this.formData)) {\n                this.$toasted.info(this.$t('general.nothing_changed'), this.$toastConfig.info)\n                return false\n            }\n            this.doInit()\n            this.doInitSub()\n\n            this.isLoading = true\n\n            if (this.beforeSubmit && typeof this.beforeSubmit === \"function\") {\n                const shouldProceed = this.beforeSubmit()\n                if(shouldProceed === false) {\n                    this.isLoading = false\n                    return\n                }\n            }\n\n            if(this.duplicate) {\n                this.formData.uuid = null\n            }\n\n            const saveData = this.formData.uuid ? this.Update : this.Store\n\n            saveData(this.formData)\n                .then(response => {\n                    this.$toasted.success(response.message, this.$toastConfig)\n\n                    if (typeof this.afterSubmit === \"function\") {\n                        this.afterSubmit(response)\n                    } else {\n                        if (this.keepAdding) {\n                            this.uploaderConfig.uuid = uuid()\n                            this.formData = formUtil.clearFormConditionally(this.formData, this.initialFormData, this.keepAddingOption, this.keepAddingSelectedFields)\n                            if(this.getInitialDataCalled) {\n                                this.getInitialData()\n                            }\n                            this.resetFormErrors()\n                        } else {\n                            this.initialFormData = _.cloneDeep(this.formData)\n                            this.$router.back()\n                        }\n                    }\n\n                    this.isLoading = false\n                })\n                .catch(error => {\n                    this.isLoading = false\n                    this.formErrors = Object.assign({}, this.formErrors, formUtil.handleErrors(error))\n                })\n        },\n        reset() {\n            formUtil.confirmAction()\n                .then((result) => {\n                    if (result.value) {\n                        this.resetFormErrors()\n                        this.formData = Object.assign({}, this.formData, _.cloneDeep(this.initialFormData))\n                    }\n                })\n        },\n        unsavedCheck(next) {\n            formUtil.unsavedCheckAlert(this.initialFormData, this.formData, next)\n        },\n        fillPreRequisite(response) {\n            this.preRequisite.objForEach((value, key) => {\n                this.preRequisite[key] = response.hasOwnProperty(key) ? response[key] : value\n            })\n        },\n        setUploaderConfig(uploadConfig) {\n            this.uploaderConfig.objForEach((value, key) => {\n                this.uploaderConfig[key] = uploadConfig.hasOwnProperty(key) ? uploadConfig[key] : value\n            })\n        },\n        async getInitialData(callbackFn) {\n            this.isLoading = true\n            this.getInitialDataCalled = true\n            try {\n                if(this.doInitBeforeGetInitialData) {\n                    this.doInit()\n                }\n\n                const response = await this.GetPreRequisite(this.customFilters)\n\n                if(this.doInitBeforeGetInitialData) {\n                    this.doInitSub()\n                }\n\n                this.fillPreRequisite(response)\n\n                if(response['uploadConfig']) {\n                    this.setUploaderConfig(response['uploadConfig'])\n                }\n\n                if (typeof this.addNewRow === \"function\" && typeof this.addNewRowIfNone === \"function\") {\n                    this.$nextTick(() => {\n                        this.addNewRowIfNone()\n                    })\n                }\n\n                if(this.configs[this.dataType]) {\n                    this.$nextTick(() => {\n                        this.formData.codePrefix = templater.build(this.configs[this.dataType].codePrefix)\n                    })\n                }\n\n                if (this.afterGetInitialData && typeof this.afterGetInitialData === \"function\") {\n                    this.afterGetInitialData(response)\n                }\n\n                if(callbackFn) {\n                    this.$nextTick(() => {\n                        callbackFn(response)\n\n                        window.setTimeout(() => {\n                            this.initialFormData = _.cloneDeep(this.formData)\n                        }, 500)\n                    })\n                }\n\n                this.isLoading = false\n                return response\n            } catch (error) {\n                this.isLoading = false\n                formUtil.handleErrors(error)\n                throw error\n            }\n        },\n        getEntityData() {\n            this.isLoading = true\n            this.Get(this.formData.uuid)\n                .then(res => {\n                    this.formData.objForEach((value, key) => {\n                        this.formData[key] = res.hasOwnProperty(key) ? res[key] : null\n                    })\n                    this.initialFormData = _.cloneDeep(this.formData)\n                    this.isLoading = false\n                })\n                .catch(error => {\n                    this.isLoading = false\n                    formUtil.handleErrors(error)\n                })\n        },\n        addTag(newTag) {\n            const tag = {\n                name: newTag,\n                slug: formUtil.generateSlug(newTag)\n            }\n            this.preRequisite.tags.push(tag)\n            this.formData.tags.push(tag)\n        },\n        newModalClose(storedData) {\n            this.doInit()\n            this.doInitSub()\n\n            if(storedData) {\n                const processStoredData = () => {\n                    const putFormData = (val) => {\n                        if(storedData.push) {\n                            this.formData[storedData.dataTypeArr].push(val)\n                        } else {\n                            this.formData[storedData.dataType] = val\n                        }\n                    }\n\n                    this.isLoading = true\n                    if(storedData.dataType) {\n\n                        if(storedData.dontMatch) {\n                            putFormData(storedData)\n                        } else if(storedData.dataTypeArr && storedData.propertyToMatch) {\n                            putFormData(this.preRequisite[storedData.dataTypeArr].find(v => v[storedData.propertyToMatch] === storedData[storedData.propertyToMatch]) || null)\n                        }\n                    }\n                    this.isLoading = false\n                    if(this.newModalCloseCallback && _.isFunction(this.newModalCloseCallback)) {\n                        this.newModalCloseCallback()\n                    }\n                }\n\n                if(this.getInitialDataCalled) {\n                    this.getInitialData(processStoredData)\n                } else {\n                    processStoredData()\n                }\n            }\n        },\n        getHeaderOptions() {\n            let buttons = []\n            if (this.headerButtons) {\n                buttons = buttons.concat(this.headerButtons)\n            }\n\n            let links = []\n            links.push(headerMixins.saveDraftOption())\n\n            if(this.checkSavedDraft()) {\n                links.push(headerMixins.fetchSavedDraftOption())\n                links.push(headerMixins.clearSavedDraftOption())\n            }\n\n            // links.push(headerMixins.printOption())\n            // links.push(headerMixins.exportPdfOption())\n\n            return {\n                hideLinks: this.hideHeaderLinks || false,\n                buttons,\n                links,\n                title: this.pageTitle || '',\n                subTitle: this.pageTitle ? this.subTitle || '' : '',\n            }\n        },\n        getKeyBindingOptions() {\n            let opts = {\n                ...headerMixins.commonKeyBindings\n            }\n            return opts\n        },\n        applyPageHeader() {\n            let pageHeaderOptions = Object.assign({}, this.getHeaderOptions(), this.header || {})\n            let keyBindings = Object.assign({}, this.getKeyBindingOptions(), this.keyBindings || {})\n\n            this.SetPageHeader(pageHeaderOptions)\n            this.SetConfig({\n                keyBindings: keyBindings,\n            })\n        },\n        async export (options) {\n            this.isLoading = true\n            try {\n                let printTitle = `Printing ${this.dataTitle || ''}`\n                if(this.printTitle) {\n                    printTitle = this.printTitle\n                }\n                const printPreview = this.configs.system.printPreview\n                this.$printComponent('printable', { title: printTitle, autoPrint: !printPreview, autoCloseAfterPrint: !printPreview })\n            } catch (e) { }\n            this.isLoading = false\n        },\n        resetFormErrors() {\n            this.formErrors = {}\n            if(this.formData) {\n                this.formData.objForEach((value, key) => {\n                    if(_.isObject(value) && (!_.isArray(value) || this.areArrayOfObjectsFields.indexOf(key) != -1)) {\n                        this.formErrors[key] = {}\n                    }\n                })\n            }\n        },\n        saveDraft() {\n            const keyName = this.initUrl.replace('/', '_')\n            saveToStorage(`${this.vars.localStorageKey}_${keyName}`, this.formData)\n            this.applyPageHeader()\n            this.$toasted.info(this.$t('general.draft_saved'), this.$toastConfig.info)\n        },\n        checkSavedDraft() {\n            const keyName = this.initUrl.replace('/', '_')\n            const formData = getFromStorage(`${this.vars.localStorageKey}_${keyName}`, true)\n\n            if(formData) {\n                return true\n            }\n            return false\n        },\n        fetchSavedDraft() {\n            const keyName = this.initUrl.replace('/', '_')\n            const formData = getFromStorage(`${this.vars.localStorageKey}_${keyName}`, true)\n            if(formData) {\n                this.formData = Object.assign({}, this.formData, _.cloneDeep(formData))\n                this.$toasted.info(this.$t('general.draft_fetched'), this.$toastConfig.info)\n            } else {\n                this.$toasted.error(this.$t('general.draft_fetched'), this.$toastConfig.error)\n            }\n        },\n        clearSavedDraft() {\n            const keyName = this.initUrl.replace('/', '_')\n            removeFromStorage(`${this.vars.localStorageKey}_${keyName}`)\n            this.applyPageHeader()\n            this.$toasted.info(this.$t('general.draft_cleared'), this.$toastConfig.info)\n        },\n        doInitSub() {\n            if(this.initSubUrl) {\n                this.InitSub({ url: (this.subUuid ? this.subUuid + '/' : '') + this.initSubUrl })\n            }\n        },\n        doInit() {\n            this.Init({ url: this.initUrl })\n\n            this.applyPageHeader()\n        },\n    },\n    mounted() {\n        EventBus.$off('ROUTE_LEAVING', this.unsavedCheck)\n        EventBus.$on('ROUTE_LEAVING', this.unsavedCheck)\n        EventBus.$off('SAVE_DRAFT', this.saveDraft)\n        EventBus.$on('SAVE_DRAFT', this.saveDraft)\n        EventBus.$off('FETCH_SAVED_DRAFT', this.fetchSavedDraft)\n        EventBus.$on('FETCH_SAVED_DRAFT', this.fetchSavedDraft)\n        EventBus.$off('CLEAR_SAVED_DRAFT', this.clearSavedDraft)\n        EventBus.$on('CLEAR_SAVED_DRAFT', this.clearSavedDraft)\n\n        if (this.$route.params.subUuid) {\n            this.subUuid = this.$route.params.subUuid\n        }\n\n        this.emptyFormData = _.cloneDeep(this.formData)\n\n        this.doInit()\n        this.doInitSub()\n\n        this.uploaderConfig.token = this.formData.token\n        if(this.configs.system && this.configs.system.allowedFileExtensions) {\n            this.uploaderConfig.allowedExtensions = this.configs.system.allowedFileExtensions\n        }\n        if(this.configs.system && this.configs.system.postMaxSize) {\n            this.uploaderConfig.allowedMaxFileSize = this.configs.system.postMaxSize\n        }\n        this.initialFormData = _.cloneDeep(this.formData)\n    },\n    created() {\n        if(this.formLabels) {\n            this.formLabels.objForEach((value, key) => {\n                this.keepAddingFields.push({\n                    uuid: key,\n                    value: value\n                })\n            })\n        }\n        this.resetFormErrors()\n    },\n    beforeDestroy () {\n        delete this.formData\n        delete this.formErrors\n        delete this.formLabels\n        delete this.preRequisite\n        delete this.keepAddingFields\n    },\n    destroyed() {\n        EventBus.$off('ROUTE_LEAVING', this.unsavedCheck)\n        EventBus.$off('SAVE_DRAFT', this.saveDraft)\n        EventBus.$off('FETCH_SAVED_DRAFT', this.fetchSavedDraft)\n        EventBus.$off('CLEAR_SAVED_DRAFT', this.clearSavedDraft)\n    },\n}\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AANA;AAcrMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAnEA;AA2EA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1FA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AARA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AA/BA;AAiCA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlCA;AAoCA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtDA;AAwDA;AAgiDA;AACA;AAlDA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqDA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AAnQA;AAoQA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAlUA;AAoUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvgBA;;;;A","sourceRoot":""}